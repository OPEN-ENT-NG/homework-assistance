import * as z from "react";
import { jsxs as b, jsx as I } from "react/jsx-runtime";
import { H as w, I as C, L as x, G as T, P as e } from "./identifier-B7MO0PvI.js";
import { m as N } from "./memoTheme-CqfvfBST.js";
import { s as O, u as R, c as j } from "./DefaultPropsProvider-BYFwNPLt.js";
function E(o) {
  return w("MuiSvgIcon", o);
}
C("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);
const $ = (o) => {
  const {
    color: r,
    fontSize: t,
    classes: s
  } = o, n = {
    root: ["root", r !== "inherit" && `color${x(r)}`, `fontSize${x(t)}`]
  };
  return j(n, E, s);
}, A = O("svg", {
  name: "MuiSvgIcon",
  slot: "Root",
  overridesResolver: (o, r) => {
    const {
      ownerState: t
    } = o;
    return [r.root, t.color !== "inherit" && r[`color${x(t.color)}`], r[`fontSize${x(t.fontSize)}`]];
  }
})(N(({
  theme: o
}) => {
  var r, t, s, n, c, g, a, y, p, m, l, d, v, f;
  return {
    userSelect: "none",
    width: "1em",
    height: "1em",
    display: "inline-block",
    flexShrink: 0,
    transition: (n = (r = o.transitions) == null ? void 0 : r.create) == null ? void 0 : n.call(r, "fill", {
      duration: (s = (t = (o.vars ?? o).transitions) == null ? void 0 : t.duration) == null ? void 0 : s.shorter
    }),
    variants: [
      {
        props: (i) => !i.hasSvgAsChild,
        style: {
          // the <svg> will define the property that has `currentColor`
          // for example heroicons uses fill="none" and stroke="currentColor"
          fill: "currentColor"
        }
      },
      {
        props: {
          fontSize: "inherit"
        },
        style: {
          fontSize: "inherit"
        }
      },
      {
        props: {
          fontSize: "small"
        },
        style: {
          fontSize: ((g = (c = o.typography) == null ? void 0 : c.pxToRem) == null ? void 0 : g.call(c, 20)) || "1.25rem"
        }
      },
      {
        props: {
          fontSize: "medium"
        },
        style: {
          fontSize: ((y = (a = o.typography) == null ? void 0 : a.pxToRem) == null ? void 0 : y.call(a, 24)) || "1.5rem"
        }
      },
      {
        props: {
          fontSize: "large"
        },
        style: {
          fontSize: ((m = (p = o.typography) == null ? void 0 : p.pxToRem) == null ? void 0 : m.call(p, 35)) || "2.1875rem"
        }
      },
      // TODO v5 deprecate color prop, v6 remove for sx
      ...Object.entries((o.vars ?? o).palette).filter(([, i]) => i && i.main).map(([i]) => {
        var u, h;
        return {
          props: {
            color: i
          },
          style: {
            color: (h = (u = (o.vars ?? o).palette) == null ? void 0 : u[i]) == null ? void 0 : h.main
          }
        };
      }),
      {
        props: {
          color: "action"
        },
        style: {
          color: (d = (l = (o.vars ?? o).palette) == null ? void 0 : l.action) == null ? void 0 : d.active
        }
      },
      {
        props: {
          color: "disabled"
        },
        style: {
          color: (f = (v = (o.vars ?? o).palette) == null ? void 0 : v.action) == null ? void 0 : f.disabled
        }
      },
      {
        props: {
          color: "inherit"
        },
        style: {
          color: void 0
        }
      }
    ]
  };
})), S = /* @__PURE__ */ z.forwardRef(function(r, t) {
  const s = R({
    props: r,
    name: "MuiSvgIcon"
  }), {
    children: n,
    className: c,
    color: g = "inherit",
    component: a = "svg",
    fontSize: y = "medium",
    htmlColor: p,
    inheritViewBox: m = !1,
    titleAccess: l,
    viewBox: d = "0 0 24 24",
    ...v
  } = s, f = /* @__PURE__ */ z.isValidElement(n) && n.type === "svg", i = {
    ...s,
    color: g,
    component: a,
    fontSize: y,
    instanceFontSize: r.fontSize,
    inheritViewBox: m,
    viewBox: d,
    hasSvgAsChild: f
  }, u = {};
  m || (u.viewBox = d);
  const h = $(i);
  return /* @__PURE__ */ b(A, {
    as: a,
    className: T(h.root, c),
    focusable: "false",
    color: p,
    "aria-hidden": l ? void 0 : !0,
    role: l ? "img" : void 0,
    ref: t,
    ...u,
    ...v,
    ...f && n.props,
    ownerState: i,
    children: [f ? n.props.children : n, l ? /* @__PURE__ */ I("title", {
      children: l
    }) : null]
  });
});
process.env.NODE_ENV !== "production" && (S.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Node passed into the SVG element.
   */
  children: e.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: e.object,
  /**
   * @ignore
   */
  className: e.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
   * @default 'inherit'
   */
  color: e.oneOfType([e.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), e.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: e.elementType,
  /**
   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
   * @default 'medium'
   */
  fontSize: e.oneOfType([e.oneOf(["inherit", "large", "medium", "small"]), e.string]),
  /**
   * Applies a color attribute to the SVG element.
   */
  htmlColor: e.string,
  /**
   * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
   * prop will be ignored.
   * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
   * `component`'s viewBox to the root node.
   * @default false
   */
  inheritViewBox: e.bool,
  /**
   * The shape-rendering attribute. The behavior of the different options is described on the
   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
   * If you are having issues with blurry icons you should investigate this prop.
   */
  shapeRendering: e.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: e.oneOfType([e.arrayOf(e.oneOfType([e.func, e.object, e.bool])), e.func, e.object]),
  /**
   * Provides a human-readable title for the element that contains it.
   * https://www.w3.org/TR/SVG-access/#Equivalent
   */
  titleAccess: e.string,
  /**
   * Allows you to redefine what the coordinates without units mean inside an SVG element.
   * For example, if the SVG element is 500 (width) by 200 (height),
   * and you pass viewBox="0 0 50 20",
   * this means that the coordinates inside the SVG will go from the top left corner (0,0)
   * to bottom right (50,20) and each unit will be worth 10px.
   * @default '0 0 24 24'
   */
  viewBox: e.string
});
S && (S.muiName = "SvgIcon");
function U(o, r) {
  function t(s, n) {
    return /* @__PURE__ */ I(S, {
      "data-testid": `${r}Icon`,
      ref: n,
      ...s,
      children: o
    });
  }
  return process.env.NODE_ENV !== "production" && (t.displayName = `${r}Icon`), t.muiName = S.muiName, /* @__PURE__ */ z.memo(/* @__PURE__ */ z.forwardRef(t));
}
export {
  U as c
};
