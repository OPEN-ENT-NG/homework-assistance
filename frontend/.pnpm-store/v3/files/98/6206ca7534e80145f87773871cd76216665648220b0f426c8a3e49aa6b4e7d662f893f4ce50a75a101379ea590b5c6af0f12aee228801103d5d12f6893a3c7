import * as V from "react";
import { H as B, I as D, L as W, G as _, P as e } from "./identifier-B7MO0PvI.js";
import { u as x } from "./useSlot-BSVkAc2J.js";
import { jsx as c, jsxs as he } from "react/jsx-runtime";
import { s as k, u as A, c as G } from "./DefaultPropsProvider-BYFwNPLt.js";
import { F as ge } from "./FormLabel-B11aqT37.js";
import { u as Fe } from "./useId-CK6Kn3Tn.js";
import { a as Pe, S as ve, I as Oe, F as Ie, O as we } from "./Select-CKsf044t.js";
import { f as Ce } from "./formControlState-vgaj2ksH.js";
import { u as Se } from "./useFormControl-CatNKXAi.js";
import { m as He } from "./memoTheme-CqfvfBST.js";
import { r as Re } from "./refType-BqQbA6de.js";
function je(o) {
  return B("MuiFormHelperText", o);
}
const U = D("MuiFormHelperText", ["root", "error", "disabled", "sizeSmall", "sizeMedium", "contained", "focused", "filled", "required"]);
var $;
const Le = (o) => {
  const {
    classes: t,
    contained: r,
    size: s,
    disabled: p,
    error: d,
    filled: l,
    focused: h,
    required: f
  } = o, g = {
    root: ["root", p && "disabled", d && "error", s && `size${W(s)}`, r && "contained", h && "focused", l && "filled", f && "required"]
  };
  return G(g, je, t);
}, ze = k("p", {
  name: "MuiFormHelperText",
  slot: "Root",
  overridesResolver: (o, t) => {
    const {
      ownerState: r
    } = o;
    return [t.root, r.size && t[`size${W(r.size)}`], r.contained && t.contained, r.filled && t.filled];
  }
})(He(({
  theme: o
}) => ({
  color: (o.vars || o).palette.text.secondary,
  ...o.typography.caption,
  textAlign: "left",
  marginTop: 3,
  marginRight: 0,
  marginBottom: 0,
  marginLeft: 0,
  [`&.${U.disabled}`]: {
    color: (o.vars || o).palette.text.disabled
  },
  [`&.${U.error}`]: {
    color: (o.vars || o).palette.error.main
  },
  variants: [{
    props: {
      size: "small"
    },
    style: {
      marginTop: 4
    }
  }, {
    props: ({
      ownerState: t
    }) => t.contained,
    style: {
      marginLeft: 14,
      marginRight: 14
    }
  }]
}))), J = /* @__PURE__ */ V.forwardRef(function(t, r) {
  const s = A({
    props: t,
    name: "MuiFormHelperText"
  }), {
    children: p,
    className: d,
    component: l = "p",
    disabled: h,
    error: f,
    filled: g,
    focused: O,
    margin: I,
    required: j,
    variant: F,
    ...m
  } = s, w = Se(), n = Ce({
    props: s,
    muiFormControl: w,
    states: ["variant", "size", "disabled", "error", "filled", "focused", "required"]
  }), b = {
    ...s,
    component: l,
    contained: n.variant === "filled" || n.variant === "outlined",
    variant: n.variant,
    size: n.size,
    disabled: n.disabled,
    error: n.error,
    filled: n.filled,
    focused: n.focused,
    required: n.required
  };
  delete b.ownerState;
  const C = Le(b);
  return /* @__PURE__ */ c(ze, {
    as: l,
    className: _(C.root, d),
    ref: r,
    ...m,
    ownerState: b,
    children: p === " " ? (
      // notranslate needed while Google Translate will not fix zero-width space issue
      $ || ($ = /* @__PURE__ */ c("span", {
        className: "notranslate",
        children: "​"
      }))
    ) : p
  });
});
process.env.NODE_ENV !== "production" && (J.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   *
   * If `' '` is provided, the component reserves one line height for displaying a future message.
   */
  children: e.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: e.object,
  /**
   * @ignore
   */
  className: e.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: e.elementType,
  /**
   * If `true`, the helper text should be displayed in a disabled state.
   */
  disabled: e.bool,
  /**
   * If `true`, helper text should be displayed in an error state.
   */
  error: e.bool,
  /**
   * If `true`, the helper text should use filled classes key.
   */
  filled: e.bool,
  /**
   * If `true`, the helper text should use focused classes key.
   */
  focused: e.bool,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   */
  margin: e.oneOf(["dense"]),
  /**
   * If `true`, the helper text should use required classes key.
   */
  required: e.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: e.oneOfType([e.arrayOf(e.oneOfType([e.func, e.object, e.bool])), e.func, e.object]),
  /**
   * The variant to use.
   */
  variant: e.oneOfType([e.oneOf(["filled", "outlined", "standard"]), e.string])
});
function Ne(o) {
  return B("MuiTextField", o);
}
const Qe = D("MuiTextField", ["root"]), qe = {
  standard: Oe,
  filled: Ie,
  outlined: we
}, Me = (o) => {
  const {
    classes: t
  } = o;
  return G({
    root: ["root"]
  }, Ne, t);
}, Ee = k(ge, {
  name: "MuiTextField",
  slot: "Root",
  overridesResolver: (o, t) => t.root
})({}), Ue = /* @__PURE__ */ V.forwardRef(function(t, r) {
  const s = A({
    props: t,
    name: "MuiTextField"
  }), {
    autoComplete: p,
    autoFocus: d = !1,
    children: l,
    className: h,
    color: f = "primary",
    defaultValue: g,
    disabled: O = !1,
    error: I = !1,
    FormHelperTextProps: j,
    fullWidth: F = !1,
    helperText: m,
    id: w,
    InputLabelProps: n,
    inputProps: b,
    InputProps: C,
    inputRef: K,
    label: T,
    maxRows: Q,
    minRows: X,
    multiline: L = !1,
    name: Y,
    onBlur: Z,
    onChange: ee,
    onFocus: oe,
    placeholder: te,
    required: z = !1,
    rows: re,
    select: P = !1,
    SelectProps: S,
    slots: N = {},
    slotProps: ne = {},
    type: se,
    value: q,
    variant: v = "outlined",
    ...le
  } = s, i = {
    ...s,
    autoFocus: d,
    color: f,
    disabled: O,
    error: I,
    fullWidth: F,
    multiline: L,
    required: z,
    select: P,
    variant: v
  }, ie = Me(i);
  process.env.NODE_ENV !== "production" && P && !l && console.error("MUI: `children` must be passed when using the `TextField` component with `select`.");
  const a = Fe(w), H = m && a ? `${a}-helper-text` : void 0, M = T && a ? `${a}-label` : void 0, ae = qe[v], u = {
    slots: N,
    slotProps: {
      input: C,
      inputLabel: n,
      htmlInput: b,
      formHelperText: j,
      select: S,
      ...ne
    }
  }, y = {}, R = u.slotProps.inputLabel;
  v === "outlined" && (R && typeof R.shrink < "u" && (y.notched = R.shrink), y.label = T), P && ((!S || !S.native) && (y.id = void 0), y["aria-describedby"] = void 0);
  const [pe, de] = x("input", {
    elementType: ae,
    externalForwardedProps: u,
    additionalProps: y,
    ownerState: i
  }), [ue, ce] = x("inputLabel", {
    elementType: Pe,
    externalForwardedProps: u,
    ownerState: i
  }), [fe, me] = x("htmlInput", {
    elementType: "input",
    externalForwardedProps: u,
    ownerState: i
  }), [be, Te] = x("formHelperText", {
    elementType: J,
    externalForwardedProps: u,
    ownerState: i
  }), [ye, xe] = x("select", {
    elementType: ve,
    externalForwardedProps: u,
    ownerState: i
  }), E = /* @__PURE__ */ c(pe, {
    "aria-describedby": H,
    autoComplete: p,
    autoFocus: d,
    defaultValue: g,
    fullWidth: F,
    multiline: L,
    name: Y,
    rows: re,
    maxRows: Q,
    minRows: X,
    type: se,
    value: q,
    id: a,
    inputRef: K,
    onBlur: Z,
    onChange: ee,
    onFocus: oe,
    placeholder: te,
    inputProps: me,
    slots: {
      input: N.htmlInput ? fe : void 0
    },
    ...de
  });
  return /* @__PURE__ */ he(Ee, {
    className: _(ie.root, h),
    disabled: O,
    error: I,
    fullWidth: F,
    ref: r,
    required: z,
    color: f,
    variant: v,
    ownerState: i,
    ...le,
    children: [T != null && T !== "" && /* @__PURE__ */ c(ue, {
      htmlFor: a,
      id: M,
      ...ce,
      children: T
    }), P ? /* @__PURE__ */ c(ye, {
      "aria-describedby": H,
      id: a,
      labelId: M,
      value: q,
      input: E,
      ...xe,
      children: l
    }) : E, m && /* @__PURE__ */ c(be, {
      id: H,
      ...Te,
      children: m
    })]
  });
});
process.env.NODE_ENV !== "production" && (Ue.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: e.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   * @default false
   */
  autoFocus: e.bool,
  /**
   * @ignore
   */
  children: e.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: e.object,
  /**
   * @ignore
   */
  className: e.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: e.oneOfType([e.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), e.string]),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: e.any,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: e.bool,
  /**
   * If `true`, the label is displayed in an error state.
   * @default false
   */
  error: e.bool,
  /**
   * Props applied to the [`FormHelperText`](https://mui.com/material-ui/api/form-helper-text/) element.
   * @deprecated Use `slotProps.formHelperText` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  FormHelperTextProps: e.object,
  /**
   * If `true`, the input will take up the full width of its container.
   * @default false
   */
  fullWidth: e.bool,
  /**
   * The helper text content.
   */
  helperText: e.node,
  /**
   * The id of the `input` element.
   * Use this prop to make `label` and `helperText` accessible for screen readers.
   */
  id: e.string,
  /**
   * Props applied to the [`InputLabel`](https://mui.com/material-ui/api/input-label/) element.
   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
   * @deprecated Use `slotProps.inputLabel` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  InputLabelProps: e.object,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * @deprecated Use `slotProps.htmlInput` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  inputProps: e.object,
  /**
   * Props applied to the Input element.
   * It will be a [`FilledInput`](https://mui.com/material-ui/api/filled-input/),
   * [`OutlinedInput`](https://mui.com/material-ui/api/outlined-input/) or [`Input`](https://mui.com/material-ui/api/input/)
   * component depending on the `variant` prop value.
   * @deprecated Use `slotProps.input` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  InputProps: e.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: Re,
  /**
   * The label content.
   */
  label: e.node,
  /**
   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
   * @default 'none'
   */
  margin: e.oneOf(["dense", "none", "normal"]),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: e.oneOfType([e.number, e.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: e.oneOfType([e.number, e.string]),
  /**
   * If `true`, a `textarea` element is rendered instead of an input.
   * @default false
   */
  multiline: e.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: e.string,
  /**
   * @ignore
   */
  onBlur: e.func,
  /**
   * Callback fired when the value is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: e.func,
  /**
   * @ignore
   */
  onFocus: e.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: e.string,
  /**
   * If `true`, the label is displayed as required and the `input` element is required.
   * @default false
   */
  required: e.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: e.oneOfType([e.number, e.string]),
  /**
   * Render a [`Select`](https://mui.com/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.
   * If this option is set you must pass the options of the select as children.
   * @default false
   */
  select: e.bool,
  /**
   * Props applied to the [`Select`](https://mui.com/material-ui/api/select/) element.
   * @deprecated Use `slotProps.select` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  SelectProps: e.object,
  /**
   * The size of the component.
   */
  size: e.oneOfType([e.oneOf(["medium", "small"]), e.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: e.shape({
    formHelperText: e.oneOfType([e.func, e.object]),
    htmlInput: e.oneOfType([e.func, e.object]),
    input: e.oneOfType([e.func, e.object]),
    inputLabel: e.oneOfType([e.func, e.object]),
    select: e.oneOfType([e.func, e.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: e.shape({
    formHelperText: e.elementType,
    htmlInput: e.elementType,
    input: e.elementType,
    inputLabel: e.elementType,
    select: e.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: e.oneOfType([e.arrayOf(e.oneOfType([e.func, e.object, e.bool])), e.func, e.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   */
  type: e.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: e.any,
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: e.oneOf(["filled", "outlined", "standard"])
});
export {
  J as F,
  Ue as T,
  Ne as a,
  U as f,
  je as g,
  Qe as t
};
