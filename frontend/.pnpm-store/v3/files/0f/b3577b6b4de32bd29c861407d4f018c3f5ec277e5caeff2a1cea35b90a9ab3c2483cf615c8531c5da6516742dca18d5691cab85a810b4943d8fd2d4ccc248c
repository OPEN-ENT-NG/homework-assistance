import { jsxs as E, jsx as s } from "react/jsx-runtime";
import { s as g, a as M, u as S, c as R } from "../../DefaultPropsProvider-BYFwNPLt.js";
import * as P from "react";
import { I as T, H as j, L as c, P as n } from "../../identifier-B7MO0PvI.js";
import { B as z, a as O } from "../../Button-Cx05eP88.js";
import { m as h } from "../../memoTheme-CqfvfBST.js";
import { u as k } from "../../useId-CK6Kn3Tn.js";
import { c as U } from "../../chainPropTypes-D9lkm76m.js";
import { C as W } from "../../CircularProgress-B5osG37N.js";
function N(t) {
  return j("MuiLoadingButton", t);
}
const a = T("MuiLoadingButton", ["root", "label", "loading", "loadingIndicator", "loadingIndicatorCenter", "loadingIndicatorStart", "loadingIndicatorEnd", "endIconLoadingEnd", "startIconLoadingStart"]), D = (t) => {
  const {
    loading: o,
    loadingPosition: i,
    classes: e
  } = t, u = {
    root: ["root", o && "loading"],
    label: ["label"],
    startIcon: [o && `startIconLoading${c(i)}`],
    endIcon: [o && `endIconLoading${c(i)}`],
    loadingIndicator: ["loadingIndicator", o && `loadingIndicator${c(i)}`]
  }, d = R(u, N, e);
  return {
    ...e,
    // forward the outlined, color, etc. classes to Button
    ...d
  };
}, F = (t) => t !== "ownerState" && t !== "theme" && t !== "sx" && t !== "as" && t !== "classes", H = g(z, {
  shouldForwardProp: (t) => F(t) || t === "classes",
  name: "MuiLoadingButton",
  slot: "Root",
  overridesResolver: (t, o) => [o.root, o.startIconLoadingStart && {
    [`& .${a.startIconLoadingStart}`]: o.startIconLoadingStart
  }, o.endIconLoadingEnd && {
    [`& .${a.endIconLoadingEnd}`]: o.endIconLoadingEnd
  }]
})(h(({
  theme: t
}) => ({
  display: "inline-flex",
  [`& .${a.startIconLoadingStart}, & .${a.endIconLoadingEnd}`]: {
    transition: t.transitions.create(["opacity"], {
      duration: t.transitions.duration.short
    }),
    opacity: 0
  },
  variants: [{
    props: {
      loadingPosition: "center"
    },
    style: {
      transition: t.transitions.create(["background-color", "box-shadow", "border-color"], {
        duration: t.transitions.duration.short
      }),
      [`&.${a.loading}`]: {
        color: "transparent"
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.loadingPosition === "start" && o.fullWidth,
    style: {
      [`& .${a.startIconLoadingStart}, & .${a.endIconLoadingEnd}`]: {
        transition: t.transitions.create(["opacity"], {
          duration: t.transitions.duration.short
        }),
        opacity: 0,
        marginRight: -8
      }
    }
  }, {
    props: ({
      ownerState: o
    }) => o.loadingPosition === "end" && o.fullWidth,
    style: {
      [`& .${a.startIconLoadingStart}, & .${a.endIconLoadingEnd}`]: {
        transition: t.transitions.create(["opacity"], {
          duration: t.transitions.duration.short
        }),
        opacity: 0,
        marginLeft: -8
      }
    }
  }]
}))), G = g("span", {
  name: "MuiLoadingButton",
  slot: "LoadingIndicator",
  overridesResolver: (t, o) => {
    const {
      ownerState: i
    } = t;
    return [o.loadingIndicator, o[`loadingIndicator${c(i.loadingPosition)}`]];
  }
})(h(({
  theme: t
}) => ({
  position: "absolute",
  visibility: "visible",
  display: "flex",
  variants: [{
    props: {
      loadingPosition: "start",
      size: "small"
    },
    style: {
      left: 10
    }
  }, {
    props: ({
      loadingPosition: o,
      ownerState: i
    }) => o === "start" && i.size !== "small",
    style: {
      left: 14
    }
  }, {
    props: {
      variant: "text",
      loadingPosition: "start"
    },
    style: {
      left: 6
    }
  }, {
    props: {
      loadingPosition: "center"
    },
    style: {
      left: "50%",
      transform: "translate(-50%)",
      color: (t.vars || t).palette.action.disabled
    }
  }, {
    props: {
      loadingPosition: "end",
      size: "small"
    },
    style: {
      right: 10
    }
  }, {
    props: ({
      loadingPosition: o,
      ownerState: i
    }) => o === "end" && i.size !== "small",
    style: {
      right: 14
    }
  }, {
    props: {
      variant: "text",
      loadingPosition: "end"
    },
    style: {
      right: 6
    }
  }, {
    props: ({
      ownerState: o
    }) => o.loadingPosition === "start" && o.fullWidth,
    style: {
      position: "relative",
      left: -10
    }
  }, {
    props: ({
      ownerState: o
    }) => o.loadingPosition === "end" && o.fullWidth,
    style: {
      position: "relative",
      right: -10
    }
  }]
}))), v = g("span", {
  name: "MuiLoadingButton",
  slot: "Label",
  overridesResolver: (t, o) => [o.label]
})({
  display: "inherit",
  alignItems: "inherit",
  justifyContent: "inherit"
}), B = /* @__PURE__ */ P.forwardRef(function(o, i) {
  const e = P.useContext(O), u = M(e, o), d = S({
    props: u,
    name: "MuiLoadingButton"
  }), {
    children: m,
    disabled: I = !1,
    id: C,
    loading: p = !1,
    loadingIndicator: x,
    loadingPosition: $ = "center",
    variant: b = "text",
    ...w
  } = d, f = k(C), y = x ?? /* @__PURE__ */ s(W, {
    "aria-labelledby": f,
    color: "inherit",
    size: 16
  }), r = {
    ...d,
    disabled: I,
    loading: p,
    loadingIndicator: y,
    loadingPosition: $,
    variant: b
  }, l = D(r), L = p ? /* @__PURE__ */ s(G, {
    className: l.loadingIndicator,
    ownerState: r,
    children: y
  }) : null;
  return /* @__PURE__ */ E(H, {
    disabled: I || p,
    id: f,
    ref: i,
    ...w,
    variant: b,
    classes: l,
    ownerState: r,
    children: [r.loadingPosition === "end" ? /* @__PURE__ */ s(v, {
      className: l.label,
      children: m
    }) : L, r.loadingPosition === "end" ? L : /* @__PURE__ */ s(v, {
      className: l.label,
      children: m
    })]
  });
});
process.env.NODE_ENV !== "production" && (B.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: n.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: n.object,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: n.bool,
  /**
   * @ignore
   */
  id: n.string,
  /**
   * If `true`, the loading indicator is shown and the button becomes disabled.
   * @default false
   */
  loading: n.bool,
  /**
   * Element placed before the children if the button is in loading state.
   * The node should contain an element with `role="progressbar"` with an accessible name.
   * By default we render a `CircularProgress` that is labelled by the button itself.
   * @default <CircularProgress color="inherit" size={16} />
   */
  loadingIndicator: n.node,
  /**
   * The loading indicator can be positioned on the start, end, or the center of the button.
   * @default 'center'
   */
  loadingPosition: U(n.oneOf(["start", "end", "center"]), (t) => t.loadingPosition === "start" && !t.startIcon ? new Error('MUI: The loadingPosition="start" should be used in combination with startIcon.') : t.loadingPosition === "end" && !t.endIcon ? new Error('MUI: The loadingPosition="end" should be used in combination with endIcon.') : null),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: n.oneOfType([n.arrayOf(n.oneOfType([n.func, n.object, n.bool])), n.func, n.object]),
  /**
   * The variant to use.
   * @default 'text'
   */
  variant: n.oneOfType([n.oneOf(["contained", "outlined", "text"]), n.string])
});
const V = g(B)(({ color: t, theme: o }) => ({
  justifyContent: "center",
  alignItems: "center",
  minHeight: 38,
  textTransform: "none",
  color: t,
  borderColor: t,
  borderRadius: 5,
  borderWidth: 2,
  transition: "all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms",
  "&.MuiButton-contained": {
    color: o.palette.common.white
  },
  "&.MuiButton-outlined": {
    borderRadius: 5,
    borderWidth: 2,
    "&.MuiButton-colorPrimary": {
      "&:active": {
        borderColor: o.palette.primary.main,
        color: o.palette.primary.main
      },
      "&:hover": {
        backgroundColor: o.palette.primary.dark,
        borderColor: o.palette.primary.dark,
        color: o.palette.common.white
      }
    },
    "&.MuiButton-colorSecondary": {
      "&:active": {
        borderColor: o.palette.secondary.main,
        color: o.palette.secondary.main
      },
      "&:hover": {
        backgroundColor: o.palette.secondary.main,
        color: o.palette.common.white
      }
    },
    "&.MuiButton-colorError": {
      "&:active": {
        borderColor: o.palette.error.main,
        color: o.palette.error.main
      },
      "&:hover": {
        backgroundColor: o.palette.error.main,
        color: o.palette.common.white
      }
    }
  }
})), Z = ({
  variant: t = "outlined",
  ...o
}) => /* @__PURE__ */ s(V, { variant: t, ...o });
export {
  Z as default
};
