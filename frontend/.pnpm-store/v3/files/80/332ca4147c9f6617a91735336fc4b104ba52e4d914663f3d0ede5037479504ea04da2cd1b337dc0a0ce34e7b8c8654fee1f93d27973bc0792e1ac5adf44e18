import * as t from "react";
function d({
  controlled: o,
  default: s,
  name: n,
  state: r = "value"
}) {
  const {
    current: e
  } = t.useRef(o !== void 0), [c, l] = t.useState(s), u = e ? o : c;
  if (process.env.NODE_ENV !== "production") {
    t.useEffect(() => {
      e !== (o !== void 0) && console.error([`MUI: A component is changing the ${e ? "" : "un"}controlled ${r} state of ${n} to be ${e ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${n} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join(`
`));
    }, [r, n, o]);
    const {
      current: i
    } = t.useRef(s);
    t.useEffect(() => {
      !e && !Object.is(i, s) && console.error([`MUI: A component is changing the default ${r} state of an uncontrolled ${n} after being initialized. To suppress this warning opt to use a controlled ${n}.`].join(`
`));
    }, [JSON.stringify(s)]);
  }
  const f = t.useCallback((i) => {
    e || l(i);
  }, []);
  return [u, f];
}
export {
  d as u
};
