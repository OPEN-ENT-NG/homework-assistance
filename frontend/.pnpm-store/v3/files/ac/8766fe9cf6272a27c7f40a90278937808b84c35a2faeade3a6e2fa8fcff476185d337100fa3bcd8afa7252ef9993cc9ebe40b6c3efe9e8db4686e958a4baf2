import { P as e, M as V, S as g, U as f, V as C, W as D, X as R, G as N, H as E, Y as b } from "./identifier-B7MO0PvI.js";
import { b as F, c as M, s as B, u as G } from "./DefaultPropsProvider-BYFwNPLt.js";
import * as m from "react";
import { jsx as w } from "react/jsx-runtime";
import { e as U } from "./extendSxProp-BpXLpaGL.js";
import { u as $ } from "./useThemeProps-BFeVem33.js";
const A = F(), _ = V(), H = A("div", {
  name: "MuiStack",
  slot: "Root",
  overridesResolver: (o, r) => r.root
});
function I(o) {
  return $({
    props: o,
    name: "MuiStack",
    defaultTheme: _
  });
}
function L(o, r) {
  const c = m.Children.toArray(o).filter(Boolean);
  return c.reduce((a, i, n) => (a.push(i), n < c.length - 1 && a.push(/* @__PURE__ */ m.cloneElement(r, {
    key: `separator-${n}`
  })), a), []);
}
const W = (o) => ({
  row: "Left",
  "row-reverse": "Right",
  column: "Top",
  "column-reverse": "Bottom"
})[o], X = ({
  ownerState: o,
  theme: r
}) => {
  let c = {
    display: "flex",
    flexDirection: "column",
    ...g({
      theme: r
    }, f({
      values: o.direction,
      breakpoints: r.breakpoints.values
    }), (a) => ({
      flexDirection: a
    }))
  };
  if (o.spacing) {
    const a = C(r), i = Object.keys(r.breakpoints.values).reduce((s, t) => ((typeof o.spacing == "object" && o.spacing[t] != null || typeof o.direction == "object" && o.direction[t] != null) && (s[t] = !0), s), {}), n = f({
      values: o.direction,
      base: i
    }), l = f({
      values: o.spacing,
      base: i
    });
    typeof n == "object" && Object.keys(n).forEach((s, t, p) => {
      if (!n[s]) {
        const u = t > 0 ? n[p[t - 1]] : "column";
        n[s] = u;
      }
    }), c = D(c, g({
      theme: r
    }, l, (s, t) => o.useFlexGap ? {
      gap: b(a, s)
    } : {
      // The useFlexGap={false} implement relies on each child to give up control of the margin.
      // We need to reset the margin to avoid double spacing.
      "& > :not(style):not(style)": {
        margin: 0
      },
      "& > :not(style) ~ :not(style)": {
        [`margin${W(t ? n[t] : o.direction)}`]: b(a, s)
      }
    }));
  }
  return c = R(r.breakpoints, c), c;
};
function Y(o = {}) {
  const {
    // This will allow adding custom styled fn (for example for custom sx style function)
    createStyledComponent: r = H,
    useThemeProps: c = I,
    componentName: a = "MuiStack"
  } = o, i = () => M({
    root: ["root"]
  }, (s) => E(a, s), {}), n = r(X), l = /* @__PURE__ */ m.forwardRef(function(s, t) {
    const p = c(s), y = U(p), {
      component: u = "div",
      direction: T = "column",
      spacing: h = 0,
      divider: v,
      children: O,
      className: j,
      useFlexGap: k = !1,
      ...x
    } = y, P = {
      direction: T,
      spacing: h,
      useFlexGap: k
    }, S = i();
    return /* @__PURE__ */ w(n, {
      as: u,
      ownerState: P,
      ref: t,
      className: N(S.root, j),
      ...x,
      children: v ? L(O, v) : O
    });
  });
  return process.env.NODE_ENV !== "production" && (l.propTypes = {
    children: e.node,
    direction: e.oneOfType([e.oneOf(["column-reverse", "column", "row-reverse", "row"]), e.arrayOf(e.oneOf(["column-reverse", "column", "row-reverse", "row"])), e.object]),
    divider: e.node,
    spacing: e.oneOfType([e.arrayOf(e.oneOfType([e.number, e.string])), e.number, e.object, e.string]),
    sx: e.oneOfType([e.arrayOf(e.oneOfType([e.func, e.object, e.bool])), e.func, e.object])
  }), l;
}
const q = Y({
  createStyledComponent: B("div", {
    name: "MuiStack",
    slot: "Root",
    overridesResolver: (o, r) => r.root
  }),
  useThemeProps: (o) => G({
    props: o,
    name: "MuiStack"
  })
});
process.env.NODE_ENV !== "production" && (q.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: e.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: e.elementType,
  /**
   * Defines the `flex-direction` style property.
   * It is applied for all screen sizes.
   * @default 'column'
   */
  direction: e.oneOfType([e.oneOf(["column-reverse", "column", "row-reverse", "row"]), e.arrayOf(e.oneOf(["column-reverse", "column", "row-reverse", "row"])), e.object]),
  /**
   * Add an element between each child.
   */
  divider: e.node,
  /**
   * Defines the space between immediate children.
   * @default 0
   */
  spacing: e.oneOfType([e.arrayOf(e.oneOfType([e.number, e.string])), e.number, e.object, e.string]),
  /**
   * The system prop, which allows defining system overrides as well as additional CSS styles.
   */
  sx: e.oneOfType([e.arrayOf(e.oneOfType([e.func, e.object, e.bool])), e.func, e.object]),
  /**
   * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.
   *
   * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),
   * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.
   *
   * To enable this flag globally, follow the [theme's default props](https://mui.com/material-ui/customization/theme-components/#default-props) configuration.
   * @default false
   */
  useFlexGap: e.bool
});
export {
  q as S
};
