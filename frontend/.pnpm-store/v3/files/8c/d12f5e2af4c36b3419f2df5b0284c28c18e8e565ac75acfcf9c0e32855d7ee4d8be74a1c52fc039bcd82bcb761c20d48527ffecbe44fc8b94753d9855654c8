import * as s from "react";
import { s as V, u as ee, c as oe, e as ye, r as Le } from "./DefaultPropsProvider-BYFwNPLt.js";
import { H as te, I as ne, G as Y, P as e } from "./identifier-B7MO0PvI.js";
import { u as je, a as fe } from "./index-yb8koCDz.js";
import { jsx as z, jsxs as ke } from "react/jsx-runtime";
import { i as Fe } from "./isHostComponent-kiaBvYVo.js";
import { u as de } from "./useSlot-BSVkAc2J.js";
import { g as ze, M as Ke } from "./Modal-DT240BJZ.js";
import { P as He, i as Ue } from "./Paper-vlsh8Nca.js";
import { o as J } from "./ownerDocument-CUrv0DIK.js";
import { o as Q } from "./ownerWindow-niciwP7I.js";
import { d as Ve } from "./debounce-46wSf_lW.js";
import { u as ve } from "./useForkRef-C_4o__cU.js";
import { u as _e, r as Ae } from "./refType-BqQbA6de.js";
import { c as We } from "./chainPropTypes-D9lkm76m.js";
import { H as Z } from "./Portal-meM40OhI.js";
import { e as $e } from "./elementTypeAcceptingRef-DOFWAguJ.js";
import { G as qe } from "./Grow-BKrOFfC1.js";
const Pe = /* @__PURE__ */ s.createContext({});
process.env.NODE_ENV !== "production" && (Pe.displayName = "ListContext");
function Be(t) {
  return te("MuiList", t);
}
const Ro = ne("MuiList", ["root", "padding", "dense", "subheader"]), Ge = (t) => {
  const {
    classes: o,
    disablePadding: n,
    dense: y,
    subheader: g
  } = t;
  return oe({
    root: ["root", !n && "padding", y && "dense", g && "subheader"]
  }, Be, o);
}, Ye = V("ul", {
  name: "MuiList",
  slot: "Root",
  overridesResolver: (t, o) => {
    const {
      ownerState: n
    } = t;
    return [o.root, !n.disablePadding && o.padding, n.dense && o.dense, n.subheader && o.subheader];
  }
})({
  listStyle: "none",
  margin: 0,
  padding: 0,
  position: "relative",
  variants: [{
    props: ({
      ownerState: t
    }) => !t.disablePadding,
    style: {
      paddingTop: 8,
      paddingBottom: 8
    }
  }, {
    props: ({
      ownerState: t
    }) => t.subheader,
    style: {
      paddingTop: 0
    }
  }]
}), Te = /* @__PURE__ */ s.forwardRef(function(o, n) {
  const y = ee({
    props: o,
    name: "MuiList"
  }), {
    children: g,
    className: h,
    component: b = "ul",
    dense: a = !1,
    disablePadding: m = !1,
    subheader: E,
    ...O
  } = y, S = s.useMemo(() => ({
    dense: a
  }), [a]), D = {
    ...y,
    component: b,
    dense: a,
    disablePadding: m
  }, i = Ge(D);
  return /* @__PURE__ */ z(Pe.Provider, {
    value: S,
    children: /* @__PURE__ */ ke(Ye, {
      as: b,
      className: Y(i.root, h),
      ref: n,
      ownerState: D,
      ...O,
      children: [E, g]
    })
  });
});
process.env.NODE_ENV !== "production" && (Te.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: e.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: e.object,
  /**
   * @ignore
   */
  className: e.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: e.elementType,
  /**
   * If `true`, compact vertical padding designed for keyboard and mouse input is used for
   * the list and list items.
   * The prop is available to descendant components as the `dense` context.
   * @default false
   */
  dense: e.bool,
  /**
   * If `true`, vertical padding is removed from the list.
   * @default false
   */
  disablePadding: e.bool,
  /**
   * The content of the subheader, normally `ListSubheader`.
   */
  subheader: e.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: e.oneOfType([e.arrayOf(e.oneOfType([e.func, e.object, e.bool])), e.func, e.object])
});
function X(t, o, n) {
  return t === o ? t.firstChild : o && o.nextElementSibling ? o.nextElementSibling : n ? null : t.firstChild;
}
function he(t, o, n) {
  return t === o ? n ? t.firstChild : t.lastChild : o && o.previousElementSibling ? o.previousElementSibling : n ? null : t.lastChild;
}
function Ee(t, o) {
  if (o === void 0)
    return !0;
  let n = t.innerText;
  return n === void 0 && (n = t.textContent), n = n.trim().toLowerCase(), n.length === 0 ? !1 : o.repeating ? n[0] === o.keys[0] : n.startsWith(o.keys.join(""));
}
function W(t, o, n, y, g, h) {
  let b = !1, a = g(t, o, o ? n : !1);
  for (; a; ) {
    if (a === t.firstChild) {
      if (b)
        return !1;
      b = !0;
    }
    const m = y ? !1 : a.disabled || a.getAttribute("aria-disabled") === "true";
    if (!a.hasAttribute("tabindex") || !Ee(a, h) || m)
      a = g(t, a, n);
    else
      return a.focus(), !0;
  }
  return !1;
}
const Me = /* @__PURE__ */ s.forwardRef(function(o, n) {
  const {
    // private
    // eslint-disable-next-line react/prop-types
    actions: y,
    autoFocus: g = !1,
    autoFocusItem: h = !1,
    children: b,
    className: a,
    disabledItemsFocusable: m = !1,
    disableListWrap: E = !1,
    onKeyDown: O,
    variant: S = "selectedMenu",
    ...D
  } = o, i = s.useRef(null), v = s.useRef({
    keys: [],
    repeating: !0,
    previousKeyMatched: !0,
    lastTime: null
  });
  _e(() => {
    g && i.current.focus();
  }, [g]), s.useImperativeHandle(y, () => ({
    adjustStyleForScrollbar: (r, {
      direction: l
    }) => {
      const f = !i.current.style.width;
      if (r.clientHeight < i.current.clientHeight && f) {
        const N = `${ze(Q(r))}px`;
        i.current.style[l === "rtl" ? "paddingLeft" : "paddingRight"] = N, i.current.style.width = `calc(100% + ${N})`;
      }
      return i.current;
    }
  }), []);
  const K = (r) => {
    const l = i.current, f = r.key;
    if (r.ctrlKey || r.metaKey || r.altKey) {
      O && O(r);
      return;
    }
    const R = J(l).activeElement;
    if (f === "ArrowDown")
      r.preventDefault(), W(l, R, E, m, X);
    else if (f === "ArrowUp")
      r.preventDefault(), W(l, R, E, m, he);
    else if (f === "Home")
      r.preventDefault(), W(l, null, E, m, X);
    else if (f === "End")
      r.preventDefault(), W(l, null, E, m, he);
    else if (f.length === 1) {
      const p = v.current, M = f.toLowerCase(), L = performance.now();
      p.keys.length > 0 && (L - p.lastTime > 500 ? (p.keys = [], p.repeating = !0, p.previousKeyMatched = !0) : p.repeating && M !== p.keys[0] && (p.repeating = !1)), p.lastTime = L, p.keys.push(M);
      const x = R && !p.repeating && Ee(R, p);
      p.previousKeyMatched && (x || W(l, R, !1, m, X, p)) ? r.preventDefault() : p.previousKeyMatched = !1;
    }
    O && O(r);
  }, j = ve(i, n);
  let c = -1;
  s.Children.forEach(b, (r, l) => {
    if (!/* @__PURE__ */ s.isValidElement(r)) {
      c === l && (c += 1, c >= b.length && (c = -1));
      return;
    }
    process.env.NODE_ENV !== "production" && ye.isFragment(r) && console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`)), r.props.disabled || (S === "selectedMenu" && r.props.selected || c === -1) && (c = l), c === l && (r.props.disabled || r.props.muiSkipListHighlight || r.type.muiSkipListHighlight) && (c += 1, c >= b.length && (c = -1));
  });
  const C = s.Children.map(b, (r, l) => {
    if (l === c) {
      const f = {};
      return h && (f.autoFocus = !0), r.props.tabIndex === void 0 && S === "selectedMenu" && (f.tabIndex = 0), /* @__PURE__ */ s.cloneElement(r, f);
    }
    return r;
  });
  return /* @__PURE__ */ z(Te, {
    role: "menu",
    ref: j,
    className: a,
    onKeyDown: K,
    tabIndex: g ? 0 : -1,
    ...D,
    children: C
  });
});
process.env.NODE_ENV !== "production" && (Me.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, will focus the `[role="menu"]` container and move into tab order.
   * @default false
   */
  autoFocus: e.bool,
  /**
   * If `true`, will focus the first menuitem if `variant="menu"` or selected item
   * if `variant="selectedMenu"`.
   * @default false
   */
  autoFocusItem: e.bool,
  /**
   * MenuList contents, normally `MenuItem`s.
   */
  children: e.node,
  /**
   * @ignore
   */
  className: e.string,
  /**
   * If `true`, will allow focus on disabled items.
   * @default false
   */
  disabledItemsFocusable: e.bool,
  /**
   * If `true`, the menu items will not wrap focus.
   * @default false
   */
  disableListWrap: e.bool,
  /**
   * @ignore
   */
  onKeyDown: e.func,
  /**
   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
   * and the vertical alignment relative to the anchor element.
   * @default 'selectedMenu'
   */
  variant: e.oneOf(["menu", "selectedMenu"])
});
function Xe(t) {
  return te("MuiPopover", t);
}
ne("MuiPopover", ["root", "paper"]);
function me(t, o) {
  let n = 0;
  return typeof o == "number" ? n = o : o === "center" ? n = t.height / 2 : o === "bottom" && (n = t.height), n;
}
function be(t, o) {
  let n = 0;
  return typeof o == "number" ? n = o : o === "center" ? n = t.width / 2 : o === "right" && (n = t.width), n;
}
function ge(t) {
  return [t.horizontal, t.vertical].map((o) => typeof o == "number" ? `${o}px` : o).join(" ");
}
function G(t) {
  return typeof t == "function" ? t() : t;
}
const Je = (t) => {
  const {
    classes: o
  } = t;
  return oe({
    root: ["root"],
    paper: ["paper"]
  }, Xe, o);
}, Qe = V(Ke, {
  name: "MuiPopover",
  slot: "Root",
  overridesResolver: (t, o) => o.root
})({}), Oe = V(He, {
  name: "MuiPopover",
  slot: "Paper",
  overridesResolver: (t, o) => o.paper
})({
  position: "absolute",
  overflowY: "auto",
  overflowX: "hidden",
  // So we see the popover when it's empty.
  // It's most likely on issue on userland.
  minWidth: 16,
  minHeight: 16,
  maxWidth: "calc(100% - 32px)",
  maxHeight: "calc(100% - 32px)",
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0
}), Re = /* @__PURE__ */ s.forwardRef(function(o, n) {
  const y = ee({
    props: o,
    name: "MuiPopover"
  }), {
    action: g,
    anchorEl: h,
    anchorOrigin: b = {
      vertical: "top",
      horizontal: "left"
    },
    anchorPosition: a,
    anchorReference: m = "anchorEl",
    children: E,
    className: O,
    container: S,
    elevation: D = 8,
    marginThreshold: i = 16,
    open: v,
    PaperProps: K = {},
    slots: j = {},
    slotProps: c = {},
    transformOrigin: C = {
      vertical: "top",
      horizontal: "left"
    },
    TransitionComponent: r = qe,
    transitionDuration: l = "auto",
    TransitionProps: {
      onEntering: f,
      ...N
    } = {},
    disableScrollLock: R = !1,
    ...p
  } = y, M = (c == null ? void 0 : c.paper) ?? K, L = s.useRef(), x = {
    ...y,
    anchorOrigin: b,
    anchorReference: m,
    elevation: D,
    marginThreshold: i,
    externalPaperSlotProps: M,
    transformOrigin: C,
    TransitionComponent: r,
    transitionDuration: l,
    TransitionProps: N
  }, _ = Je(x), $ = s.useCallback(() => {
    if (m === "anchorPosition")
      return process.env.NODE_ENV !== "production" && (a || console.error('MUI: You need to provide a `anchorPosition` prop when using <Popover anchorReference="anchorPosition" />.')), a;
    const u = G(h), d = u && u.nodeType === 1 ? u : J(L.current).body, T = d.getBoundingClientRect();
    if (process.env.NODE_ENV !== "production") {
      const F = d.getBoundingClientRect();
      process.env.NODE_ENV !== "test" && F.top === 0 && F.left === 0 && F.right === 0 && F.bottom === 0 && console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
    }
    return {
      top: T.top + me(T, b.vertical),
      left: T.left + be(T, b.horizontal)
    };
  }, [h, b.horizontal, b.vertical, a, m]), q = s.useCallback((u) => ({
    vertical: me(u, C.vertical),
    horizontal: be(u, C.horizontal)
  }), [C.horizontal, C.vertical]), B = s.useCallback((u) => {
    const d = {
      width: u.offsetWidth,
      height: u.offsetHeight
    }, T = q(d);
    if (m === "none")
      return {
        top: null,
        left: null,
        transformOrigin: ge(T)
      };
    const F = $();
    let H = F.top - T.vertical, U = F.left - T.horizontal;
    const le = H + d.height, ce = U + d.width, pe = Q(G(h)), A = pe.innerHeight - i, ue = pe.innerWidth - i;
    if (i !== null && H < i) {
      const w = H - i;
      H -= w, T.vertical += w;
    } else if (i !== null && le > A) {
      const w = le - A;
      H -= w, T.vertical += w;
    }
    if (process.env.NODE_ENV !== "production" && d.height > A && d.height && A && console.error(["MUI: The popover component is too tall.", `Some part of it can not be seen on the screen (${d.height - A}px).`, "Please consider adding a `max-height` to improve the user-experience."].join(`
`)), i !== null && U < i) {
      const w = U - i;
      U -= w, T.horizontal += w;
    } else if (ce > ue) {
      const w = ce - ue;
      U -= w, T.horizontal += w;
    }
    return {
      top: `${Math.round(H)}px`,
      left: `${Math.round(U)}px`,
      transformOrigin: ge(T)
    };
  }, [h, m, $, q, i]), [P, k] = s.useState(v), I = s.useCallback(() => {
    const u = L.current;
    if (!u)
      return;
    const d = B(u);
    d.top !== null && u.style.setProperty("top", d.top), d.left !== null && (u.style.left = d.left), u.style.transformOrigin = d.transformOrigin, k(!0);
  }, [B]);
  s.useEffect(() => (R && window.addEventListener("scroll", I), () => window.removeEventListener("scroll", I)), [h, R, I]);
  const we = (u, d) => {
    f && f(u, d), I();
  }, Ce = () => {
    k(!1);
  };
  s.useEffect(() => {
    v && I();
  }), s.useImperativeHandle(g, () => v ? {
    updatePosition: () => {
      I();
    }
  } : null, [v, I]), s.useEffect(() => {
    if (!v)
      return;
    const u = Ve(() => {
      I();
    }), d = Q(h);
    return d.addEventListener("resize", u), () => {
      u.clear(), d.removeEventListener("resize", u);
    };
  }, [h, v, I]);
  let re = l;
  l === "auto" && !r.muiSupportAuto && (re = void 0);
  const Ne = S || (h ? J(G(h)).body : void 0), se = {
    slots: j,
    slotProps: {
      ...c,
      paper: M
    }
  }, [xe, ie] = de("paper", {
    elementType: Oe,
    externalForwardedProps: se,
    additionalProps: {
      elevation: D,
      className: Y(_.paper, M == null ? void 0 : M.className),
      style: P ? M.style : {
        ...M.style,
        opacity: 0
      }
    },
    ownerState: x
  }), [ae, {
    slotProps: Se,
    ...De
  }] = de("root", {
    elementType: Qe,
    externalForwardedProps: se,
    additionalProps: {
      slotProps: {
        backdrop: {
          invisible: !0
        }
      },
      container: Ne,
      open: v
    },
    ownerState: x,
    className: Y(_.root, O)
  }), Ie = ve(L, ie.ref);
  return /* @__PURE__ */ z(ae, {
    ...De,
    ...!Fe(ae) && {
      slotProps: Se,
      disableScrollLock: R
    },
    ...p,
    ref: n,
    children: /* @__PURE__ */ z(r, {
      appear: !0,
      in: v,
      onEntering: we,
      onExited: Ce,
      timeout: re,
      ...N,
      children: /* @__PURE__ */ z(xe, {
        ...ie,
        ref: Ie,
        children: E
      })
    })
  });
});
process.env.NODE_ENV !== "production" && (Re.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref for imperative actions.
   * It currently only supports updatePosition() action.
   */
  action: Ae,
  /**
   * An HTML element, [PopoverVirtualElement](https://mui.com/material-ui/react-popover/#virtual-element),
   * or a function that returns either.
   * It's used to set the position of the popover.
   */
  anchorEl: We(e.oneOfType([Z, e.func]), (t) => {
    if (t.open && (!t.anchorReference || t.anchorReference === "anchorEl")) {
      const o = G(t.anchorEl);
      if (o && o.nodeType === 1) {
        const n = o.getBoundingClientRect();
        if (process.env.NODE_ENV !== "test" && n.top === 0 && n.left === 0 && n.right === 0 && n.bottom === 0)
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
      } else
        return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", `It should be an Element or PopoverVirtualElement instance but it's \`${o}\` instead.`].join(`
`));
    }
    return null;
  }),
  /**
   * This is the point on the anchor where the popover's
   * `anchorEl` will attach to. This is not used when the
   * anchorReference is 'anchorPosition'.
   *
   * Options:
   * vertical: [top, center, bottom];
   * horizontal: [left, center, right].
   * @default {
   *   vertical: 'top',
   *   horizontal: 'left',
   * }
   */
  anchorOrigin: e.shape({
    horizontal: e.oneOfType([e.oneOf(["center", "left", "right"]), e.number]).isRequired,
    vertical: e.oneOfType([e.oneOf(["bottom", "center", "top"]), e.number]).isRequired
  }),
  /**
   * This is the position that may be used to set the position of the popover.
   * The coordinates are relative to the application's client area.
   */
  anchorPosition: e.shape({
    left: e.number.isRequired,
    top: e.number.isRequired
  }),
  /**
   * This determines which anchor prop to refer to when setting
   * the position of the popover.
   * @default 'anchorEl'
   */
  anchorReference: e.oneOf(["anchorEl", "anchorPosition", "none"]),
  /**
   * A backdrop component. This prop enables custom backdrop rendering.
   * @deprecated Use `slotProps.root.slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
   * Use the `slotProps.root.slots.backdrop` prop to make your application ready for the next version of Material UI.
   * @default styled(Backdrop, {
   *   name: 'MuiModal',
   *   slot: 'Backdrop',
   *   overridesResolver: (props, styles) => {
   *     return styles.backdrop;
   *   },
   * })({
   *   zIndex: -1,
   * })
   */
  BackdropComponent: e.elementType,
  /**
   * Props applied to the [`Backdrop`](/material-ui/api/backdrop/) element.
   * @deprecated Use `slotProps.root.slotProps.backdrop` instead.
   */
  BackdropProps: e.object,
  /**
   * The content of the component.
   */
  children: e.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: e.object,
  /**
   * @ignore
   */
  className: e.string,
  /**
   * An HTML element, component instance, or function that returns either.
   * The `container` will passed to the Modal component.
   *
   * By default, it uses the body of the anchorEl's top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: e.oneOfType([Z, e.func]),
  /**
   * Disable the scroll lock behavior.
   * @default false
   */
  disableScrollLock: e.bool,
  /**
   * The elevation of the popover.
   * @default 8
   */
  elevation: Ue,
  /**
   * Specifies how close to the edge of the window the popover can appear.
   * If null, the popover will not be constrained by the window.
   * @default 16
   */
  marginThreshold: e.number,
  /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   */
  onClose: e.func,
  /**
   * If `true`, the component is shown.
   */
  open: e.bool.isRequired,
  /**
   * Props applied to the [`Paper`](https://mui.com/material-ui/api/paper/) element.
   *
   * This prop is an alias for `slotProps.paper` and will be overriden by it if both are used.
   * @deprecated Use `slotProps.paper` instead.
   *
   * @default {}
   */
  PaperProps: e.shape({
    component: $e
  }),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: e.shape({
    paper: e.oneOfType([e.func, e.object]),
    root: e.oneOfType([e.func, e.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: e.shape({
    paper: e.elementType,
    root: e.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: e.oneOfType([e.arrayOf(e.oneOfType([e.func, e.object, e.bool])), e.func, e.object]),
  /**
   * This is the point on the popover which
   * will attach to the anchor's origin.
   *
   * Options:
   * vertical: [top, center, bottom, x(px)];
   * horizontal: [left, center, right, x(px)].
   * @default {
   *   vertical: 'top',
   *   horizontal: 'left',
   * }
   */
  transformOrigin: e.shape({
    horizontal: e.oneOfType([e.oneOf(["center", "left", "right"]), e.number]).isRequired,
    vertical: e.oneOfType([e.oneOf(["bottom", "center", "top"]), e.number]).isRequired
  }),
  /**
   * The component used for the transition.
   * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Grow
   */
  TransitionComponent: e.elementType,
  /**
   * Set to 'auto' to automatically calculate transition time based on height.
   * @default 'auto'
   */
  transitionDuration: e.oneOfType([e.oneOf(["auto"]), e.number, e.shape({
    appear: e.number,
    enter: e.number,
    exit: e.number
  })]),
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   * @default {}
   */
  TransitionProps: e.object
});
function Ze(t) {
  return te("MuiMenu", t);
}
const wo = ne("MuiMenu", ["root", "paper", "list"]), eo = {
  vertical: "top",
  horizontal: "right"
}, oo = {
  vertical: "top",
  horizontal: "left"
}, to = (t) => {
  const {
    classes: o
  } = t;
  return oe({
    root: ["root"],
    paper: ["paper"],
    list: ["list"]
  }, Ze, o);
}, no = V(Re, {
  shouldForwardProp: (t) => Le(t) || t === "classes",
  name: "MuiMenu",
  slot: "Root",
  overridesResolver: (t, o) => o.root
})({}), ro = V(Oe, {
  name: "MuiMenu",
  slot: "Paper",
  overridesResolver: (t, o) => o.paper
})({
  // specZ: The maximum height of a simple menu should be one or more rows less than the view
  // height. This ensures a tappable area outside of the simple menu with which to dismiss
  // the menu.
  maxHeight: "calc(100% - 96px)",
  // Add iOS momentum scrolling for iOS < 13.0
  WebkitOverflowScrolling: "touch"
}), so = V(Me, {
  name: "MuiMenu",
  slot: "List",
  overridesResolver: (t, o) => o.list
})({
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0
}), io = /* @__PURE__ */ s.forwardRef(function(o, n) {
  const y = ee({
    props: o,
    name: "MuiMenu"
  }), {
    autoFocus: g = !0,
    children: h,
    className: b,
    disableAutoFocusItem: a = !1,
    MenuListProps: m = {},
    onClose: E,
    open: O,
    PaperProps: S = {},
    PopoverClasses: D,
    transitionDuration: i = "auto",
    TransitionProps: {
      onEntering: v,
      ...K
    } = {},
    variant: j = "selectedMenu",
    slots: c = {},
    slotProps: C = {},
    ...r
  } = y, l = je(), f = {
    ...y,
    autoFocus: g,
    disableAutoFocusItem: a,
    MenuListProps: m,
    onEntering: v,
    PaperProps: S,
    transitionDuration: i,
    TransitionProps: K,
    variant: j
  }, N = to(f), R = g && !a && O, p = s.useRef(null), M = (P, k) => {
    p.current && p.current.adjustStyleForScrollbar(P, {
      direction: l ? "rtl" : "ltr"
    }), v && v(P, k);
  }, L = (P) => {
    P.key === "Tab" && (P.preventDefault(), E && E(P, "tabKeyDown"));
  };
  let x = -1;
  s.Children.map(h, (P, k) => {
    /* @__PURE__ */ s.isValidElement(P) && (process.env.NODE_ENV !== "production" && ye.isFragment(P) && console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`)), P.props.disabled || (j === "selectedMenu" && P.props.selected || x === -1) && (x = k));
  });
  const _ = c.paper ?? ro, $ = C.paper ?? S, q = fe({
    elementType: c.root,
    externalSlotProps: C.root,
    ownerState: f,
    className: [N.root, b]
  }), B = fe({
    elementType: _,
    externalSlotProps: $,
    ownerState: f,
    className: N.paper
  });
  return /* @__PURE__ */ z(no, {
    onClose: E,
    anchorOrigin: {
      vertical: "bottom",
      horizontal: l ? "right" : "left"
    },
    transformOrigin: l ? eo : oo,
    slots: {
      paper: _,
      root: c.root
    },
    slotProps: {
      root: q,
      paper: B
    },
    open: O,
    ref: n,
    transitionDuration: i,
    TransitionProps: {
      onEntering: M,
      ...K
    },
    ownerState: f,
    ...r,
    classes: D,
    children: /* @__PURE__ */ z(so, {
      onKeyDown: L,
      actions: p,
      autoFocus: g && (x === -1 || a),
      autoFocusItem: R,
      variant: j,
      ...m,
      className: Y(N.list, m.className),
      children: h
    })
  });
});
process.env.NODE_ENV !== "production" && (io.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * An HTML element, or a function that returns one.
   * It's used to set the position of the menu.
   */
  anchorEl: e.oneOfType([Z, e.func]),
  /**
   * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
   * children are not focusable. If you set this prop to `false` focus will be placed
   * on the parent modal container. This has severe accessibility implications
   * and should only be considered if you manage focus otherwise.
   * @default true
   */
  autoFocus: e.bool,
  /**
   * Menu contents, normally `MenuItem`s.
   */
  children: e.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: e.object,
  /**
   * @ignore
   */
  className: e.string,
  /**
   * When opening the menu will not focus the active item but the `[role="menu"]`
   * unless `autoFocus` is also set to `false`. Not using the default means not
   * following WAI-ARIA authoring practices. Please be considerate about possible
   * accessibility implications.
   * @default false
   */
  disableAutoFocusItem: e.bool,
  /**
   * Props applied to the [`MenuList`](https://mui.com/material-ui/api/menu-list/) element.
   * @default {}
   */
  MenuListProps: e.object,
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
   */
  onClose: e.func,
  /**
   * If `true`, the component is shown.
   */
  open: e.bool.isRequired,
  /**
   * @ignore
   */
  PaperProps: e.object,
  /**
   * `classes` prop applied to the [`Popover`](https://mui.com/material-ui/api/popover/) element.
   */
  PopoverClasses: e.object,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: e.shape({
    paper: e.oneOfType([e.func, e.object]),
    root: e.oneOfType([e.func, e.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: e.shape({
    paper: e.elementType,
    root: e.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: e.oneOfType([e.arrayOf(e.oneOfType([e.func, e.object, e.bool])), e.func, e.object]),
  /**
   * The length of the transition in `ms`, or 'auto'
   * @default 'auto'
   */
  transitionDuration: e.oneOfType([e.oneOf(["auto"]), e.number, e.shape({
    appear: e.number,
    enter: e.number,
    exit: e.number
  })]),
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   * @default {}
   */
  TransitionProps: e.object,
  /**
   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.
   * @default 'selectedMenu'
   */
  variant: e.oneOf(["menu", "selectedMenu"])
});
export {
  Te as L,
  io as M,
  Ze as a,
  Pe as b,
  Be as g,
  Ro as l,
  wo as m
};
