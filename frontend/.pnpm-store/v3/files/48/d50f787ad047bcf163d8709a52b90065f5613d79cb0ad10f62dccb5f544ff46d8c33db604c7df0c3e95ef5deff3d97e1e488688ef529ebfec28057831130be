import * as u from "react";
import { I as L, H as j, L as e, n as c, G as I, P as a } from "./identifier-B7MO0PvI.js";
import { s as b, r as G, a as D, u as F, c as U } from "./DefaultPropsProvider-BYFwNPLt.js";
import { m as H } from "./memoTheme-CqfvfBST.js";
import { c as _ } from "./createSimplePaletteValueFilter-B7--0ryQ.js";
import { jsxs as A, jsx as m } from "react/jsx-runtime";
import { B as q } from "./ButtonBase-z74SMnd9.js";
function J(o) {
  return j("MuiButton", o);
}
const s = L("MuiButton", ["root", "text", "textInherit", "textPrimary", "textSecondary", "textSuccess", "textError", "textInfo", "textWarning", "outlined", "outlinedInherit", "outlinedPrimary", "outlinedSecondary", "outlinedSuccess", "outlinedError", "outlinedInfo", "outlinedWarning", "contained", "containedInherit", "containedPrimary", "containedSecondary", "containedSuccess", "containedError", "containedInfo", "containedWarning", "disableElevation", "focusVisible", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorSuccess", "colorError", "colorInfo", "colorWarning", "textSizeSmall", "textSizeMedium", "textSizeLarge", "outlinedSizeSmall", "outlinedSizeMedium", "outlinedSizeLarge", "containedSizeSmall", "containedSizeMedium", "containedSizeLarge", "sizeMedium", "sizeSmall", "sizeLarge", "fullWidth", "startIcon", "endIcon", "icon", "iconSizeSmall", "iconSizeMedium", "iconSizeLarge"]), $ = /* @__PURE__ */ u.createContext({});
process.env.NODE_ENV !== "production" && ($.displayName = "ButtonGroupContext");
const w = /* @__PURE__ */ u.createContext(void 0);
process.env.NODE_ENV !== "production" && (w.displayName = "ButtonGroupButtonContext");
const K = (o) => {
  const {
    color: t,
    disableElevation: n,
    fullWidth: r,
    size: i,
    variant: l,
    classes: d
  } = o, g = {
    root: ["root", l, `${l}${e(t)}`, `size${e(i)}`, `${l}Size${e(i)}`, `color${e(t)}`, n && "disableElevation", r && "fullWidth"],
    label: ["label"],
    startIcon: ["icon", "startIcon", `iconSize${e(i)}`],
    endIcon: ["icon", "endIcon", `iconSize${e(i)}`]
  }, x = U(g, J, d);
  return {
    ...d,
    // forward the focused, disabled, etc. classes to the ButtonBase
    ...x
  };
}, O = [{
  props: {
    size: "small"
  },
  style: {
    "& > *:nth-of-type(1)": {
      fontSize: 18
    }
  }
}, {
  props: {
    size: "medium"
  },
  style: {
    "& > *:nth-of-type(1)": {
      fontSize: 20
    }
  }
}, {
  props: {
    size: "large"
  },
  style: {
    "& > *:nth-of-type(1)": {
      fontSize: 22
    }
  }
}], Q = b(q, {
  shouldForwardProp: (o) => G(o) || o === "classes",
  name: "MuiButton",
  slot: "Root",
  overridesResolver: (o, t) => {
    const {
      ownerState: n
    } = o;
    return [t.root, t[n.variant], t[`${n.variant}${e(n.color)}`], t[`size${e(n.size)}`], t[`${n.variant}Size${e(n.size)}`], n.color === "inherit" && t.colorInherit, n.disableElevation && t.disableElevation, n.fullWidth && t.fullWidth];
  }
})(H(({
  theme: o
}) => {
  const t = o.palette.mode === "light" ? o.palette.grey[300] : o.palette.grey[800], n = o.palette.mode === "light" ? o.palette.grey.A100 : o.palette.grey[700];
  return {
    ...o.typography.button,
    minWidth: 64,
    padding: "6px 16px",
    border: 0,
    borderRadius: (o.vars || o).shape.borderRadius,
    transition: o.transitions.create(["background-color", "box-shadow", "border-color", "color"], {
      duration: o.transitions.duration.short
    }),
    "&:hover": {
      textDecoration: "none"
    },
    [`&.${s.disabled}`]: {
      color: (o.vars || o).palette.action.disabled
    },
    variants: [{
      props: {
        variant: "contained"
      },
      style: {
        color: "var(--variant-containedColor)",
        backgroundColor: "var(--variant-containedBg)",
        boxShadow: (o.vars || o).shadows[2],
        "&:hover": {
          boxShadow: (o.vars || o).shadows[4],
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            boxShadow: (o.vars || o).shadows[2]
          }
        },
        "&:active": {
          boxShadow: (o.vars || o).shadows[8]
        },
        [`&.${s.focusVisible}`]: {
          boxShadow: (o.vars || o).shadows[6]
        },
        [`&.${s.disabled}`]: {
          color: (o.vars || o).palette.action.disabled,
          boxShadow: (o.vars || o).shadows[0],
          backgroundColor: (o.vars || o).palette.action.disabledBackground
        }
      }
    }, {
      props: {
        variant: "outlined"
      },
      style: {
        padding: "5px 15px",
        border: "1px solid currentColor",
        borderColor: "var(--variant-outlinedBorder, currentColor)",
        backgroundColor: "var(--variant-outlinedBg)",
        color: "var(--variant-outlinedColor)",
        [`&.${s.disabled}`]: {
          border: `1px solid ${(o.vars || o).palette.action.disabledBackground}`
        }
      }
    }, {
      props: {
        variant: "text"
      },
      style: {
        padding: "6px 8px",
        color: "var(--variant-textColor)",
        backgroundColor: "var(--variant-textBg)"
      }
    }, ...Object.entries(o.palette).filter(_()).map(([r]) => ({
      props: {
        color: r
      },
      style: {
        "--variant-textColor": (o.vars || o).palette[r].main,
        "--variant-outlinedColor": (o.vars || o).palette[r].main,
        "--variant-outlinedBorder": o.vars ? `rgba(${o.vars.palette[r].mainChannel} / 0.5)` : c(o.palette[r].main, 0.5),
        "--variant-containedColor": (o.vars || o).palette[r].contrastText,
        "--variant-containedBg": (o.vars || o).palette[r].main,
        "@media (hover: hover)": {
          "&:hover": {
            "--variant-containedBg": (o.vars || o).palette[r].dark,
            "--variant-textBg": o.vars ? `rgba(${o.vars.palette[r].mainChannel} / ${o.vars.palette.action.hoverOpacity})` : c(o.palette[r].main, o.palette.action.hoverOpacity),
            "--variant-outlinedBorder": (o.vars || o).palette[r].main,
            "--variant-outlinedBg": o.vars ? `rgba(${o.vars.palette[r].mainChannel} / ${o.vars.palette.action.hoverOpacity})` : c(o.palette[r].main, o.palette.action.hoverOpacity)
          }
        }
      }
    })), {
      props: {
        color: "inherit"
      },
      style: {
        color: "inherit",
        borderColor: "currentColor",
        "--variant-containedBg": o.vars ? o.vars.palette.Button.inheritContainedBg : t,
        "@media (hover: hover)": {
          "&:hover": {
            "--variant-containedBg": o.vars ? o.vars.palette.Button.inheritContainedHoverBg : n,
            "--variant-textBg": o.vars ? `rgba(${o.vars.palette.text.primaryChannel} / ${o.vars.palette.action.hoverOpacity})` : c(o.palette.text.primary, o.palette.action.hoverOpacity),
            "--variant-outlinedBg": o.vars ? `rgba(${o.vars.palette.text.primaryChannel} / ${o.vars.palette.action.hoverOpacity})` : c(o.palette.text.primary, o.palette.action.hoverOpacity)
          }
        }
      }
    }, {
      props: {
        size: "small",
        variant: "text"
      },
      style: {
        padding: "4px 5px",
        fontSize: o.typography.pxToRem(13)
      }
    }, {
      props: {
        size: "large",
        variant: "text"
      },
      style: {
        padding: "8px 11px",
        fontSize: o.typography.pxToRem(15)
      }
    }, {
      props: {
        size: "small",
        variant: "outlined"
      },
      style: {
        padding: "3px 9px",
        fontSize: o.typography.pxToRem(13)
      }
    }, {
      props: {
        size: "large",
        variant: "outlined"
      },
      style: {
        padding: "7px 21px",
        fontSize: o.typography.pxToRem(15)
      }
    }, {
      props: {
        size: "small",
        variant: "contained"
      },
      style: {
        padding: "4px 10px",
        fontSize: o.typography.pxToRem(13)
      }
    }, {
      props: {
        size: "large",
        variant: "contained"
      },
      style: {
        padding: "8px 22px",
        fontSize: o.typography.pxToRem(15)
      }
    }, {
      props: {
        disableElevation: !0
      },
      style: {
        boxShadow: "none",
        "&:hover": {
          boxShadow: "none"
        },
        [`&.${s.focusVisible}`]: {
          boxShadow: "none"
        },
        "&:active": {
          boxShadow: "none"
        },
        [`&.${s.disabled}`]: {
          boxShadow: "none"
        }
      }
    }, {
      props: {
        fullWidth: !0
      },
      style: {
        width: "100%"
      }
    }]
  };
})), X = b("span", {
  name: "MuiButton",
  slot: "StartIcon",
  overridesResolver: (o, t) => {
    const {
      ownerState: n
    } = o;
    return [t.startIcon, t[`iconSize${e(n.size)}`]];
  }
})({
  display: "inherit",
  marginRight: 8,
  marginLeft: -4,
  variants: [{
    props: {
      size: "small"
    },
    style: {
      marginLeft: -2
    }
  }, ...O]
}), Y = b("span", {
  name: "MuiButton",
  slot: "EndIcon",
  overridesResolver: (o, t) => {
    const {
      ownerState: n
    } = o;
    return [t.endIcon, t[`iconSize${e(n.size)}`]];
  }
})({
  display: "inherit",
  marginRight: -4,
  marginLeft: 8,
  variants: [{
    props: {
      size: "small"
    },
    style: {
      marginRight: -2
    }
  }, ...O]
}), Z = /* @__PURE__ */ u.forwardRef(function(t, n) {
  const r = u.useContext($), i = u.useContext(w), l = D(r, t), d = F({
    props: l,
    name: "MuiButton"
  }), {
    children: g,
    color: x = "primary",
    component: y = "button",
    className: R,
    disabled: f = !1,
    disableElevation: E = !1,
    disableFocusRipple: S = !1,
    endIcon: z,
    focusVisibleClassName: N,
    fullWidth: h = !1,
    size: T = "medium",
    startIcon: C,
    type: B,
    variant: P = "text",
    ...W
  } = d, v = {
    ...d,
    color: x,
    component: y,
    disabled: f,
    disableElevation: E,
    disableFocusRipple: S,
    fullWidth: h,
    size: T,
    type: B,
    variant: P
  }, p = K(v), M = C && /* @__PURE__ */ m(X, {
    className: p.startIcon,
    ownerState: v,
    children: C
  }), V = z && /* @__PURE__ */ m(Y, {
    className: p.endIcon,
    ownerState: v,
    children: z
  }), k = i || "";
  return /* @__PURE__ */ A(Q, {
    ownerState: v,
    className: I(r.className, p.root, R, k),
    component: y,
    disabled: f,
    focusRipple: !S,
    focusVisibleClassName: I(p.focusVisible, N),
    ref: n,
    type: B,
    ...W,
    classes: p,
    children: [M, g, V]
  });
});
process.env.NODE_ENV !== "production" && (Z.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: a.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: a.object,
  /**
   * @ignore
   */
  className: a.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: a.oneOfType([a.oneOf(["inherit", "primary", "secondary", "success", "error", "info", "warning"]), a.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: a.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: a.bool,
  /**
   * If `true`, no elevation is used.
   * @default false
   */
  disableElevation: a.bool,
  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: a.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: a.bool,
  /**
   * Element placed after the children.
   */
  endIcon: a.node,
  /**
   * @ignore
   */
  focusVisibleClassName: a.string,
  /**
   * If `true`, the button will take up the full width of its container.
   * @default false
   */
  fullWidth: a.bool,
  /**
   * The URL to link to when the button is clicked.
   * If defined, an `a` element will be used as the root node.
   */
  href: a.string,
  /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'medium'
   */
  size: a.oneOfType([a.oneOf(["small", "medium", "large"]), a.string]),
  /**
   * Element placed before the children.
   */
  startIcon: a.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: a.oneOfType([a.arrayOf(a.oneOfType([a.func, a.object, a.bool])), a.func, a.object]),
  /**
   * @ignore
   */
  type: a.oneOfType([a.oneOf(["button", "reset", "submit"]), a.string]),
  /**
   * The variant to use.
   * @default 'text'
   */
  variant: a.oneOfType([a.oneOf(["contained", "outlined", "text"]), a.string])
});
export {
  Z as B,
  $ as a
};
