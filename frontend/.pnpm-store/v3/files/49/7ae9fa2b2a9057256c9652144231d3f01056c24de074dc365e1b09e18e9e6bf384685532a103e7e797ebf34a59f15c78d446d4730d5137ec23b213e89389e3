import * as c from "react";
import { H as z, I, L as a, G as R, P as e, n as g } from "./identifier-B7MO0PvI.js";
import { m as f } from "./memoTheme-CqfvfBST.js";
import { c as y } from "./createSimplePaletteValueFilter-B7--0ryQ.js";
import { jsx as O } from "react/jsx-runtime";
import { s as C, u as h, c as T } from "./DefaultPropsProvider-BYFwNPLt.js";
import { B as S } from "./ButtonBase-z74SMnd9.js";
import { c as $ } from "./chainPropTypes-D9lkm76m.js";
function x(o) {
  return z("MuiIconButton", o);
}
const w = I("MuiIconButton", ["root", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "edgeStart", "edgeEnd", "sizeSmall", "sizeMedium", "sizeLarge"]), j = (o) => {
  const {
    classes: t,
    disabled: r,
    color: s,
    edge: n,
    size: i
  } = o, l = {
    root: ["root", r && "disabled", s !== "default" && `color${a(s)}`, n && `edge${a(n)}`, `size${a(i)}`]
  };
  return T(l, x, t);
}, k = C(S, {
  name: "MuiIconButton",
  slot: "Root",
  overridesResolver: (o, t) => {
    const {
      ownerState: r
    } = o;
    return [t.root, r.color !== "default" && t[`color${a(r.color)}`], r.edge && t[`edge${a(r.edge)}`], t[`size${a(r.size)}`]];
  }
})(f(({
  theme: o
}) => ({
  textAlign: "center",
  flex: "0 0 auto",
  fontSize: o.typography.pxToRem(24),
  padding: 8,
  borderRadius: "50%",
  color: (o.vars || o).palette.action.active,
  transition: o.transitions.create("background-color", {
    duration: o.transitions.duration.shortest
  }),
  variants: [{
    props: (t) => !t.disableRipple,
    style: {
      "--IconButton-hoverBg": o.vars ? `rgba(${o.vars.palette.action.activeChannel} / ${o.vars.palette.action.hoverOpacity})` : g(o.palette.action.active, o.palette.action.hoverOpacity),
      "&:hover": {
        backgroundColor: "var(--IconButton-hoverBg)",
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }
    }
  }, {
    props: {
      edge: "start"
    },
    style: {
      marginLeft: -12
    }
  }, {
    props: {
      edge: "start",
      size: "small"
    },
    style: {
      marginLeft: -3
    }
  }, {
    props: {
      edge: "end"
    },
    style: {
      marginRight: -12
    }
  }, {
    props: {
      edge: "end",
      size: "small"
    },
    style: {
      marginRight: -3
    }
  }]
})), f(({
  theme: o
}) => ({
  variants: [{
    props: {
      color: "inherit"
    },
    style: {
      color: "inherit"
    }
  }, ...Object.entries(o.palette).filter(y()).map(([t]) => ({
    props: {
      color: t
    },
    style: {
      color: (o.vars || o).palette[t].main
    }
  })), ...Object.entries(o.palette).filter(y()).map(([t]) => ({
    props: {
      color: t
    },
    style: {
      "--IconButton-hoverBg": o.vars ? `rgba(${(o.vars || o).palette[t].mainChannel} / ${o.vars.palette.action.hoverOpacity})` : g((o.vars || o).palette[t].main, o.palette.action.hoverOpacity)
    }
  })), {
    props: {
      size: "small"
    },
    style: {
      padding: 5,
      fontSize: o.typography.pxToRem(18)
    }
  }, {
    props: {
      size: "large"
    },
    style: {
      padding: 12,
      fontSize: o.typography.pxToRem(28)
    }
  }],
  [`&.${w.disabled}`]: {
    backgroundColor: "transparent",
    color: (o.vars || o).palette.action.disabled
  }
}))), P = /* @__PURE__ */ c.forwardRef(function(t, r) {
  const s = h({
    props: t,
    name: "MuiIconButton"
  }), {
    edge: n = !1,
    children: i,
    className: l,
    color: v = "default",
    disabled: p = !1,
    disableFocusRipple: d = !1,
    size: m = "medium",
    ...b
  } = s, u = {
    ...s,
    edge: n,
    color: v,
    disabled: p,
    disableFocusRipple: d,
    size: m
  }, B = j(u);
  return /* @__PURE__ */ O(k, {
    className: R(B.root, l),
    centerRipple: !0,
    focusRipple: !d,
    disabled: p,
    ref: r,
    ...b,
    ownerState: u,
    children: i
  });
});
process.env.NODE_ENV !== "production" && (P.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The icon to display.
   */
  children: $(e.node, (o) => c.Children.toArray(o.children).some((r) => /* @__PURE__ */ c.isValidElement(r) && r.props.onClick) ? new Error(["MUI: You are providing an onClick event listener to a child of a button element.", "Prefer applying it to the IconButton directly.", "This guarantees that the whole <button> will be responsive to click events."].join(`
`)) : null),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: e.object,
  /**
   * @ignore
   */
  className: e.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'default'
   */
  color: e.oneOfType([e.oneOf(["inherit", "default", "primary", "secondary", "error", "info", "success", "warning"]), e.string]),
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: e.bool,
  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: e.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: e.bool,
  /**
   * If given, uses a negative margin to counteract the padding on one
   * side (this is often helpful for aligning the left or right
   * side of the icon with content above or below, without ruining the border
   * size and shape).
   * @default false
   */
  edge: e.oneOf(["end", "start", !1]),
  /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'medium'
   */
  size: e.oneOfType([e.oneOf(["small", "medium", "large"]), e.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: e.oneOfType([e.arrayOf(e.oneOfType([e.func, e.object, e.bool])), e.func, e.object])
});
export {
  P as I,
  x as g,
  w as i
};
