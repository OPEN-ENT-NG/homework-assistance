import * as h from "react";
import { P as e, H as q, I as A, G as H } from "./identifier-B7MO0PvI.js";
import { u as N } from "./useSlot-BSVkAc2J.js";
import { jsx as B } from "react/jsx-runtime";
import { s as V, u as _, c as z } from "./DefaultPropsProvider-BYFwNPLt.js";
import { u as G } from "./useTheme-CzzAEESs.js";
import { g as I, e as W, T as J, r as K, a as D } from "./utils-jA5a7WHN.js";
import { u as Q } from "./useForkRef-C_4o__cU.js";
const X = {
  entering: {
    opacity: 1
  },
  entered: {
    opacity: 1
  }
}, F = /* @__PURE__ */ h.forwardRef(function(s, r) {
  const t = G(), g = {
    enter: t.transitions.duration.enteringScreen,
    exit: t.transitions.duration.leavingScreen
  }, {
    addEndListener: m,
    appear: T = !0,
    children: d,
    easing: f,
    in: y,
    onEnter: b,
    onEntered: x,
    onEntering: v,
    onExit: E,
    onExited: R,
    onExiting: P,
    style: c,
    timeout: l = g,
    // eslint-disable-next-line react/prop-types
    TransitionComponent: C = J,
    ...k
  } = s, p = h.useRef(null), w = Q(p, I(d), r), a = (n) => (i) => {
    if (n) {
      const u = p.current;
      i === void 0 ? n(u) : n(u, i);
    }
  }, O = a(v), S = a((n, i) => {
    K(n);
    const u = D({
      style: c,
      timeout: l,
      easing: f
    }, {
      mode: "enter"
    });
    n.style.webkitTransition = t.transitions.create("opacity", u), n.style.transition = t.transitions.create("opacity", u), b && b(n, i);
  }), j = a(x), L = a(P), M = a((n) => {
    const i = D({
      style: c,
      timeout: l,
      easing: f
    }, {
      mode: "exit"
    });
    n.style.webkitTransition = t.transitions.create("opacity", i), n.style.transition = t.transitions.create("opacity", i), E && E(n);
  }), U = a(R);
  return /* @__PURE__ */ B(C, {
    appear: T,
    in: y,
    nodeRef: p,
    onEnter: S,
    onEntered: j,
    onEntering: O,
    onExit: M,
    onExited: U,
    onExiting: L,
    addEndListener: (n) => {
      m && m(p.current, n);
    },
    timeout: l,
    ...k,
    children: (n, i) => /* @__PURE__ */ h.cloneElement(d, {
      style: {
        opacity: 0,
        visibility: n === "exited" && !y ? "hidden" : void 0,
        ...X[n],
        ...c,
        ...d.props.style
      },
      ref: w,
      ...i
    })
  });
});
process.env.NODE_ENV !== "production" && (F.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */
  addEndListener: e.func,
  /**
   * Perform the enter transition when it first mounts if `in` is also `true`.
   * Set this to `false` to disable this behavior.
   * @default true
   */
  appear: e.bool,
  /**
   * A single child content element.
   */
  children: W.isRequired,
  /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   */
  easing: e.oneOfType([e.shape({
    enter: e.string,
    exit: e.string
  }), e.string]),
  /**
   * If `true`, the component will transition in.
   */
  in: e.bool,
  /**
   * @ignore
   */
  onEnter: e.func,
  /**
   * @ignore
   */
  onEntered: e.func,
  /**
   * @ignore
   */
  onEntering: e.func,
  /**
   * @ignore
   */
  onExit: e.func,
  /**
   * @ignore
   */
  onExited: e.func,
  /**
   * @ignore
   */
  onExiting: e.func,
  /**
   * @ignore
   */
  style: e.object,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  timeout: e.oneOfType([e.number, e.shape({
    appear: e.number,
    enter: e.number,
    exit: e.number
  })])
});
function Y(o) {
  return q("MuiBackdrop", o);
}
const le = A("MuiBackdrop", ["root", "invisible"]), Z = (o) => {
  const {
    ownerState: s,
    ...r
  } = o;
  return r;
}, $ = (o) => {
  const {
    classes: s,
    invisible: r
  } = o;
  return z({
    root: ["root", r && "invisible"]
  }, Y, s);
}, ee = V("div", {
  name: "MuiBackdrop",
  slot: "Root",
  overridesResolver: (o, s) => {
    const {
      ownerState: r
    } = o;
    return [s.root, r.invisible && s.invisible];
  }
})({
  position: "fixed",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  right: 0,
  bottom: 0,
  top: 0,
  left: 0,
  backgroundColor: "rgba(0, 0, 0, 0.5)",
  WebkitTapHighlightColor: "transparent",
  variants: [{
    props: {
      invisible: !0
    },
    style: {
      backgroundColor: "transparent"
    }
  }]
}), ne = /* @__PURE__ */ h.forwardRef(function(s, r) {
  const t = _({
    props: s,
    name: "MuiBackdrop"
  }), {
    children: g,
    className: m,
    component: T = "div",
    invisible: d = !1,
    open: f,
    components: y = {},
    componentsProps: b = {},
    slotProps: x = {},
    slots: v = {},
    TransitionComponent: E,
    transitionDuration: R,
    ...P
  } = t, c = {
    ...t,
    component: T,
    invisible: d
  }, l = $(c), C = {
    transition: E,
    root: y.Root,
    ...v
  }, k = {
    ...b,
    ...x
  }, p = {
    slots: C,
    slotProps: k
  }, [w, a] = N("root", {
    elementType: ee,
    externalForwardedProps: p,
    className: H(l.root, m),
    ownerState: c
  }), [O, S] = N("transition", {
    elementType: F,
    externalForwardedProps: p,
    ownerState: c
  }), j = Z(S);
  return /* @__PURE__ */ B(O, {
    in: f,
    timeout: R,
    ...P,
    ...j,
    children: /* @__PURE__ */ B(w, {
      "aria-hidden": !0,
      ...a,
      classes: l,
      ref: r,
      children: g
    })
  });
});
process.env.NODE_ENV !== "production" && (ne.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: e.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: e.object,
  /**
   * @ignore
   */
  className: e.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: e.elementType,
  /**
   * The components used for each slot inside.
   *
   * @deprecated Use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: e.shape({
    Root: e.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated Use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: e.shape({
    root: e.object
  }),
  /**
   * If `true`, the backdrop is invisible.
   * It can be used when rendering a popover or a custom select component.
   * @default false
   */
  invisible: e.bool,
  /**
   * If `true`, the component is shown.
   */
  open: e.bool.isRequired,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: e.shape({
    root: e.oneOfType([e.func, e.object]),
    transition: e.oneOfType([e.func, e.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: e.shape({
    root: e.elementType,
    transition: e.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: e.oneOfType([e.arrayOf(e.oneOfType([e.func, e.object, e.bool])), e.func, e.object]),
  /**
   * The component used for the transition.
   * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Fade
   */
  TransitionComponent: e.elementType,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   */
  transitionDuration: e.oneOfType([e.number, e.shape({
    appear: e.number,
    enter: e.number,
    exit: e.number
  })])
});
export {
  ne as B,
  F,
  le as b,
  Y as g
};
