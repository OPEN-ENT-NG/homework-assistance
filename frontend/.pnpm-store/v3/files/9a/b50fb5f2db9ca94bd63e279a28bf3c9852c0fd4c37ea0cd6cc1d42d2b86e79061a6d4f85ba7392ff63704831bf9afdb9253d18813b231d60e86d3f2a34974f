import * as i from "react";
import { H as y, I as C, G as p, P as o } from "./identifier-B7MO0PvI.js";
import { s as d, r as D, u, c as f } from "./DefaultPropsProvider-BYFwNPLt.js";
import { jsx as g } from "react/jsx-runtime";
import { T as m } from "./Typography-CizHc1nM.js";
import { k as v, j as N } from "./DialogContent-B_NH_if8.js";
function b(s) {
  return y("MuiDialogContentText", s);
}
const I = C("MuiDialogContentText", ["root"]), h = (s) => {
  const {
    classes: t
  } = s, e = f({
    root: ["root"]
  }, b, t);
  return {
    ...t,
    // forward classes to the Typography
    ...e
  };
}, R = d(m, {
  shouldForwardProp: (s) => D(s) || s === "classes",
  name: "MuiDialogContentText",
  slot: "Root",
  overridesResolver: (s, t) => t.root
})({}), j = /* @__PURE__ */ i.forwardRef(function(t, a) {
  const e = u({
    props: t,
    name: "MuiDialogContentText"
  }), {
    children: c,
    className: r,
    ...l
  } = e, n = h(l);
  return /* @__PURE__ */ g(R, {
    component: "p",
    variant: "body1",
    color: "textSecondary",
    ref: a,
    ownerState: l,
    className: p(n.root, r),
    ...e,
    classes: n
  });
});
process.env.NODE_ENV !== "production" && (j.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object])
});
const w = (s) => {
  const {
    classes: t
  } = s;
  return f({
    root: ["root"]
  }, N, t);
}, O = d(m, {
  name: "MuiDialogTitle",
  slot: "Root",
  overridesResolver: (s, t) => t.root
})({
  padding: "16px 24px",
  flex: "0 0 auto"
}), M = /* @__PURE__ */ i.forwardRef(function(t, a) {
  const e = u({
    props: t,
    name: "MuiDialogTitle"
  }), {
    className: c,
    id: r,
    ...l
  } = e, n = e, T = w(n), {
    titleId: x = r
  } = i.useContext(v);
  return /* @__PURE__ */ g(O, {
    component: "h2",
    className: p(T.root, c),
    ownerState: n,
    ref: a,
    variant: "h6",
    id: r ?? x,
    ...l
  });
});
process.env.NODE_ENV !== "production" && (M.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: o.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * @ignore
   */
  id: o.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object])
});
export {
  j as D,
  M as a,
  I as d,
  b as g
};
