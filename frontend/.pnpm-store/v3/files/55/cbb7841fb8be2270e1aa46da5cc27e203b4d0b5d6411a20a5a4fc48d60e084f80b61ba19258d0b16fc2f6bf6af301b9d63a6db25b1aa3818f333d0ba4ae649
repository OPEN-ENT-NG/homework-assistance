import * as n from "react";
import { H as Je, I as Qe, L as Me, G as L, P as o, n as Ee } from "./identifier-B7MO0PvI.js";
import { u as Ze } from "./index-yb8koCDz.js";
import { u as eo } from "./useTheme-CzzAEESs.js";
import { jsxs as Pe, jsx as I } from "react/jsx-runtime";
import { s as G, u as oo, c as to } from "./DefaultPropsProvider-BYFwNPLt.js";
import { m as Y } from "./memoTheme-CqfvfBST.js";
import { P as $e } from "./Popper-BSaTZXvX.js";
import { u as j, a as Re, T as ro } from "./useTimeout-Znm_nF2D.js";
import { u as po } from "./useControlled-BYdyS7Pn.js";
import { u as no } from "./useId-CK6Kn3Tn.js";
import { u as so } from "./useForkRef-C_4o__cU.js";
import { g as ao, e as io } from "./utils-jA5a7WHN.js";
import { G as Ce } from "./Grow-BKrOFfC1.js";
import { a as A } from "./resolveComponentProps-CYk57pLv.js";
import { i as xe } from "./isFocusVisible-CPZqtjv2.js";
function lo(r) {
  return Je("MuiTooltip", r);
}
const p = Qe("MuiTooltip", ["popper", "popperInteractive", "popperArrow", "popperClose", "tooltip", "tooltipArrow", "touch", "tooltipPlacementLeft", "tooltipPlacementRight", "tooltipPlacementTop", "tooltipPlacementBottom", "arrow"]);
function co(r) {
  return Math.round(r * 1e5) / 1e5;
}
const mo = (r) => {
  const {
    classes: e,
    disableInteractive: s,
    arrow: d,
    touch: R,
    placement: b
  } = r, q = {
    popper: ["popper", !s && "popperInteractive", d && "popperArrow"],
    tooltip: ["tooltip", d && "tooltipArrow", R && "touch", `tooltipPlacement${Me(b.split("-")[0])}`],
    arrow: ["arrow"]
  };
  return to(q, lo, e);
}, uo = G($e, {
  name: "MuiTooltip",
  slot: "Popper",
  overridesResolver: (r, e) => {
    const {
      ownerState: s
    } = r;
    return [e.popper, !s.disableInteractive && e.popperInteractive, s.arrow && e.popperArrow, !s.open && e.popperClose];
  }
})(Y(({
  theme: r
}) => ({
  zIndex: (r.vars || r).zIndex.tooltip,
  pointerEvents: "none",
  variants: [{
    props: ({
      ownerState: e
    }) => !e.disableInteractive,
    style: {
      pointerEvents: "auto"
    }
  }, {
    props: ({
      open: e
    }) => !e,
    style: {
      pointerEvents: "none"
    }
  }, {
    props: ({
      ownerState: e
    }) => e.arrow,
    style: {
      [`&[data-popper-placement*="bottom"] .${p.arrow}`]: {
        top: 0,
        marginTop: "-0.71em",
        "&::before": {
          transformOrigin: "0 100%"
        }
      },
      [`&[data-popper-placement*="top"] .${p.arrow}`]: {
        bottom: 0,
        marginBottom: "-0.71em",
        "&::before": {
          transformOrigin: "100% 0"
        }
      },
      [`&[data-popper-placement*="right"] .${p.arrow}`]: {
        height: "1em",
        width: "0.71em",
        "&::before": {
          transformOrigin: "100% 100%"
        }
      },
      [`&[data-popper-placement*="left"] .${p.arrow}`]: {
        height: "1em",
        width: "0.71em",
        "&::before": {
          transformOrigin: "0 0"
        }
      }
    }
  }, {
    props: ({
      ownerState: e
    }) => e.arrow && !e.isRtl,
    style: {
      [`&[data-popper-placement*="right"] .${p.arrow}`]: {
        left: 0,
        marginLeft: "-0.71em"
      }
    }
  }, {
    props: ({
      ownerState: e
    }) => e.arrow && !!e.isRtl,
    style: {
      [`&[data-popper-placement*="right"] .${p.arrow}`]: {
        right: 0,
        marginRight: "-0.71em"
      }
    }
  }, {
    props: ({
      ownerState: e
    }) => e.arrow && !e.isRtl,
    style: {
      [`&[data-popper-placement*="left"] .${p.arrow}`]: {
        right: 0,
        marginRight: "-0.71em"
      }
    }
  }, {
    props: ({
      ownerState: e
    }) => e.arrow && !!e.isRtl,
    style: {
      [`&[data-popper-placement*="left"] .${p.arrow}`]: {
        left: 0,
        marginLeft: "-0.71em"
      }
    }
  }]
}))), fo = G("div", {
  name: "MuiTooltip",
  slot: "Tooltip",
  overridesResolver: (r, e) => {
    const {
      ownerState: s
    } = r;
    return [e.tooltip, s.touch && e.touch, s.arrow && e.tooltipArrow, e[`tooltipPlacement${Me(s.placement.split("-")[0])}`]];
  }
})(Y(({
  theme: r
}) => ({
  backgroundColor: r.vars ? r.vars.palette.Tooltip.bg : Ee(r.palette.grey[700], 0.92),
  borderRadius: (r.vars || r).shape.borderRadius,
  color: (r.vars || r).palette.common.white,
  fontFamily: r.typography.fontFamily,
  padding: "4px 8px",
  fontSize: r.typography.pxToRem(11),
  maxWidth: 300,
  margin: 2,
  wordWrap: "break-word",
  fontWeight: r.typography.fontWeightMedium,
  [`.${p.popper}[data-popper-placement*="left"] &`]: {
    transformOrigin: "right center"
  },
  [`.${p.popper}[data-popper-placement*="right"] &`]: {
    transformOrigin: "left center"
  },
  [`.${p.popper}[data-popper-placement*="top"] &`]: {
    transformOrigin: "center bottom",
    marginBottom: "14px"
  },
  [`.${p.popper}[data-popper-placement*="bottom"] &`]: {
    transformOrigin: "center top",
    marginTop: "14px"
  },
  variants: [{
    props: ({
      ownerState: e
    }) => e.arrow,
    style: {
      position: "relative",
      margin: 0
    }
  }, {
    props: ({
      ownerState: e
    }) => e.touch,
    style: {
      padding: "8px 16px",
      fontSize: r.typography.pxToRem(14),
      lineHeight: `${co(16 / 14)}em`,
      fontWeight: r.typography.fontWeightRegular
    }
  }, {
    props: ({
      ownerState: e
    }) => !e.isRtl,
    style: {
      [`.${p.popper}[data-popper-placement*="left"] &`]: {
        marginRight: "14px"
      },
      [`.${p.popper}[data-popper-placement*="right"] &`]: {
        marginLeft: "14px"
      }
    }
  }, {
    props: ({
      ownerState: e
    }) => !e.isRtl && e.touch,
    style: {
      [`.${p.popper}[data-popper-placement*="left"] &`]: {
        marginRight: "24px"
      },
      [`.${p.popper}[data-popper-placement*="right"] &`]: {
        marginLeft: "24px"
      }
    }
  }, {
    props: ({
      ownerState: e
    }) => !!e.isRtl,
    style: {
      [`.${p.popper}[data-popper-placement*="left"] &`]: {
        marginLeft: "14px"
      },
      [`.${p.popper}[data-popper-placement*="right"] &`]: {
        marginRight: "14px"
      }
    }
  }, {
    props: ({
      ownerState: e
    }) => !!e.isRtl && e.touch,
    style: {
      [`.${p.popper}[data-popper-placement*="left"] &`]: {
        marginLeft: "24px"
      },
      [`.${p.popper}[data-popper-placement*="right"] &`]: {
        marginRight: "24px"
      }
    }
  }, {
    props: ({
      ownerState: e
    }) => e.touch,
    style: {
      [`.${p.popper}[data-popper-placement*="top"] &`]: {
        marginBottom: "24px"
      }
    }
  }, {
    props: ({
      ownerState: e
    }) => e.touch,
    style: {
      [`.${p.popper}[data-popper-placement*="bottom"] &`]: {
        marginTop: "24px"
      }
    }
  }]
}))), ho = G("span", {
  name: "MuiTooltip",
  slot: "Arrow",
  overridesResolver: (r, e) => e.arrow
})(Y(({
  theme: r
}) => ({
  overflow: "hidden",
  position: "absolute",
  width: "1em",
  height: "0.71em",
  boxSizing: "border-box",
  color: r.vars ? r.vars.palette.Tooltip.bg : Ee(r.palette.grey[700], 0.9),
  "&::before": {
    content: '""',
    margin: "auto",
    display: "block",
    width: "100%",
    height: "100%",
    backgroundColor: "currentColor",
    transform: "rotate(45deg)"
  }
})));
let S = !1;
const Oe = new ro();
let P = {
  x: 0,
  y: 0
};
function D(r, e) {
  return (s, ...d) => {
    e && e(s, ...d), r(s, ...d);
  };
}
const go = /* @__PURE__ */ n.forwardRef(function(e, s) {
  var ye, we, ve;
  const d = oo({
    props: e,
    name: "MuiTooltip"
  }), {
    arrow: R = !1,
    children: b,
    classes: q,
    components: C = {},
    componentsProps: h = {},
    describeChild: Ne = !1,
    disableFocusListener: Le = !1,
    disableHoverListener: K = !1,
    disableInteractive: Ie = !1,
    disableTouchListener: je = !1,
    enterDelay: X = 100,
    enterNextDelay: J = 0,
    enterTouchDelay: Ae = 700,
    followCursor: k = !1,
    id: Se,
    leaveDelay: Q = 0,
    leaveTouchDelay: De = 1500,
    onClose: Z,
    onOpen: ee,
    open: oe,
    placement: te = "bottom",
    PopperComponent: re,
    PopperProps: u = {},
    slotProps: g = {},
    slots: x = {},
    title: f,
    TransitionComponent: ke = Ce,
    TransitionProps: Fe,
    ...pe
  } = d, c = /* @__PURE__ */ n.isValidElement(b) ? b : /* @__PURE__ */ I("span", {
    children: b
  }), ne = eo(), Ue = Ze(), [a, se] = n.useState(), [F, We] = n.useState(null), O = n.useRef(!1), U = Ie || k, ae = j(), W = j(), M = j(), ie = j(), [Be, le] = po({
    controlled: oe,
    default: !1,
    name: "Tooltip",
    state: "open"
  });
  let m = Be;
  if (process.env.NODE_ENV !== "production") {
    const {
      current: t
    } = n.useRef(oe !== void 0);
    n.useEffect(() => {
      a && a.disabled && !t && f !== "" && a.tagName.toLowerCase() === "button" && console.error(["MUI: You are providing a disabled `button` child to the Tooltip component.", "A disabled element does not fire events.", "Tooltip needs to listen to the child element's events to display the title.", "", "Add a simple wrapper element, such as a `span`."].join(`
`));
    }, [f, a, t]);
  }
  const B = no(Se), T = n.useRef(), E = Re(() => {
    T.current !== void 0 && (document.body.style.WebkitUserSelect = T.current, T.current = void 0), ie.clear();
  });
  n.useEffect(() => E, [E]);
  const ce = (t) => {
    Oe.clear(), S = !0, le(!0), ee && !m && ee(t);
  }, $ = Re(
    /**
     * @param {React.SyntheticEvent | Event} event
     */
    (t) => {
      Oe.start(800 + Q, () => {
        S = !1;
      }), le(!1), Z && m && Z(t), ae.start(ne.transitions.duration.shortest, () => {
        O.current = !1;
      });
    }
  ), N = (t) => {
    O.current && t.type !== "touchstart" || (a && a.removeAttribute("title"), W.clear(), M.clear(), X || S && J ? W.start(S ? J : X, () => {
      ce(t);
    }) : ce(t));
  }, V = (t) => {
    W.clear(), M.start(Q, () => {
      $(t);
    });
  }, [, me] = n.useState(!1), de = (t) => {
    xe(t.target) || (me(!1), V(t));
  }, ue = (t) => {
    a || se(t.currentTarget), xe(t.target) && (me(!0), N(t));
  }, fe = (t) => {
    O.current = !0;
    const l = c.props;
    l.onTouchStart && l.onTouchStart(t);
  }, Ve = (t) => {
    fe(t), M.clear(), ae.clear(), E(), T.current = document.body.style.WebkitUserSelect, document.body.style.WebkitUserSelect = "none", ie.start(Ae, () => {
      document.body.style.WebkitUserSelect = T.current, N(t);
    });
  }, ze = (t) => {
    c.props.onTouchEnd && c.props.onTouchEnd(t), E(), M.start(De, () => {
      $(t);
    });
  };
  n.useEffect(() => {
    if (!m)
      return;
    function t(l) {
      l.key === "Escape" && $(l);
    }
    return document.addEventListener("keydown", t), () => {
      document.removeEventListener("keydown", t);
    };
  }, [$, m]);
  const He = so(ao(c), se, s);
  !f && f !== 0 && (m = !1);
  const z = n.useRef(), _e = (t) => {
    const l = c.props;
    l.onMouseMove && l.onMouseMove(t), P = {
      x: t.clientX,
      y: t.clientY
    }, z.current && z.current.update();
  }, y = {}, H = typeof f == "string";
  Ne ? (y.title = !m && H && !K ? f : null, y["aria-describedby"] = m ? B : null) : (y["aria-label"] = H ? f : null, y["aria-labelledby"] = m && !H ? B : null);
  const i = {
    ...y,
    ...pe,
    ...c.props,
    className: L(pe.className, c.props.className),
    onTouchStart: fe,
    ref: He,
    ...k ? {
      onMouseMove: _e
    } : {}
  };
  process.env.NODE_ENV !== "production" && (i["data-mui-internal-clone-element"] = !0, n.useEffect(() => {
    a && !a.getAttribute("data-mui-internal-clone-element") && console.error(["MUI: The `children` component of the Tooltip is not forwarding its props correctly.", "Please make sure that props are spread on the same element that the ref is applied to."].join(`
`));
  }, [a]));
  const w = {};
  je || (i.onTouchStart = Ve, i.onTouchEnd = ze), K || (i.onMouseOver = D(N, i.onMouseOver), i.onMouseLeave = D(V, i.onMouseLeave), U || (w.onMouseOver = N, w.onMouseLeave = V)), Le || (i.onFocus = D(ue, i.onFocus), i.onBlur = D(de, i.onBlur), U || (w.onFocus = ue, w.onBlur = de)), process.env.NODE_ENV !== "production" && c.props.title && console.error(["MUI: You have provided a `title` prop to the child of <Tooltip />.", `Remove this title prop \`${c.props.title}\` or the Tooltip component.`].join(`
`));
  const Ge = n.useMemo(() => {
    var l;
    let t = [{
      name: "arrow",
      enabled: !!F,
      options: {
        element: F,
        padding: 4
      }
    }];
    return (l = u.popperOptions) != null && l.modifiers && (t = t.concat(u.popperOptions.modifiers)), {
      ...u.popperOptions,
      modifiers: t
    };
  }, [F, u]), v = {
    ...d,
    isRtl: Ue,
    arrow: R,
    disableInteractive: U,
    placement: te,
    PopperComponentProp: re,
    touch: O.current
  }, _ = mo(v), he = x.popper ?? C.Popper ?? uo, ge = x.transition ?? C.Transition ?? ke ?? Ce, be = x.tooltip ?? C.Tooltip ?? fo, Te = x.arrow ?? C.Arrow ?? ho, Ye = A(he, {
    ...u,
    ...g.popper ?? h.popper,
    className: L(_.popper, u == null ? void 0 : u.className, (ye = g.popper ?? h.popper) == null ? void 0 : ye.className)
  }, v), qe = A(ge, {
    ...Fe,
    ...g.transition ?? h.transition
  }, v), Ke = A(be, {
    ...g.tooltip ?? h.tooltip,
    className: L(_.tooltip, (we = g.tooltip ?? h.tooltip) == null ? void 0 : we.className)
  }, v), Xe = A(Te, {
    ...g.arrow ?? h.arrow,
    className: L(_.arrow, (ve = g.arrow ?? h.arrow) == null ? void 0 : ve.className)
  }, v);
  return /* @__PURE__ */ Pe(n.Fragment, {
    children: [/* @__PURE__ */ n.cloneElement(c, i), /* @__PURE__ */ I(he, {
      as: re ?? $e,
      placement: te,
      anchorEl: k ? {
        getBoundingClientRect: () => ({
          top: P.y,
          left: P.x,
          right: P.x,
          bottom: P.y,
          width: 0,
          height: 0
        })
      } : a,
      popperRef: z,
      open: a ? m : !1,
      id: B,
      transition: !0,
      ...w,
      ...Ye,
      popperOptions: Ge,
      children: ({
        TransitionProps: t
      }) => /* @__PURE__ */ I(ge, {
        timeout: ne.transitions.duration.shorter,
        ...t,
        ...qe,
        children: /* @__PURE__ */ Pe(be, {
          ...Ke,
          children: [f, R ? /* @__PURE__ */ I(Te, {
            ...Xe,
            ref: We
          }) : null]
        })
      })
    })]
  });
});
process.env.NODE_ENV !== "production" && (go.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, adds an arrow to the tooltip.
   * @default false
   */
  arrow: o.bool,
  /**
   * Tooltip reference element.
   */
  children: io.isRequired,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: o.object,
  /**
   * @ignore
   */
  className: o.string,
  /**
   * The components used for each slot inside.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in v7. [How to migrate](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/).
   *
   * @default {}
   */
  components: o.shape({
    Arrow: o.elementType,
    Popper: o.elementType,
    Tooltip: o.elementType,
    Transition: o.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. [How to migrate](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/).
   *
   * @default {}
   */
  componentsProps: o.shape({
    arrow: o.object,
    popper: o.object,
    tooltip: o.object,
    transition: o.object
  }),
  /**
   * Set to `true` if the `title` acts as an accessible description.
   * By default the `title` acts as an accessible label for the child.
   * @default false
   */
  describeChild: o.bool,
  /**
   * Do not respond to focus-visible events.
   * @default false
   */
  disableFocusListener: o.bool,
  /**
   * Do not respond to hover events.
   * @default false
   */
  disableHoverListener: o.bool,
  /**
   * Makes a tooltip not interactive, i.e. it will close when the user
   * hovers over the tooltip before the `leaveDelay` is expired.
   * @default false
   */
  disableInteractive: o.bool,
  /**
   * Do not respond to long press touch events.
   * @default false
   */
  disableTouchListener: o.bool,
  /**
   * The number of milliseconds to wait before showing the tooltip.
   * This prop won't impact the enter touch delay (`enterTouchDelay`).
   * @default 100
   */
  enterDelay: o.number,
  /**
   * The number of milliseconds to wait before showing the tooltip when one was already recently opened.
   * @default 0
   */
  enterNextDelay: o.number,
  /**
   * The number of milliseconds a user must touch the element before showing the tooltip.
   * @default 700
   */
  enterTouchDelay: o.number,
  /**
   * If `true`, the tooltip follow the cursor over the wrapped element.
   * @default false
   */
  followCursor: o.bool,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: o.string,
  /**
   * The number of milliseconds to wait before hiding the tooltip.
   * This prop won't impact the leave touch delay (`leaveTouchDelay`).
   * @default 0
   */
  leaveDelay: o.number,
  /**
   * The number of milliseconds after the user stops touching an element before hiding the tooltip.
   * @default 1500
   */
  leaveTouchDelay: o.number,
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onClose: o.func,
  /**
   * Callback fired when the component requests to be open.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onOpen: o.func,
  /**
   * If `true`, the component is shown.
   */
  open: o.bool,
  /**
   * Tooltip placement.
   * @default 'bottom'
   */
  placement: o.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * The component used for the popper.
   * @default Popper
   */
  PopperComponent: o.elementType,
  /**
   * Props applied to the [`Popper`](https://mui.com/material-ui/api/popper/) element.
   * @default {}
   */
  PopperProps: o.object,
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slotProps: o.shape({
    arrow: o.object,
    popper: o.object,
    tooltip: o.object,
    transition: o.object
  }),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: o.shape({
    arrow: o.elementType,
    popper: o.elementType,
    tooltip: o.elementType,
    transition: o.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: o.oneOfType([o.arrayOf(o.oneOfType([o.func, o.object, o.bool])), o.func, o.object]),
  /**
   * Tooltip title. Zero-length titles string, undefined, null and false are never displayed.
   */
  title: o.node,
  /**
   * The component used for the transition.
   * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Grow
   */
  TransitionComponent: o.elementType,
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   */
  TransitionProps: o.object
});
export {
  go as T,
  lo as g,
  p as t
};
