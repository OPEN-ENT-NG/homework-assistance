import { type TreeNode } from "@edifice-ui/react";
import { IFolder } from "edifice-ts-client";
export declare function findNodeById(data: TreeNode, id: string): TreeNode | undefined;
export declare function addNode(node: TreeNode, { parentId, newFolder }: {
    parentId: string;
    newFolder: IFolder;
}): TreeNode;
export declare function arrayUnique<T>(array: T[]): T[];
export declare function deleteNode(node: TreeNode, { folders }: {
    folders: string[];
}): TreeNode;
export declare const findParentNode: (parentNode: TreeNode, childId: string) => TreeNode | undefined;
export declare function getAncestors(data: TreeNode, folderId: string): string[];
export declare function hasChildren(folderId: string, data: TreeNode): boolean;
export declare function modifyNode(data: TreeNode, callback: (node: TreeNode, parent?: TreeNode) => TreeNode | undefined): TreeNode;
export declare function moveNode(node: TreeNode, { destinationId, folders }: {
    destinationId: string;
    folders: string[];
}): TreeNode;
export declare const wrapTreeNode: (treeNode: TreeNode, folders: IFolder[] | undefined, parentId: string) => TreeNode;
export declare function updateNode(node: TreeNode, { folderId, newFolder }: {
    folderId: string;
    newFolder: IFolder;
}): TreeNode;
export declare class TreeNodeFolderWrapper implements TreeNode {
    readonly folder: IFolder;
    constructor(folder: IFolder);
    readonly id: string;
    readonly name: string;
    readonly childNumber: number;
    section: boolean;
    readonly children: TreeNode[];
}
