import * as m from "react";
import { H as S, I as P, L as c, G as R, P as e, n as x } from "./identifier-B7MO0PvI.js";
import { S as $ } from "./SwitchBase-DBnju71w.js";
import { c as u } from "./createSvgIcon-BS0Qe85N.js";
import { jsx as s } from "react/jsx-runtime";
import { s as B, r as w, u as M, c as T } from "./DefaultPropsProvider-BYFwNPLt.js";
import { m as j } from "./memoTheme-CqfvfBST.js";
import { c as z } from "./createSimplePaletteValueFilter-B7--0ryQ.js";
import { r as H } from "./refType-BqQbA6de.js";
const V = u(/* @__PURE__ */ s("path", {
  d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
}), "CheckBoxOutlineBlank"), N = u(/* @__PURE__ */ s("path", {
  d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
}), "CheckBox"), E = u(/* @__PURE__ */ s("path", {
  d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
}), "IndeterminateCheckBox");
function U(o) {
  return S("MuiCheckbox", o);
}
const f = P("MuiCheckbox", ["root", "checked", "disabled", "indeterminate", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium"]), F = (o) => {
  const {
    classes: t,
    indeterminate: a,
    color: n,
    size: i
  } = o, l = {
    root: ["root", a && "indeterminate", `color${c(n)}`, `size${c(i)}`]
  }, p = T(l, U, t);
  return {
    ...t,
    // forward the disabled and checked classes to the SwitchBase
    ...p
  };
}, L = B($, {
  shouldForwardProp: (o) => w(o) || o === "classes",
  name: "MuiCheckbox",
  slot: "Root",
  overridesResolver: (o, t) => {
    const {
      ownerState: a
    } = o;
    return [t.root, a.indeterminate && t.indeterminate, t[`size${c(a.size)}`], a.color !== "default" && t[`color${c(a.color)}`]];
  }
})(j(({
  theme: o
}) => ({
  color: (o.vars || o).palette.text.secondary,
  variants: [{
    props: {
      color: "default",
      disableRipple: !1
    },
    style: {
      "&:hover": {
        backgroundColor: o.vars ? `rgba(${o.vars.palette.action.activeChannel} / ${o.vars.palette.action.hoverOpacity})` : x(o.palette.action.active, o.palette.action.hoverOpacity)
      }
    }
  }, ...Object.entries(o.palette).filter(z()).map(([t]) => ({
    props: {
      color: t,
      disableRipple: !1
    },
    style: {
      "&:hover": {
        backgroundColor: o.vars ? `rgba(${o.vars.palette[t].mainChannel} / ${o.vars.palette.action.hoverOpacity})` : x(o.palette[t].main, o.palette.action.hoverOpacity)
      }
    }
  })), ...Object.entries(o.palette).filter(z()).map(([t]) => ({
    props: {
      color: t
    },
    style: {
      [`&.${f.checked}, &.${f.indeterminate}`]: {
        color: (o.vars || o).palette[t].main
      },
      [`&.${f.disabled}`]: {
        color: (o.vars || o).palette.action.disabled
      }
    }
  })), {
    // Should be last to override other colors
    props: {
      disableRipple: !1
    },
    style: {
      // Reset on touch devices, it doesn't add specificity
      "&:hover": {
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }
    }
  }]
}))), D = /* @__PURE__ */ s(N, {}), q = /* @__PURE__ */ s(V, {}), G = /* @__PURE__ */ s(E, {}), _ = /* @__PURE__ */ m.forwardRef(function(t, a) {
  const n = M({
    props: t,
    name: "MuiCheckbox"
  }), {
    checkedIcon: i = D,
    color: l = "primary",
    icon: p = q,
    indeterminate: r = !1,
    indeterminateIcon: b = G,
    inputProps: I,
    size: d = "medium",
    disableRipple: h = !1,
    className: g,
    ...O
  } = n, v = r ? b : p, C = r ? b : i, k = {
    ...n,
    disableRipple: h,
    color: l,
    indeterminate: r,
    size: d
  }, y = F(k);
  return /* @__PURE__ */ s(L, {
    type: "checkbox",
    inputProps: {
      "data-indeterminate": r,
      ...I
    },
    icon: /* @__PURE__ */ m.cloneElement(v, {
      fontSize: v.props.fontSize ?? d
    }),
    checkedIcon: /* @__PURE__ */ m.cloneElement(C, {
      fontSize: C.props.fontSize ?? d
    }),
    ownerState: k,
    ref: a,
    className: R(y.root, g),
    disableRipple: h,
    ...O,
    classes: y
  });
});
process.env.NODE_ENV !== "production" && (_.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the component is checked.
   */
  checked: e.bool,
  /**
   * The icon to display when the component is checked.
   * @default <CheckBoxIcon />
   */
  checkedIcon: e.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: e.object,
  /**
   * @ignore
   */
  className: e.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: e.oneOfType([e.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), e.string]),
  /**
   * The default checked state. Use when the component is not controlled.
   */
  defaultChecked: e.bool,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: e.bool,
  /**
   * If `true`, the ripple effect is disabled.
   * @default false
   */
  disableRipple: e.bool,
  /**
   * The icon to display when the component is unchecked.
   * @default <CheckBoxOutlineBlankIcon />
   */
  icon: e.node,
  /**
   * The id of the `input` element.
   */
  id: e.string,
  /**
   * If `true`, the component appears indeterminate.
   * This does not set the native input element to indeterminate due
   * to inconsistent behavior across browsers.
   * However, we set a `data-indeterminate` attribute on the `input`.
   * @default false
   */
  indeterminate: e.bool,
  /**
   * The icon to display when the component is indeterminate.
   * @default <IndeterminateCheckBoxIcon />
   */
  indeterminateIcon: e.node,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: e.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: H,
  /**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: e.func,
  /**
   * If `true`, the `input` element is required.
   * @default false
   */
  required: e.bool,
  /**
   * The size of the component.
   * `small` is equivalent to the dense checkbox styling.
   * @default 'medium'
   */
  size: e.oneOfType([e.oneOf(["medium", "small"]), e.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: e.oneOfType([e.arrayOf(e.oneOfType([e.func, e.object, e.bool])), e.func, e.object]),
  /**
   * The value of the component. The DOM API casts this to a string.
   * The browser uses "on" as the default value.
   */
  value: e.any
});
export {
  _ as C,
  f as c,
  U as g
};
