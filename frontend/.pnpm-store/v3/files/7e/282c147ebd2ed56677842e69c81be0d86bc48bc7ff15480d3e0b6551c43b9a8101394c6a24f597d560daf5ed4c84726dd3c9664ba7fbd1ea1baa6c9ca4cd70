import { jsx as P, jsxs as ve } from "react/jsx-runtime";
import { r as Bo } from "./fr-Djc-bU-B.js";
import { _ as g, B as Lt, T as Tn } from "./ButtonBase-z74SMnd9.js";
import { _ as jo, a as se } from "./TransitionGroupContext-DMJLhY9-.js";
import * as m from "react";
import sn from "react";
import { P as t, H as me, I as he, L as ce, G as pe, n as Se, a2 as Ze, _ as at } from "./identifier-B7MO0PvI.js";
import { a as zo, u as be } from "./useThemeProps-B9UyPpzT.js";
import { a as Yo } from "./useTheme-DrsmidxY.js";
import { g as Wo } from "./useThemeProps-BFeVem33.js";
import { u as Ie, r as Ve } from "./refType-BqQbA6de.js";
import { s as _, u as $t, c as ge, g as qo } from "./DefaultPropsProvider-BYFwNPLt.js";
import { T as Qe } from "./Typography-CizHc1nM.js";
import { c as Fe } from "./createSvgIcon-BS0Qe85N.js";
import { a as G } from "./useTimeout-Znm_nF2D.js";
import { u as On } from "./useTheme-CzzAEESs.js";
import { F as gt } from "./Backdrop-DcJf9G30.js";
import { a as ue, u as Ee } from "./index-yb8koCDz.js";
import { u as Ce } from "./useForkRef-C_4o__cU.js";
import { f as Uo, T as Rn, c as Ho } from "./utils-jA5a7WHN.js";
import { u as ze } from "./useControlled-BYdyS7Pn.js";
import { u as it } from "./useId-CK6Kn3Tn.js";
import { I as yt } from "./IconButton-DLcGpM1F.js";
import { i as In, F as _o } from "./FormLabel-B11aqT37.js";
import { a as Ko } from "./Select-CKsf044t.js";
import { F as Go, T as Zo } from "./TextField-DVUnQAd7.js";
import { u as vt } from "./useFormControl-CatNKXAi.js";
import { I as Vn } from "./InputAdornment-BrvfHlzv.js";
import { r as Fn } from "./resolveComponentProps-CYk57pLv.js";
import { P as Qo } from "./Popper-BSaTZXvX.js";
import { P as Xo } from "./Paper-vlsh8Nca.js";
import { G as Jo } from "./Grow-BKrOFfC1.js";
import { F as er } from "./Modal-DT240BJZ.js";
import { o as Vt } from "./ownerDocument-CUrv0DIK.js";
import { B as ut } from "./Button-Cx05eP88.js";
import { a as tr, D as nr, d as an, b as or } from "./DialogContent-B_NH_if8.js";
import { b as mt, L as rr } from "./Menu-ysG9uY3e.js";
import { i as ln } from "./isHostComponent-kiaBvYVo.js";
import { m as En } from "./memoTheme-CqfvfBST.js";
import { c as sr } from "./chainPropTypes-D9lkm76m.js";
import { e as ar } from "./elementTypeAcceptingRef-DOFWAguJ.js";
import { c as dt } from "./createSimplePaletteValueFilter-B7--0ryQ.js";
function ir(e, n, r, o, s) {
  const [a, l] = m.useState(() => s && r ? r(e).matches : o ? o(e).matches : n);
  return Ie(() => {
    if (!r)
      return;
    const c = r(e), i = () => {
      l(c.matches);
    };
    return i(), c.addEventListener("change", i), () => {
      c.removeEventListener("change", i);
    };
  }, [e, r]), a;
}
const lr = {
  ...m
}, An = lr.useSyncExternalStore;
function cr(e, n, r, o, s) {
  const a = m.useCallback(() => n, [n]), l = m.useMemo(() => {
    if (s && r)
      return () => r(e).matches;
    if (o !== null) {
      const {
        matches: d
      } = o(e);
      return () => d;
    }
    return a;
  }, [a, e, o, s, r]), [c, i] = m.useMemo(() => {
    if (r === null)
      return [a, () => () => {
      }];
    const d = r(e);
    return [() => d.matches, (p) => (d.addEventListener("change", p), () => {
      d.removeEventListener("change", p);
    })];
  }, [a, r, e]);
  return An(i, c, l);
}
function ur(e = {}) {
  const {
    themeId: n
  } = e;
  return function(o, s = {}) {
    let a = Yo();
    a && n && (a = a[n] || a);
    const l = typeof window < "u" && typeof window.matchMedia < "u", {
      defaultMatches: c = !1,
      matchMedia: i = l ? window.matchMedia : null,
      ssrMatchMedia: u = null,
      noSsr: d = !1
    } = Wo({
      name: "MuiUseMediaQuery",
      props: s,
      theme: a
    });
    process.env.NODE_ENV !== "production" && typeof o == "function" && a === null && console.error(["MUI: The `query` argument provided is invalid.", "You are providing a function without a theme in the context.", "One of the parent elements needs to use a ThemeProvider."].join(`
`));
    let p = typeof o == "function" ? o(a) : o;
    p = p.replace(/^@media( ?)/m, "");
    const w = (An !== void 0 ? cr : ir)(p, c, i, u, d);
    return process.env.NODE_ENV !== "production" && m.useDebugValue({
      query: p,
      match: w
    }), w;
  };
}
const Ln = ur(), dr = {
  border: 0,
  clip: "rect(0 0 0 0)",
  height: "1px",
  margin: "-1px",
  overflow: "hidden",
  padding: 0,
  position: "absolute",
  whiteSpace: "nowrap",
  width: "1px"
};
function pr(e, n) {
  return e.classList ? !!n && e.classList.contains(n) : (" " + (e.className.baseVal || e.className) + " ").indexOf(" " + n + " ") !== -1;
}
function fr(e, n) {
  e.classList ? e.classList.add(n) : pr(e, n) || (typeof e.className == "string" ? e.className = e.className + " " + n : e.setAttribute("class", (e.className && e.className.baseVal || "") + " " + n));
}
function cn(e, n) {
  return e.replace(new RegExp("(^|\\s)" + n + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
}
function mr(e, n) {
  e.classList ? e.classList.remove(n) : typeof e.className == "string" ? e.className = cn(e.className, n) : e.setAttribute("class", cn(e.className && e.className.baseVal || "", n));
}
var hr = function(n, r) {
  return n && r && r.split(" ").forEach(function(o) {
    return fr(n, o);
  });
}, Ft = function(n, r) {
  return n && r && r.split(" ").forEach(function(o) {
    return mr(n, o);
  });
}, Bt = /* @__PURE__ */ function(e) {
  jo(n, e);
  function n() {
    for (var o, s = arguments.length, a = new Array(s), l = 0; l < s; l++)
      a[l] = arguments[l];
    return o = e.call.apply(e, [this].concat(a)) || this, o.appliedClasses = {
      appear: {},
      enter: {},
      exit: {}
    }, o.onEnter = function(c, i) {
      var u = o.resolveArguments(c, i), d = u[0], p = u[1];
      o.removeClasses(d, "exit"), o.addClass(d, p ? "appear" : "enter", "base"), o.props.onEnter && o.props.onEnter(c, i);
    }, o.onEntering = function(c, i) {
      var u = o.resolveArguments(c, i), d = u[0], p = u[1], h = p ? "appear" : "enter";
      o.addClass(d, h, "active"), o.props.onEntering && o.props.onEntering(c, i);
    }, o.onEntered = function(c, i) {
      var u = o.resolveArguments(c, i), d = u[0], p = u[1], h = p ? "appear" : "enter";
      o.removeClasses(d, h), o.addClass(d, h, "done"), o.props.onEntered && o.props.onEntered(c, i);
    }, o.onExit = function(c) {
      var i = o.resolveArguments(c), u = i[0];
      o.removeClasses(u, "appear"), o.removeClasses(u, "enter"), o.addClass(u, "exit", "base"), o.props.onExit && o.props.onExit(c);
    }, o.onExiting = function(c) {
      var i = o.resolveArguments(c), u = i[0];
      o.addClass(u, "exit", "active"), o.props.onExiting && o.props.onExiting(c);
    }, o.onExited = function(c) {
      var i = o.resolveArguments(c), u = i[0];
      o.removeClasses(u, "exit"), o.addClass(u, "exit", "done"), o.props.onExited && o.props.onExited(c);
    }, o.resolveArguments = function(c, i) {
      return o.props.nodeRef ? [o.props.nodeRef.current, c] : [c, i];
    }, o.getClassNames = function(c) {
      var i = o.props.classNames, u = typeof i == "string", d = u && i ? i + "-" : "", p = u ? "" + d + c : i[c], h = u ? p + "-active" : i[c + "Active"], w = u ? p + "-done" : i[c + "Done"];
      return {
        baseClassName: p,
        activeClassName: h,
        doneClassName: w
      };
    }, o;
  }
  var r = n.prototype;
  return r.addClass = function(s, a, l) {
    var c = this.getClassNames(a)[l + "ClassName"], i = this.getClassNames("enter"), u = i.doneClassName;
    a === "appear" && l === "done" && u && (c += " " + u), l === "active" && s && Uo(s), c && (this.appliedClasses[a][l] = c, hr(s, c));
  }, r.removeClasses = function(s, a) {
    var l = this.appliedClasses[a], c = l.base, i = l.active, u = l.done;
    this.appliedClasses[a] = {}, c && Ft(s, c), i && Ft(s, i), u && Ft(s, u);
  }, r.render = function() {
    var s = this.props;
    s.classNames;
    var a = se(s, ["classNames"]);
    return /* @__PURE__ */ sn.createElement(Rn, g({}, a, {
      onEnter: this.onEnter,
      onEntered: this.onEntered,
      onEntering: this.onEntering,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited
    }));
  }, n;
}(sn.Component);
Bt.defaultProps = {
  classNames: ""
};
Bt.propTypes = process.env.NODE_ENV !== "production" ? g({}, Rn.propTypes, {
  /**
   * The animation classNames applied to the component as it appears, enters,
   * exits or has finished the transition. A single name can be provided, which
   * will be suffixed for each stage, e.g. `classNames="fade"` applies:
   *
   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
   *
   * A few details to note about how these classes are applied:
   *
   * 1. They are _joined_ with the ones that are already defined on the child
   *    component, so if you want to add some base styles, you can use
   *    `className` without worrying that it will be overridden.
   *
   * 2. If the transition component mounts with `in={false}`, no classes are
   *    applied yet. You might be expecting `*-exit-done`, but if you think
   *    about it, a component cannot finish exiting if it hasn't entered yet.
   *
   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
   *    allows you to define different behavior for when appearing is done and
   *    when regular entering is done, using selectors like
   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
   *    an epic entrance animation when element first appears in the DOM using
   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
   *    simply use `fade-enter-done` for defining both cases.
   *
   * Each individual classNames can also be specified independently like:
   *
   * ```js
   * classNames={{
   *  appear: 'my-appear',
   *  appearActive: 'my-active-appear',
   *  appearDone: 'my-done-appear',
   *  enter: 'my-enter',
   *  enterActive: 'my-active-enter',
   *  enterDone: 'my-done-enter',
   *  exit: 'my-exit',
   *  exitActive: 'my-active-exit',
   *  exitDone: 'my-done-exit',
   * }}
   * ```
   *
   * If you want to set these classes using CSS Modules:
   *
   * ```js
   * import styles from './styles.css';
   * ```
   *
   * you might want to use camelCase in your CSS file, that way could simply
   * spread them instead of listing them one by one:
   *
   * ```js
   * classNames={{ ...styles }}
   * ```
   *
   * @type {string | {
   *  appear?: string,
   *  appearActive?: string,
   *  appearDone?: string,
   *  enter?: string,
   *  enterActive?: string,
   *  enterDone?: string,
   *  exit?: string,
   *  exitActive?: string,
   *  exitDone?: string,
   * }}
   */
  classNames: Ho,
  /**
   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
   * applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEnter: t.func,
  /**
   * A `<Transition>` callback fired immediately after the 'enter-active' or
   * 'appear-active' class is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: t.func,
  /**
   * A `<Transition>` callback fired immediately after the 'enter' or
   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntered: t.func,
  /**
   * A `<Transition>` callback fired immediately after the 'exit' class is
   * applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */
  onExit: t.func,
  /**
   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */
  onExiting: t.func,
  /**
   * A `<Transition>` callback fired immediately after the 'exit' classes
   * are **removed** and the `exit-done` class is added to the DOM node.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */
  onExited: t.func
}) : {};
const br = Fe(/* @__PURE__ */ P("path", {
  d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
}), "Cancel");
function gr(e) {
  return me("MuiChip", e);
}
const ae = he("MuiChip", ["root", "sizeSmall", "sizeMedium", "colorDefault", "colorError", "colorInfo", "colorPrimary", "colorSecondary", "colorSuccess", "colorWarning", "disabled", "clickable", "clickableColorPrimary", "clickableColorSecondary", "deletable", "deletableColorPrimary", "deletableColorSecondary", "outlined", "filled", "outlinedPrimary", "outlinedSecondary", "filledPrimary", "filledSecondary", "avatar", "avatarSmall", "avatarMedium", "avatarColorPrimary", "avatarColorSecondary", "icon", "iconSmall", "iconMedium", "iconColorPrimary", "iconColorSecondary", "label", "labelSmall", "labelMedium", "deleteIcon", "deleteIconSmall", "deleteIconMedium", "deleteIconColorPrimary", "deleteIconColorSecondary", "deleteIconOutlinedColorPrimary", "deleteIconOutlinedColorSecondary", "deleteIconFilledColorPrimary", "deleteIconFilledColorSecondary", "focusVisible"]), yr = (e) => {
  const {
    classes: n,
    disabled: r,
    size: o,
    color: s,
    iconColor: a,
    onDelete: l,
    clickable: c,
    variant: i
  } = e, u = {
    root: ["root", i, r && "disabled", `size${ce(o)}`, `color${ce(s)}`, c && "clickable", c && `clickableColor${ce(s)}`, l && "deletable", l && `deletableColor${ce(s)}`, `${i}${ce(s)}`],
    label: ["label", `label${ce(o)}`],
    avatar: ["avatar", `avatar${ce(o)}`, `avatarColor${ce(s)}`],
    icon: ["icon", `icon${ce(o)}`, `iconColor${ce(a)}`],
    deleteIcon: ["deleteIcon", `deleteIcon${ce(o)}`, `deleteIconColor${ce(s)}`, `deleteIcon${ce(i)}Color${ce(s)}`]
  };
  return ge(u, gr, n);
}, vr = _("div", {
  name: "MuiChip",
  slot: "Root",
  overridesResolver: (e, n) => {
    const {
      ownerState: r
    } = e, {
      color: o,
      iconColor: s,
      clickable: a,
      onDelete: l,
      size: c,
      variant: i
    } = r;
    return [{
      [`& .${ae.avatar}`]: n.avatar
    }, {
      [`& .${ae.avatar}`]: n[`avatar${ce(c)}`]
    }, {
      [`& .${ae.avatar}`]: n[`avatarColor${ce(o)}`]
    }, {
      [`& .${ae.icon}`]: n.icon
    }, {
      [`& .${ae.icon}`]: n[`icon${ce(c)}`]
    }, {
      [`& .${ae.icon}`]: n[`iconColor${ce(s)}`]
    }, {
      [`& .${ae.deleteIcon}`]: n.deleteIcon
    }, {
      [`& .${ae.deleteIcon}`]: n[`deleteIcon${ce(c)}`]
    }, {
      [`& .${ae.deleteIcon}`]: n[`deleteIconColor${ce(o)}`]
    }, {
      [`& .${ae.deleteIcon}`]: n[`deleteIcon${ce(i)}Color${ce(o)}`]
    }, n.root, n[`size${ce(c)}`], n[`color${ce(o)}`], a && n.clickable, a && o !== "default" && n[`clickableColor${ce(o)})`], l && n.deletable, l && o !== "default" && n[`deletableColor${ce(o)}`], n[i], n[`${i}${ce(o)}`]];
  }
})(En(({
  theme: e
}) => {
  const n = e.palette.mode === "light" ? e.palette.grey[700] : e.palette.grey[300];
  return {
    maxWidth: "100%",
    fontFamily: e.typography.fontFamily,
    fontSize: e.typography.pxToRem(13),
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    height: 32,
    color: (e.vars || e).palette.text.primary,
    backgroundColor: (e.vars || e).palette.action.selected,
    borderRadius: 32 / 2,
    whiteSpace: "nowrap",
    transition: e.transitions.create(["background-color", "box-shadow"]),
    // reset cursor explicitly in case ButtonBase is used
    cursor: "unset",
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    textDecoration: "none",
    border: 0,
    // Remove `button` border
    padding: 0,
    // Remove `button` padding
    verticalAlign: "middle",
    boxSizing: "border-box",
    [`&.${ae.disabled}`]: {
      opacity: (e.vars || e).palette.action.disabledOpacity,
      pointerEvents: "none"
    },
    [`& .${ae.avatar}`]: {
      marginLeft: 5,
      marginRight: -6,
      width: 24,
      height: 24,
      color: e.vars ? e.vars.palette.Chip.defaultAvatarColor : n,
      fontSize: e.typography.pxToRem(12)
    },
    [`& .${ae.avatarColorPrimary}`]: {
      color: (e.vars || e).palette.primary.contrastText,
      backgroundColor: (e.vars || e).palette.primary.dark
    },
    [`& .${ae.avatarColorSecondary}`]: {
      color: (e.vars || e).palette.secondary.contrastText,
      backgroundColor: (e.vars || e).palette.secondary.dark
    },
    [`& .${ae.avatarSmall}`]: {
      marginLeft: 4,
      marginRight: -4,
      width: 18,
      height: 18,
      fontSize: e.typography.pxToRem(10)
    },
    [`& .${ae.icon}`]: {
      marginLeft: 5,
      marginRight: -6
    },
    [`& .${ae.deleteIcon}`]: {
      WebkitTapHighlightColor: "transparent",
      color: e.vars ? `rgba(${e.vars.palette.text.primaryChannel} / 0.26)` : Se(e.palette.text.primary, 0.26),
      fontSize: 22,
      cursor: "pointer",
      margin: "0 5px 0 -6px",
      "&:hover": {
        color: e.vars ? `rgba(${e.vars.palette.text.primaryChannel} / 0.4)` : Se(e.palette.text.primary, 0.4)
      }
    },
    variants: [{
      props: {
        size: "small"
      },
      style: {
        height: 24,
        [`& .${ae.icon}`]: {
          fontSize: 18,
          marginLeft: 4,
          marginRight: -4
        },
        [`& .${ae.deleteIcon}`]: {
          fontSize: 16,
          marginRight: 4,
          marginLeft: -4
        }
      }
    }, ...Object.entries(e.palette).filter(dt(["contrastText"])).map(([r]) => ({
      props: {
        color: r
      },
      style: {
        backgroundColor: (e.vars || e).palette[r].main,
        color: (e.vars || e).palette[r].contrastText,
        [`& .${ae.deleteIcon}`]: {
          color: e.vars ? `rgba(${e.vars.palette[r].contrastTextChannel} / 0.7)` : Se(e.palette[r].contrastText, 0.7),
          "&:hover, &:active": {
            color: (e.vars || e).palette[r].contrastText
          }
        }
      }
    })), {
      props: (r) => r.iconColor === r.color,
      style: {
        [`& .${ae.icon}`]: {
          color: e.vars ? e.vars.palette.Chip.defaultIconColor : n
        }
      }
    }, {
      props: (r) => r.iconColor === r.color && r.color !== "default",
      style: {
        [`& .${ae.icon}`]: {
          color: "inherit"
        }
      }
    }, {
      props: {
        onDelete: !0
      },
      style: {
        [`&.${ae.focusVisible}`]: {
          backgroundColor: e.vars ? `rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))` : Se(e.palette.action.selected, e.palette.action.selectedOpacity + e.palette.action.focusOpacity)
        }
      }
    }, ...Object.entries(e.palette).filter(dt(["dark"])).map(([r]) => ({
      props: {
        color: r,
        onDelete: !0
      },
      style: {
        [`&.${ae.focusVisible}`]: {
          background: (e.vars || e).palette[r].dark
        }
      }
    })), {
      props: {
        clickable: !0
      },
      style: {
        userSelect: "none",
        WebkitTapHighlightColor: "transparent",
        cursor: "pointer",
        "&:hover": {
          backgroundColor: e.vars ? `rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))` : Se(e.palette.action.selected, e.palette.action.selectedOpacity + e.palette.action.hoverOpacity)
        },
        [`&.${ae.focusVisible}`]: {
          backgroundColor: e.vars ? `rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))` : Se(e.palette.action.selected, e.palette.action.selectedOpacity + e.palette.action.focusOpacity)
        },
        "&:active": {
          boxShadow: (e.vars || e).shadows[1]
        }
      }
    }, ...Object.entries(e.palette).filter(dt(["dark"])).map(([r]) => ({
      props: {
        color: r,
        clickable: !0
      },
      style: {
        [`&:hover, &.${ae.focusVisible}`]: {
          backgroundColor: (e.vars || e).palette[r].dark
        }
      }
    })), {
      props: {
        variant: "outlined"
      },
      style: {
        backgroundColor: "transparent",
        border: e.vars ? `1px solid ${e.vars.palette.Chip.defaultBorder}` : `1px solid ${e.palette.mode === "light" ? e.palette.grey[400] : e.palette.grey[700]}`,
        [`&.${ae.clickable}:hover`]: {
          backgroundColor: (e.vars || e).palette.action.hover
        },
        [`&.${ae.focusVisible}`]: {
          backgroundColor: (e.vars || e).palette.action.focus
        },
        [`& .${ae.avatar}`]: {
          marginLeft: 4
        },
        [`& .${ae.avatarSmall}`]: {
          marginLeft: 2
        },
        [`& .${ae.icon}`]: {
          marginLeft: 4
        },
        [`& .${ae.iconSmall}`]: {
          marginLeft: 2
        },
        [`& .${ae.deleteIcon}`]: {
          marginRight: 5
        },
        [`& .${ae.deleteIconSmall}`]: {
          marginRight: 3
        }
      }
    }, ...Object.entries(e.palette).filter(dt()).map(([r]) => ({
      props: {
        variant: "outlined",
        color: r
      },
      style: {
        color: (e.vars || e).palette[r].main,
        border: `1px solid ${e.vars ? `rgba(${e.vars.palette[r].mainChannel} / 0.7)` : Se(e.palette[r].main, 0.7)}`,
        [`&.${ae.clickable}:hover`]: {
          backgroundColor: e.vars ? `rgba(${e.vars.palette[r].mainChannel} / ${e.vars.palette.action.hoverOpacity})` : Se(e.palette[r].main, e.palette.action.hoverOpacity)
        },
        [`&.${ae.focusVisible}`]: {
          backgroundColor: e.vars ? `rgba(${e.vars.palette[r].mainChannel} / ${e.vars.palette.action.focusOpacity})` : Se(e.palette[r].main, e.palette.action.focusOpacity)
        },
        [`& .${ae.deleteIcon}`]: {
          color: e.vars ? `rgba(${e.vars.palette[r].mainChannel} / 0.7)` : Se(e.palette[r].main, 0.7),
          "&:hover, &:active": {
            color: (e.vars || e).palette[r].main
          }
        }
      }
    }))]
  };
})), Dr = _("span", {
  name: "MuiChip",
  slot: "Label",
  overridesResolver: (e, n) => {
    const {
      ownerState: r
    } = e, {
      size: o
    } = r;
    return [n.label, n[`label${ce(o)}`]];
  }
})({
  overflow: "hidden",
  textOverflow: "ellipsis",
  paddingLeft: 12,
  paddingRight: 12,
  whiteSpace: "nowrap",
  variants: [{
    props: {
      variant: "outlined"
    },
    style: {
      paddingLeft: 11,
      paddingRight: 11
    }
  }, {
    props: {
      size: "small"
    },
    style: {
      paddingLeft: 8,
      paddingRight: 8
    }
  }, {
    props: {
      size: "small",
      variant: "outlined"
    },
    style: {
      paddingLeft: 7,
      paddingRight: 7
    }
  }]
});
function un(e) {
  return e.key === "Backspace" || e.key === "Delete";
}
const Nn = /* @__PURE__ */ m.forwardRef(function(n, r) {
  const o = $t({
    props: n,
    name: "MuiChip"
  }), {
    avatar: s,
    className: a,
    clickable: l,
    color: c = "default",
    component: i,
    deleteIcon: u,
    disabled: d = !1,
    icon: p,
    label: h,
    onClick: w,
    onDelete: b,
    onKeyDown: D,
    onKeyUp: f,
    size: v = "medium",
    variant: y = "filled",
    tabIndex: S,
    skipFocusWhenDisabled: C = !1,
    // TODO v6: Rename to `focusableWhenDisabled`.
    ...O
  } = o, E = m.useRef(null), V = Ce(E, r), x = (K) => {
    K.stopPropagation(), b && b(K);
  }, $ = (K) => {
    K.currentTarget === K.target && un(K) && K.preventDefault(), D && D(K);
  }, B = (K) => {
    K.currentTarget === K.target && b && un(K) && b(K), f && f(K);
  }, R = l !== !1 && w ? !0 : l, F = R || b ? Lt : i || "div", L = {
    ...o,
    component: F,
    disabled: d,
    size: v,
    color: c,
    iconColor: /* @__PURE__ */ m.isValidElement(p) && p.props.color || c,
    onDelete: !!b,
    clickable: R,
    variant: y
  }, M = yr(L), I = F === Lt ? {
    component: i || "div",
    focusVisibleClassName: M.focusVisible,
    ...b && {
      disableRipple: !0
    }
  } : {};
  let A = null;
  b && (A = u && /* @__PURE__ */ m.isValidElement(u) ? /* @__PURE__ */ m.cloneElement(u, {
    className: pe(u.props.className, M.deleteIcon),
    onClick: x
  }) : /* @__PURE__ */ P(br, {
    className: pe(M.deleteIcon),
    onClick: x
  }));
  let Q = null;
  s && /* @__PURE__ */ m.isValidElement(s) && (Q = /* @__PURE__ */ m.cloneElement(s, {
    className: pe(M.avatar, s.props.className)
  }));
  let H = null;
  return p && /* @__PURE__ */ m.isValidElement(p) && (H = /* @__PURE__ */ m.cloneElement(p, {
    className: pe(M.icon, p.props.className)
  })), process.env.NODE_ENV !== "production" && Q && H && console.error("MUI: The Chip component can not handle the avatar and the icon prop at the same time. Pick one."), /* @__PURE__ */ ve(vr, {
    as: F,
    className: pe(M.root, a),
    disabled: R && d ? !0 : void 0,
    onClick: w,
    onKeyDown: $,
    onKeyUp: B,
    ref: V,
    tabIndex: C && d ? -1 : S,
    ownerState: L,
    ...I,
    ...O,
    children: [Q || H, /* @__PURE__ */ P(Dr, {
      className: pe(M.label),
      ownerState: L,
      children: h
    }), A]
  });
});
process.env.NODE_ENV !== "production" && (Nn.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The Avatar element to display.
   */
  avatar: t.element,
  /**
   * This prop isn't supported.
   * Use the `component` prop if you need to change the children structure.
   */
  children: zo,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, the chip will appear clickable, and will raise when pressed,
   * even if the onClick prop is not defined.
   * If `false`, the chip will not appear clickable, even if onClick prop is defined.
   * This can be used, for example,
   * along with the component prop to indicate an anchor Chip is clickable.
   * Note: this controls the UI and does not affect the onClick event.
   */
  clickable: t.bool,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'default'
   */
  color: t.oneOfType([t.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Override the default delete icon element. Shown only if `onDelete` is set.
   */
  deleteIcon: t.element,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * Icon element.
   */
  icon: t.element,
  /**
   * The content of the component.
   */
  label: t.node,
  /**
   * @ignore
   */
  onClick: t.func,
  /**
   * Callback fired when the delete icon is clicked.
   * If set, the delete icon will be shown.
   */
  onDelete: t.func,
  /**
   * @ignore
   */
  onKeyDown: t.func,
  /**
   * @ignore
   */
  onKeyUp: t.func,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["medium", "small"]), t.string]),
  /**
   * If `true`, allows the disabled chip to escape focus.
   * If `false`, allows the disabled chip to receive focus.
   * @default false
   */
  skipFocusWhenDisabled: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * @ignore
   */
  tabIndex: t.number,
  /**
   * The variant to use.
   * @default 'filled'
   */
  variant: t.oneOfType([t.oneOf(["filled", "outlined"]), t.string])
});
function wr(e) {
  return me("MuiListItem", e);
}
const _c = he("MuiListItem", ["root", "container", "dense", "alignItemsFlexStart", "divider", "gutters", "padding", "secondaryAction"]);
function Kc(e) {
  return me("MuiListItemButton", e);
}
const Sr = he("MuiListItemButton", ["root", "focusVisible", "dense", "alignItemsFlexStart", "disabled", "divider", "gutters", "selected"]);
function Cr(e) {
  return me("MuiListItemSecondaryAction", e);
}
he("MuiListItemSecondaryAction", ["root", "disableGutters"]);
const xr = (e) => {
  const {
    disableGutters: n,
    classes: r
  } = e;
  return ge({
    root: ["root", n && "disableGutters"]
  }, Cr, r);
}, Pr = _("div", {
  name: "MuiListItemSecondaryAction",
  slot: "Root",
  overridesResolver: (e, n) => {
    const {
      ownerState: r
    } = e;
    return [n.root, r.disableGutters && n.disableGutters];
  }
})({
  position: "absolute",
  right: 16,
  top: "50%",
  transform: "translateY(-50%)",
  variants: [{
    props: ({
      ownerState: e
    }) => e.disableGutters,
    style: {
      right: 0
    }
  }]
}), jt = /* @__PURE__ */ m.forwardRef(function(n, r) {
  const o = $t({
    props: n,
    name: "MuiListItemSecondaryAction"
  }), {
    className: s,
    ...a
  } = o, l = m.useContext(mt), c = {
    ...o,
    disableGutters: l.disableGutters
  }, i = xr(c);
  return /* @__PURE__ */ P(Pr, {
    className: pe(i.root, s),
    ownerState: c,
    ref: r,
    ...a
  });
});
process.env.NODE_ENV !== "production" && (jt.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally an `IconButton` or selection control.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
jt.muiName = "ListItemSecondaryAction";
const Mr = (e, n) => {
  const {
    ownerState: r
  } = e;
  return [n.root, r.dense && n.dense, r.alignItems === "flex-start" && n.alignItemsFlexStart, r.divider && n.divider, !r.disableGutters && n.gutters, !r.disablePadding && n.padding, r.hasSecondaryAction && n.secondaryAction];
}, kr = (e) => {
  const {
    alignItems: n,
    classes: r,
    dense: o,
    disableGutters: s,
    disablePadding: a,
    divider: l,
    hasSecondaryAction: c
  } = e;
  return ge({
    root: ["root", o && "dense", !s && "gutters", !a && "padding", l && "divider", n === "flex-start" && "alignItemsFlexStart", c && "secondaryAction"],
    container: ["container"]
  }, wr, r);
}, Tr = _("div", {
  name: "MuiListItem",
  slot: "Root",
  overridesResolver: Mr
})(En(({
  theme: e
}) => ({
  display: "flex",
  justifyContent: "flex-start",
  alignItems: "center",
  position: "relative",
  textDecoration: "none",
  width: "100%",
  boxSizing: "border-box",
  textAlign: "left",
  variants: [{
    props: ({
      ownerState: n
    }) => !n.disablePadding,
    style: {
      paddingTop: 8,
      paddingBottom: 8
    }
  }, {
    props: ({
      ownerState: n
    }) => !n.disablePadding && n.dense,
    style: {
      paddingTop: 4,
      paddingBottom: 4
    }
  }, {
    props: ({
      ownerState: n
    }) => !n.disablePadding && !n.disableGutters,
    style: {
      paddingLeft: 16,
      paddingRight: 16
    }
  }, {
    props: ({
      ownerState: n
    }) => !n.disablePadding && !!n.secondaryAction,
    style: {
      // Add some space to avoid collision as `ListItemSecondaryAction`
      // is absolutely positioned.
      paddingRight: 48
    }
  }, {
    props: ({
      ownerState: n
    }) => !!n.secondaryAction,
    style: {
      [`& > .${Sr.root}`]: {
        paddingRight: 48
      }
    }
  }, {
    props: {
      alignItems: "flex-start"
    },
    style: {
      alignItems: "flex-start"
    }
  }, {
    props: ({
      ownerState: n
    }) => n.divider,
    style: {
      borderBottom: `1px solid ${(e.vars || e).palette.divider}`,
      backgroundClip: "padding-box"
    }
  }, {
    props: ({
      ownerState: n
    }) => n.button,
    style: {
      transition: e.transitions.create("background-color", {
        duration: e.transitions.duration.shortest
      }),
      "&:hover": {
        textDecoration: "none",
        backgroundColor: (e.vars || e).palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }
    }
  }, {
    props: ({
      ownerState: n
    }) => n.hasSecondaryAction,
    style: {
      // Add some space to avoid collision as `ListItemSecondaryAction`
      // is absolutely positioned.
      paddingRight: 48
    }
  }]
}))), Or = _("li", {
  name: "MuiListItem",
  slot: "Container",
  overridesResolver: (e, n) => n.container
})({
  position: "relative"
}), $n = /* @__PURE__ */ m.forwardRef(function(n, r) {
  const o = $t({
    props: n,
    name: "MuiListItem"
  }), {
    alignItems: s = "center",
    children: a,
    className: l,
    component: c,
    components: i = {},
    componentsProps: u = {},
    ContainerComponent: d = "li",
    ContainerProps: {
      className: p,
      ...h
    } = {},
    dense: w = !1,
    disableGutters: b = !1,
    disablePadding: D = !1,
    divider: f = !1,
    secondaryAction: v,
    slotProps: y = {},
    slots: S = {},
    ...C
  } = o, O = m.useContext(mt), E = m.useMemo(() => ({
    dense: w || O.dense || !1,
    alignItems: s,
    disableGutters: b
  }), [s, O.dense, w, b]), V = m.useRef(null), x = m.Children.toArray(a), $ = x.length && In(x[x.length - 1], ["ListItemSecondaryAction"]), B = {
    ...o,
    alignItems: s,
    dense: E.dense,
    disableGutters: b,
    disablePadding: D,
    divider: f,
    hasSecondaryAction: $
  }, R = kr(B), F = Ce(V, r), L = S.root || i.Root || Tr, M = y.root || u.root || {}, I = {
    className: pe(R.root, M.className, l),
    ...C
  };
  let A = c || "li";
  return $ ? (A = !I.component && !c ? "div" : A, d === "li" && (A === "li" ? A = "div" : I.component === "li" && (I.component = "div")), /* @__PURE__ */ P(mt.Provider, {
    value: E,
    children: /* @__PURE__ */ ve(Or, {
      as: d,
      className: pe(R.container, p),
      ref: F,
      ownerState: B,
      ...h,
      children: [/* @__PURE__ */ P(L, {
        ...M,
        ...!ln(L) && {
          as: A,
          ownerState: {
            ...B,
            ...M.ownerState
          }
        },
        ...I,
        children: x
      }), x.pop()]
    })
  })) : /* @__PURE__ */ P(mt.Provider, {
    value: E,
    children: /* @__PURE__ */ ve(L, {
      ...M,
      as: A,
      ref: F,
      ...!ln(L) && {
        ownerState: {
          ...B,
          ...M.ownerState
        }
      },
      ...I,
      children: [x, v && /* @__PURE__ */ P(jt, {
        children: v
      })]
    })
  });
});
process.env.NODE_ENV !== "production" && ($n.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Defines the `align-items` style property.
   * @default 'center'
   */
  alignItems: t.oneOf(["center", "flex-start"]),
  /**
   * The content of the component if a `ListItemSecondaryAction` is used it must
   * be the last child.
   */
  children: sr(t.node, (e) => {
    const n = m.Children.toArray(e.children);
    let r = -1;
    for (let o = n.length - 1; o >= 0; o -= 1) {
      const s = n[o];
      if (In(s, ["ListItemSecondaryAction"])) {
        r = o;
        break;
      }
    }
    return r !== -1 && r !== n.length - 1 ? new Error("MUI: You used an element after ListItemSecondaryAction. For ListItem to detect that it has a secondary action you must pass it as the last child to ListItem.") : null;
  }),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The components used for each slot inside.
   *
   * @deprecated Use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   * @default {}
   */
  components: t.shape({
    Root: t.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated Use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   * @default {}
   */
  componentsProps: t.shape({
    root: t.object
  }),
  /**
   * The container component used when a `ListItemSecondaryAction` is the last child.
   * @default 'li'
   * @deprecated Use the `component` or `slots.root` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  ContainerComponent: ar,
  /**
   * Props applied to the container component if used.
   * @default {}
   * @deprecated Use the `slotProps.root` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  ContainerProps: t.object,
  /**
   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
   * The prop defaults to the value inherited from the parent List component.
   * @default false
   */
  dense: t.bool,
  /**
   * If `true`, the left and right padding is removed.
   * @default false
   */
  disableGutters: t.bool,
  /**
   * If `true`, all padding is removed.
   * @default false
   */
  disablePadding: t.bool,
  /**
   * If `true`, a 1px light border is added to the bottom of the list item.
   * @default false
   */
  divider: t.bool,
  /**
   * The element to display at the end of ListItem.
   */
  secondaryAction: t.node,
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @default {}
   */
  slotProps: t.shape({
    root: t.object
  }),
  /**
   * The components used for each slot inside.
   *
   * @default {}
   */
  slots: t.shape({
    root: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
var Rr = Bo();
const we = /* @__PURE__ */ Ze(Rr);
var Bn = { exports: {} };
(function(e, n) {
  (function(r, o) {
    e.exports = o();
  })(at, function() {
    var r = "week", o = "year";
    return function(s, a, l) {
      var c = a.prototype;
      c.week = function(i) {
        if (i === void 0 && (i = null), i !== null) return this.add(7 * (i - this.week()), "day");
        var u = this.$locale().yearStart || 1;
        if (this.month() === 11 && this.date() > 25) {
          var d = l(this).startOf(o).add(1, o).date(u), p = l(this).endOf(r);
          if (d.isBefore(p)) return 1;
        }
        var h = l(this).startOf(o).date(u).startOf(r).subtract(1, "millisecond"), w = this.diff(h, r, !0);
        return w < 0 ? l(this).startOf("week").week() : Math.ceil(w);
      }, c.weeks = function(i) {
        return i === void 0 && (i = null), this.week(i);
      };
    };
  });
})(Bn);
var Ir = Bn.exports;
const Vr = /* @__PURE__ */ Ze(Ir);
var jn = { exports: {} };
(function(e, n) {
  (function(r, o) {
    e.exports = o();
  })(at, function() {
    var r = { LTS: "h:mm:ss A", LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" }, o = /(\[[^[]*\])|([-_:/.,()\s]+)|(A|a|Q|YYYY|YY?|ww?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g, s = /\d/, a = /\d\d/, l = /\d\d?/, c = /\d*[^-_:/,()\s\d]+/, i = {}, u = function(f) {
      return (f = +f) + (f > 68 ? 1900 : 2e3);
    }, d = function(f) {
      return function(v) {
        this[f] = +v;
      };
    }, p = [/[+-]\d\d:?(\d\d)?|Z/, function(f) {
      (this.zone || (this.zone = {})).offset = function(v) {
        if (!v || v === "Z") return 0;
        var y = v.match(/([+-]|\d\d)/g), S = 60 * y[1] + (+y[2] || 0);
        return S === 0 ? 0 : y[0] === "+" ? -S : S;
      }(f);
    }], h = function(f) {
      var v = i[f];
      return v && (v.indexOf ? v : v.s.concat(v.f));
    }, w = function(f, v) {
      var y, S = i.meridiem;
      if (S) {
        for (var C = 1; C <= 24; C += 1) if (f.indexOf(S(C, 0, v)) > -1) {
          y = C > 12;
          break;
        }
      } else y = f === (v ? "pm" : "PM");
      return y;
    }, b = { A: [c, function(f) {
      this.afternoon = w(f, !1);
    }], a: [c, function(f) {
      this.afternoon = w(f, !0);
    }], Q: [s, function(f) {
      this.month = 3 * (f - 1) + 1;
    }], S: [s, function(f) {
      this.milliseconds = 100 * +f;
    }], SS: [a, function(f) {
      this.milliseconds = 10 * +f;
    }], SSS: [/\d{3}/, function(f) {
      this.milliseconds = +f;
    }], s: [l, d("seconds")], ss: [l, d("seconds")], m: [l, d("minutes")], mm: [l, d("minutes")], H: [l, d("hours")], h: [l, d("hours")], HH: [l, d("hours")], hh: [l, d("hours")], D: [l, d("day")], DD: [a, d("day")], Do: [c, function(f) {
      var v = i.ordinal, y = f.match(/\d+/);
      if (this.day = y[0], v) for (var S = 1; S <= 31; S += 1) v(S).replace(/\[|\]/g, "") === f && (this.day = S);
    }], w: [l, d("week")], ww: [a, d("week")], M: [l, d("month")], MM: [a, d("month")], MMM: [c, function(f) {
      var v = h("months"), y = (h("monthsShort") || v.map(function(S) {
        return S.slice(0, 3);
      })).indexOf(f) + 1;
      if (y < 1) throw new Error();
      this.month = y % 12 || y;
    }], MMMM: [c, function(f) {
      var v = h("months").indexOf(f) + 1;
      if (v < 1) throw new Error();
      this.month = v % 12 || v;
    }], Y: [/[+-]?\d+/, d("year")], YY: [a, function(f) {
      this.year = u(f);
    }], YYYY: [/\d{4}/, d("year")], Z: p, ZZ: p };
    function D(f) {
      var v, y;
      v = f, y = i && i.formats;
      for (var S = (f = v.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function(B, R, F) {
        var L = F && F.toUpperCase();
        return R || y[F] || r[F] || y[L].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(M, I, A) {
          return I || A.slice(1);
        });
      })).match(o), C = S.length, O = 0; O < C; O += 1) {
        var E = S[O], V = b[E], x = V && V[0], $ = V && V[1];
        S[O] = $ ? { regex: x, parser: $ } : E.replace(/^\[|\]$/g, "");
      }
      return function(B) {
        for (var R = {}, F = 0, L = 0; F < C; F += 1) {
          var M = S[F];
          if (typeof M == "string") L += M.length;
          else {
            var I = M.regex, A = M.parser, Q = B.slice(L), H = I.exec(Q)[0];
            A.call(R, H), B = B.replace(H, "");
          }
        }
        return function(K) {
          var oe = K.afternoon;
          if (oe !== void 0) {
            var J = K.hours;
            oe ? J < 12 && (K.hours += 12) : J === 12 && (K.hours = 0), delete K.afternoon;
          }
        }(R), R;
      };
    }
    return function(f, v, y) {
      y.p.customParseFormat = !0, f && f.parseTwoDigitYear && (u = f.parseTwoDigitYear);
      var S = v.prototype, C = S.parse;
      S.parse = function(O) {
        var E = O.date, V = O.utc, x = O.args;
        this.$u = V;
        var $ = x[1];
        if (typeof $ == "string") {
          var B = x[2] === !0, R = x[3] === !0, F = B || R, L = x[2];
          R && (L = x[2]), i = this.$locale(), !B && L && (i = y.Ls[L]), this.$d = function(Q, H, K, oe) {
            try {
              if (["x", "X"].indexOf(H) > -1) return new Date((H === "X" ? 1e3 : 1) * Q);
              var J = D(H)(Q), ie = J.year, de = J.month, le = J.day, T = J.hours, q = J.minutes, W = J.seconds, N = J.milliseconds, X = J.zone, ne = J.week, te = /* @__PURE__ */ new Date(), Y = le || (ie || de ? 1 : te.getDate()), k = ie || te.getFullYear(), z = 0;
              ie && !de || (z = de > 0 ? de - 1 : te.getMonth());
              var Z, j = T || 0, ee = q || 0, U = W || 0, re = N || 0;
              return X ? new Date(Date.UTC(k, z, Y, j, ee, U, re + 60 * X.offset * 1e3)) : K ? new Date(Date.UTC(k, z, Y, j, ee, U, re)) : (Z = new Date(k, z, Y, j, ee, U, re), ne && (Z = oe(Z).week(ne).toDate()), Z);
            } catch {
              return /* @__PURE__ */ new Date("");
            }
          }(E, $, V, y), this.init(), L && L !== !0 && (this.$L = this.locale(L).$L), F && E != this.format($) && (this.$d = /* @__PURE__ */ new Date("")), i = {};
        } else if ($ instanceof Array) for (var M = $.length, I = 1; I <= M; I += 1) {
          x[1] = $[I - 1];
          var A = y.apply(this, x);
          if (A.isValid()) {
            this.$d = A.$d, this.$L = A.$L, this.init();
            break;
          }
          I === M && (this.$d = /* @__PURE__ */ new Date(""));
        }
        else C.call(this, O);
      };
    };
  });
})(jn);
var Fr = jn.exports;
const Er = /* @__PURE__ */ Ze(Fr);
var zn = { exports: {} };
(function(e, n) {
  (function(r, o) {
    e.exports = o();
  })(at, function() {
    var r = { LTS: "h:mm:ss A", LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" };
    return function(o, s, a) {
      var l = s.prototype, c = l.format;
      a.en.formats = r, l.format = function(i) {
        i === void 0 && (i = "YYYY-MM-DDTHH:mm:ssZ");
        var u = this.$locale().formats, d = function(p, h) {
          return p.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function(w, b, D) {
            var f = D && D.toUpperCase();
            return b || h[D] || r[D] || h[f].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(v, y, S) {
              return y || S.slice(1);
            });
          });
        }(i, u === void 0 ? {} : u);
        return c.call(this, d);
      };
    };
  });
})(zn);
var Ar = zn.exports;
const Lr = /* @__PURE__ */ Ze(Ar);
var Yn = { exports: {} };
(function(e, n) {
  (function(r, o) {
    e.exports = o();
  })(at, function() {
    return function(r, o, s) {
      o.prototype.isBetween = function(a, l, c, i) {
        var u = s(a), d = s(l), p = (i = i || "()")[0] === "(", h = i[1] === ")";
        return (p ? this.isAfter(u, c) : !this.isBefore(u, c)) && (h ? this.isBefore(d, c) : !this.isAfter(d, c)) || (p ? this.isBefore(u, c) : !this.isAfter(u, c)) && (h ? this.isAfter(d, c) : !this.isBefore(d, c));
      };
    };
  });
})(Yn);
var Nr = Yn.exports;
const $r = /* @__PURE__ */ Ze(Nr);
var Wn = { exports: {} };
(function(e, n) {
  (function(r, o) {
    e.exports = o();
  })(at, function() {
    return function(r, o) {
      var s = o.prototype, a = s.format;
      s.format = function(l) {
        var c = this, i = this.$locale();
        if (!this.isValid()) return a.bind(this)(l);
        var u = this.$utils(), d = (l || "YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g, function(p) {
          switch (p) {
            case "Q":
              return Math.ceil((c.$M + 1) / 3);
            case "Do":
              return i.ordinal(c.$D);
            case "gggg":
              return c.weekYear();
            case "GGGG":
              return c.isoWeekYear();
            case "wo":
              return i.ordinal(c.week(), "W");
            case "w":
            case "ww":
              return u.s(c.week(), p === "w" ? 1 : 2, "0");
            case "W":
            case "WW":
              return u.s(c.isoWeek(), p === "W" ? 1 : 2, "0");
            case "k":
            case "kk":
              return u.s(String(c.$H === 0 ? 24 : c.$H), p === "k" ? 1 : 2, "0");
            case "X":
              return Math.floor(c.$d.getTime() / 1e3);
            case "x":
              return c.$d.getTime();
            case "z":
              return "[" + c.offsetName() + "]";
            case "zzz":
              return "[" + c.offsetName("long") + "]";
            default:
              return p;
          }
        });
        return a.bind(this)(d);
      };
    };
  });
})(Wn);
var Br = Wn.exports;
const jr = /* @__PURE__ */ Ze(Br), dn = /* @__PURE__ */ new Set();
function qn(e, n = "warning") {
  if (process.env.NODE_ENV === "production")
    return;
  const r = Array.isArray(e) ? e.join(`
`) : e;
  dn.has(r) || (dn.add(r), n === "error" ? console.error(r) : console.warn(r));
}
we.extend(Lr);
we.extend(Vr);
we.extend($r);
we.extend(jr);
const zr = {
  // Year
  YY: "year",
  YYYY: {
    sectionType: "year",
    contentType: "digit",
    maxLength: 4
  },
  // Month
  M: {
    sectionType: "month",
    contentType: "digit",
    maxLength: 2
  },
  MM: "month",
  MMM: {
    sectionType: "month",
    contentType: "letter"
  },
  MMMM: {
    sectionType: "month",
    contentType: "letter"
  },
  // Day of the month
  D: {
    sectionType: "day",
    contentType: "digit",
    maxLength: 2
  },
  DD: "day",
  Do: {
    sectionType: "day",
    contentType: "digit-with-letter"
  },
  // Day of the week
  d: {
    sectionType: "weekDay",
    contentType: "digit",
    maxLength: 2
  },
  dd: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  ddd: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  dddd: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  // Meridiem
  A: "meridiem",
  a: "meridiem",
  // Hours
  H: {
    sectionType: "hours",
    contentType: "digit",
    maxLength: 2
  },
  HH: "hours",
  h: {
    sectionType: "hours",
    contentType: "digit",
    maxLength: 2
  },
  hh: "hours",
  // Minutes
  m: {
    sectionType: "minutes",
    contentType: "digit",
    maxLength: 2
  },
  mm: "minutes",
  // Seconds
  s: {
    sectionType: "seconds",
    contentType: "digit",
    maxLength: 2
  },
  ss: "seconds"
}, Yr = {
  year: "YYYY",
  month: "MMMM",
  monthShort: "MMM",
  dayOfMonth: "D",
  dayOfMonthFull: "Do",
  weekday: "dddd",
  weekdayShort: "dd",
  hours24h: "HH",
  hours12h: "hh",
  meridiem: "A",
  minutes: "mm",
  seconds: "ss",
  fullDate: "ll",
  keyboardDate: "L",
  shortDate: "MMM D",
  normalDate: "D MMMM",
  normalDateWithWeekday: "ddd, MMM D",
  fullTime: "LT",
  fullTime12h: "hh:mm A",
  fullTime24h: "HH:mm",
  keyboardDateTime: "L LT",
  keyboardDateTime12h: "L hh:mm A",
  keyboardDateTime24h: "L HH:mm"
}, Et = ["Missing UTC plugin", "To be able to use UTC or timezones, you have to enable the `utc` plugin", "Find more information on https://mui.com/x/react-date-pickers/timezone/#day-js-and-utc"].join(`
`), pn = ["Missing timezone plugin", "To be able to use timezones, you have to enable both the `utc` and the `timezone` plugin", "Find more information on https://mui.com/x/react-date-pickers/timezone/#day-js-and-timezone"].join(`
`), Wr = (e, n) => n ? (...r) => e(...r).locale(n) : e;
class qr {
  constructor({
    locale: n,
    formats: r
  } = {}) {
    this.isMUIAdapter = !0, this.isTimezoneCompatible = !0, this.lib = "dayjs", this.dayjs = void 0, this.locale = void 0, this.formats = void 0, this.escapedCharacters = {
      start: "[",
      end: "]"
    }, this.formatTokenMap = zr, this.setLocaleToValue = (o) => {
      const s = this.getCurrentLocaleCode();
      return s === o.locale() ? o : o.locale(s);
    }, this.hasUTCPlugin = () => typeof we.utc < "u", this.hasTimezonePlugin = () => typeof we.tz < "u", this.isSame = (o, s, a) => {
      const l = this.setTimezone(s, this.getTimezone(o));
      return o.format(a) === l.format(a);
    }, this.cleanTimezone = (o) => {
      switch (o) {
        case "default":
          return;
        case "system":
          return we.tz.guess();
        default:
          return o;
      }
    }, this.createSystemDate = (o) => {
      if (this.hasUTCPlugin() && this.hasTimezonePlugin()) {
        const s = we.tz.guess();
        return s !== "UTC" ? we.tz(o, s) : we(o);
      }
      return we(o);
    }, this.createUTCDate = (o) => {
      if (!this.hasUTCPlugin())
        throw new Error(Et);
      return we.utc(o);
    }, this.createTZDate = (o, s) => {
      if (!this.hasUTCPlugin())
        throw new Error(Et);
      if (!this.hasTimezonePlugin())
        throw new Error(pn);
      const a = o !== void 0 && !o.endsWith("Z");
      return we(o).tz(this.cleanTimezone(s), a);
    }, this.getLocaleFormats = () => {
      const o = we.Ls, s = this.locale || "en";
      let a = o[s];
      return a === void 0 && (process.env.NODE_ENV !== "production" && qn(["MUI X: Your locale has not been found.", "Either the locale key is not a supported one. Locales supported by dayjs are available here: https://github.com/iamkun/dayjs/tree/dev/src/locale.", "Or you forget to import the locale from 'dayjs/locale/{localeUsed}'", "fallback on English locale."]), a = o.en), a.formats;
    }, this.adjustOffset = (o) => {
      if (!this.hasTimezonePlugin())
        return o;
      const s = this.getTimezone(o);
      if (s !== "UTC") {
        const a = o.tz(this.cleanTimezone(s), !0);
        if (a.$offset === (o.$offset ?? 0))
          return o;
        o.$offset = a.$offset;
      }
      return o;
    }, this.date = (o, s = "default") => {
      if (o === null)
        return null;
      let a;
      return s === "UTC" ? a = this.createUTCDate(o) : s === "system" || s === "default" && !this.hasTimezonePlugin() ? a = this.createSystemDate(o) : a = this.createTZDate(o, s), this.locale === void 0 ? a : a.locale(this.locale);
    }, this.getInvalidDate = () => we(/* @__PURE__ */ new Date("Invalid date")), this.getTimezone = (o) => {
      var s;
      if (this.hasTimezonePlugin()) {
        const a = (s = o.$x) == null ? void 0 : s.$timezone;
        if (a)
          return a;
      }
      return this.hasUTCPlugin() && o.isUTC() ? "UTC" : "system";
    }, this.setTimezone = (o, s) => {
      if (this.getTimezone(o) === s)
        return o;
      if (s === "UTC") {
        if (!this.hasUTCPlugin())
          throw new Error(Et);
        return o.utc();
      }
      if (s === "system")
        return o.local();
      if (!this.hasTimezonePlugin()) {
        if (s === "default")
          return o;
        throw new Error(pn);
      }
      return we.tz(o, this.cleanTimezone(s));
    }, this.toJsDate = (o) => o.toDate(), this.parse = (o, s) => o === "" ? null : this.dayjs(o, s, this.locale, !0), this.getCurrentLocaleCode = () => this.locale || "en", this.is12HourCycleInCurrentLocale = () => /A|a/.test(this.getLocaleFormats().LT || ""), this.expandFormat = (o) => {
      const s = this.getLocaleFormats(), a = (l) => l.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, (c, i, u) => i || u.slice(1));
      return o.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, (l, c, i) => {
        const u = i && i.toUpperCase();
        return c || s[i] || a(s[u]);
      });
    }, this.isValid = (o) => o == null ? !1 : o.isValid(), this.format = (o, s) => this.formatByString(o, this.formats[s]), this.formatByString = (o, s) => this.dayjs(o).format(s), this.formatNumber = (o) => o, this.isEqual = (o, s) => o === null && s === null ? !0 : o === null || s === null ? !1 : o.toDate().getTime() === s.toDate().getTime(), this.isSameYear = (o, s) => this.isSame(o, s, "YYYY"), this.isSameMonth = (o, s) => this.isSame(o, s, "YYYY-MM"), this.isSameDay = (o, s) => this.isSame(o, s, "YYYY-MM-DD"), this.isSameHour = (o, s) => o.isSame(s, "hour"), this.isAfter = (o, s) => o > s, this.isAfterYear = (o, s) => this.hasUTCPlugin() ? !this.isSameYear(o, s) && o.utc() > s.utc() : o.isAfter(s, "year"), this.isAfterDay = (o, s) => this.hasUTCPlugin() ? !this.isSameDay(o, s) && o.utc() > s.utc() : o.isAfter(s, "day"), this.isBefore = (o, s) => o < s, this.isBeforeYear = (o, s) => this.hasUTCPlugin() ? !this.isSameYear(o, s) && o.utc() < s.utc() : o.isBefore(s, "year"), this.isBeforeDay = (o, s) => this.hasUTCPlugin() ? !this.isSameDay(o, s) && o.utc() < s.utc() : o.isBefore(s, "day"), this.isWithinRange = (o, [s, a]) => o >= s && o <= a, this.startOfYear = (o) => this.adjustOffset(o.startOf("year")), this.startOfMonth = (o) => this.adjustOffset(o.startOf("month")), this.startOfWeek = (o) => this.adjustOffset(this.setLocaleToValue(o).startOf("week")), this.startOfDay = (o) => this.adjustOffset(o.startOf("day")), this.endOfYear = (o) => this.adjustOffset(o.endOf("year")), this.endOfMonth = (o) => this.adjustOffset(o.endOf("month")), this.endOfWeek = (o) => this.adjustOffset(this.setLocaleToValue(o).endOf("week")), this.endOfDay = (o) => this.adjustOffset(o.endOf("day")), this.addYears = (o, s) => this.adjustOffset(s < 0 ? o.subtract(Math.abs(s), "year") : o.add(s, "year")), this.addMonths = (o, s) => this.adjustOffset(s < 0 ? o.subtract(Math.abs(s), "month") : o.add(s, "month")), this.addWeeks = (o, s) => this.adjustOffset(s < 0 ? o.subtract(Math.abs(s), "week") : o.add(s, "week")), this.addDays = (o, s) => this.adjustOffset(s < 0 ? o.subtract(Math.abs(s), "day") : o.add(s, "day")), this.addHours = (o, s) => this.adjustOffset(s < 0 ? o.subtract(Math.abs(s), "hour") : o.add(s, "hour")), this.addMinutes = (o, s) => this.adjustOffset(s < 0 ? o.subtract(Math.abs(s), "minute") : o.add(s, "minute")), this.addSeconds = (o, s) => this.adjustOffset(s < 0 ? o.subtract(Math.abs(s), "second") : o.add(s, "second")), this.getYear = (o) => o.year(), this.getMonth = (o) => o.month(), this.getDate = (o) => o.date(), this.getHours = (o) => o.hour(), this.getMinutes = (o) => o.minute(), this.getSeconds = (o) => o.second(), this.getMilliseconds = (o) => o.millisecond(), this.setYear = (o, s) => this.adjustOffset(o.set("year", s)), this.setMonth = (o, s) => this.adjustOffset(o.set("month", s)), this.setDate = (o, s) => this.adjustOffset(o.set("date", s)), this.setHours = (o, s) => this.adjustOffset(o.set("hour", s)), this.setMinutes = (o, s) => this.adjustOffset(o.set("minute", s)), this.setSeconds = (o, s) => this.adjustOffset(o.set("second", s)), this.setMilliseconds = (o, s) => this.adjustOffset(o.set("millisecond", s)), this.getDaysInMonth = (o) => o.daysInMonth(), this.getWeekArray = (o) => {
      const s = this.startOfWeek(this.startOfMonth(o)), a = this.endOfWeek(this.endOfMonth(o));
      let l = 0, c = s;
      const i = [];
      for (; c < a; ) {
        const u = Math.floor(l / 7);
        i[u] = i[u] || [], i[u].push(c), c = this.addDays(c, 1), l += 1;
      }
      return i;
    }, this.getWeekNumber = (o) => o.week(), this.getYearRange = ([o, s]) => {
      const a = this.startOfYear(o), l = this.endOfYear(s), c = [];
      let i = a;
      for (; this.isBefore(i, l); )
        c.push(i), i = this.addYears(i, 1);
      return c;
    }, this.dayjs = Wr(we, n), this.locale = n, this.formats = g({}, Yr, r), we.extend(Er);
  }
  getDayOfWeek(n) {
    return n.day() + 1;
  }
}
const Je = (e, n) => e.length !== n.length ? !1 : n.every((r) => e.includes(r)), Ur = ({
  openTo: e,
  defaultOpenTo: n,
  views: r,
  defaultViews: o
}) => {
  const s = r ?? o;
  let a;
  if (e != null)
    a = e;
  else if (s.includes(n))
    a = n;
  else if (s.length > 0)
    a = s[0];
  else
    throw new Error("MUI X: The `views` prop must contain at least one view.");
  return {
    views: s,
    openTo: a
  };
}, ht = (e, n, r) => {
  let o = n;
  return o = e.setHours(o, e.getHours(r)), o = e.setMinutes(o, e.getMinutes(r)), o = e.setSeconds(o, e.getSeconds(r)), o = e.setMilliseconds(o, e.getMilliseconds(r)), o;
}, rt = ({
  date: e,
  disableFuture: n,
  disablePast: r,
  maxDate: o,
  minDate: s,
  isDateDisabled: a,
  utils: l,
  timezone: c
}) => {
  const i = ht(l, l.date(void 0, c), e);
  r && l.isBefore(s, i) && (s = i), n && l.isAfter(o, i) && (o = i);
  let u = e, d = e;
  for (l.isBefore(e, s) && (u = s, d = null), l.isAfter(e, o) && (d && (d = o), u = null); u || d; ) {
    if (u && l.isAfter(u, o) && (u = null), d && l.isBefore(d, s) && (d = null), u) {
      if (!a(u))
        return u;
      u = l.addDays(u, 1);
    }
    if (d) {
      if (!a(d))
        return d;
      d = l.addDays(d, -1);
    }
  }
  return null;
}, Hr = (e, n) => n == null || !e.isValid(n) ? null : n, Me = (e, n, r) => n == null || !e.isValid(n) ? r : n, _r = (e, n, r) => !e.isValid(n) && n != null && !e.isValid(r) && r != null ? !0 : e.isEqual(n, r), zt = (e, n) => {
  const o = [e.startOfYear(n)];
  for (; o.length < 12; ) {
    const s = o[o.length - 1];
    o.push(e.addMonths(s, 1));
  }
  return o;
}, Un = (e, n, r) => r === "date" ? e.startOfDay(e.date(void 0, n)) : e.date(void 0, n), Kr = ["year", "month", "day"], fn = (e) => Kr.includes(e), Yt = (e, {
  format: n,
  views: r
}, o) => {
  if (n != null)
    return n;
  const s = e.formats;
  return Je(r, ["year"]) ? s.year : Je(r, ["month"]) ? s.month : Je(r, ["day"]) ? s.dayOfMonth : Je(r, ["month", "year"]) ? `${s.month} ${s.year}` : Je(r, ["day", "month"]) ? `${s.month} ${s.dayOfMonth}` : o ? /en/.test(e.getCurrentLocaleCode()) ? s.normalDateWithWeekday : s.normalDate : s.keyboardDate;
}, Gr = (e, n) => {
  const r = e.startOfWeek(n);
  return [0, 1, 2, 3, 4, 5, 6].map((o) => e.addDays(r, o));
}, Zr = ["hours", "minutes", "seconds"], Qr = (e) => Zr.includes(e), mn = (e, n) => n.getHours(e) * 3600 + n.getMinutes(e) * 60 + n.getSeconds(e), Xr = (e, n) => (r, o) => e ? n.isAfter(r, o) : mn(r, n) > mn(o, n), Oe = {
  year: 1,
  month: 2,
  day: 3,
  hours: 4,
  minutes: 5,
  seconds: 6,
  milliseconds: 7
}, Jr = (e) => Math.max(...e.map((n) => Oe[n.type] ?? 1)), et = (e, n, r) => {
  if (n === Oe.year)
    return e.startOfYear(r);
  if (n === Oe.month)
    return e.startOfMonth(r);
  if (n === Oe.day)
    return e.startOfDay(r);
  let o = r;
  return n < Oe.minutes && (o = e.setMinutes(o, 0)), n < Oe.seconds && (o = e.setSeconds(o, 0)), n < Oe.milliseconds && (o = e.setMilliseconds(o, 0)), o;
}, es = ({
  props: e,
  utils: n,
  granularity: r,
  timezone: o,
  getTodayDate: s
}) => {
  let a = s ? s() : et(n, r, Un(n, o));
  e.minDate != null && n.isAfterDay(e.minDate, a) && (a = et(n, r, e.minDate)), e.maxDate != null && n.isBeforeDay(e.maxDate, a) && (a = et(n, r, e.maxDate));
  const l = Xr(e.disableIgnoringDatePartForTimeValidation ?? !1, n);
  return e.minTime != null && l(e.minTime, a) && (a = et(n, r, e.disableIgnoringDatePartForTimeValidation ? e.minTime : ht(n, a, e.minTime))), e.maxTime != null && l(a, e.maxTime) && (a = et(n, r, e.disableIgnoringDatePartForTimeValidation ? e.maxTime : ht(n, a, e.maxTime))), a;
}, Wt = (e, n) => {
  const r = e.formatTokenMap[n];
  if (r == null)
    throw new Error([`MUI X: The token "${n}" is not supported by the Date and Time Pickers.`, "Please try using another token or open an issue on https://github.com/mui/mui-x/issues/new/choose if you think it should be supported."].join(`
`));
  return typeof r == "string" ? {
    type: r,
    contentType: r === "meridiem" ? "letter" : "digit",
    maxLength: void 0
  } : {
    type: r.sectionType,
    contentType: r.contentType,
    maxLength: r.maxLength
  };
}, ts = (e) => {
  switch (e) {
    case "ArrowUp":
      return 1;
    case "ArrowDown":
      return -1;
    case "PageUp":
      return 5;
    case "PageDown":
      return -5;
    default:
      return 0;
  }
}, Dt = (e, n) => {
  const r = [], o = e.date(void 0, "default"), s = e.startOfWeek(o), a = e.endOfWeek(o);
  let l = s;
  for (; e.isBefore(l, a); )
    r.push(l), l = e.addDays(l, 1);
  return r.map((c) => e.formatByString(c, n));
}, Hn = (e, n, r, o) => {
  switch (r) {
    case "month":
      return zt(e, e.date(void 0, n)).map((s) => e.formatByString(s, o));
    case "weekDay":
      return Dt(e, o);
    case "meridiem": {
      const s = e.date(void 0, n);
      return [e.startOfDay(s), e.endOfDay(s)].map((a) => e.formatByString(a, o));
    }
    default:
      return [];
  }
}, hn = "s", ns = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], os = (e) => {
  const n = e.date(void 0);
  return e.formatByString(e.setSeconds(n, 0), hn) === "0" ? ns : Array.from({
    length: 10
  }).map((o, s) => e.formatByString(e.setSeconds(n, s), hn));
}, Ye = (e, n) => {
  if (n[0] === "0")
    return e;
  const r = [];
  let o = "";
  for (let s = 0; s < e.length; s += 1) {
    o += e[s];
    const a = n.indexOf(o);
    a > -1 && (r.push(a.toString()), o = "");
  }
  return r.join("");
}, qt = (e, n) => n[0] === "0" ? e : e.split("").map((r) => n[Number(r)]).join(""), bn = (e, n) => {
  const r = Ye(e, n);
  return r !== " " && !Number.isNaN(Number(r));
}, _n = (e, n) => {
  let r = e;
  for (r = Number(r).toString(); r.length < n; )
    r = `0${r}`;
  return r;
}, Kn = (e, n, r, o, s) => {
  if (process.env.NODE_ENV !== "production" && s.type !== "day" && s.contentType === "digit-with-letter")
    throw new Error([`MUI X: The token "${s.format}" is a digit format with letter in it.'
             This type of format is only supported for 'day' sections`].join(`
`));
  if (s.type === "day" && s.contentType === "digit-with-letter") {
    const l = e.setDate(r.longestMonth, n);
    return e.formatByString(l, s.format);
  }
  let a = n.toString();
  return s.hasLeadingZerosInInput && (a = _n(a, s.maxLength)), qt(a, o);
}, rs = (e, n, r, o, s, a, l, c) => {
  const i = ts(o), u = o === "Home", d = o === "End", p = r.value === "" || u || d, h = () => {
    const b = s[r.type]({
      currentDate: l,
      format: r.format,
      contentType: r.contentType
    }), D = (S) => Kn(e, S, b, a, r), f = r.type === "minutes" && (c != null && c.minutesStep) ? c.minutesStep : 1;
    let y = parseInt(Ye(r.value, a), 10) + i * f;
    if (p) {
      if (r.type === "year" && !d && !u)
        return e.formatByString(e.date(void 0, n), r.format);
      i > 0 || u ? y = b.minimum : y = b.maximum;
    }
    return y % f !== 0 && ((i < 0 || u) && (y += f - (f + y) % f), (i > 0 || d) && (y -= y % f)), y > b.maximum ? D(b.minimum + (y - b.maximum - 1) % (b.maximum - b.minimum + 1)) : y < b.minimum ? D(b.maximum - (b.minimum - y - 1) % (b.maximum - b.minimum + 1)) : D(y);
  }, w = () => {
    const b = Hn(e, n, r.type, r.format);
    if (b.length === 0)
      return r.value;
    if (p)
      return i > 0 || u ? b[0] : b[b.length - 1];
    const v = ((b.indexOf(r.value) + i) % b.length + b.length) % b.length;
    return b[v];
  };
  return r.contentType === "digit" || r.contentType === "digit-with-letter" ? h() : w();
}, Ut = (e, n, r) => {
  let o = e.value || e.placeholder;
  const s = n === "non-input" ? e.hasLeadingZerosInFormat : e.hasLeadingZerosInInput;
  return n === "non-input" && e.hasLeadingZerosInInput && !e.hasLeadingZerosInFormat && (o = Number(Ye(o, r)).toString()), ["input-rtl", "input-ltr"].includes(n) && e.contentType === "digit" && !s && o.length === 1 && (o = `${o}‎`), n === "input-rtl" && (o = `⁨${o}⁩`), o;
}, gn = (e, n, r, o) => {
  if (process.env.NODE_ENV !== "production" && Wt(e, r).type === "weekDay")
    throw new Error("changeSectionValueFormat doesn't support week day formats");
  return e.formatByString(e.parse(n, r), o);
}, Gn = (e, n) => e.formatByString(e.date(void 0, "system"), n).length === 4, Zn = (e, n, r, o) => {
  if (n !== "digit")
    return !1;
  const s = e.date(void 0, "default");
  switch (r) {
    case "year":
      return Gn(e, o) ? e.formatByString(e.setYear(s, 1), o) === "0001" : e.formatByString(e.setYear(s, 2001), o) === "01";
    case "month":
      return e.formatByString(e.startOfYear(s), o).length > 1;
    case "day":
      return e.formatByString(e.startOfMonth(s), o).length > 1;
    case "weekDay":
      return e.formatByString(e.startOfWeek(s), o).length > 1;
    case "hours":
      return e.formatByString(e.setHours(s, 1), o).length > 1;
    case "minutes":
      return e.formatByString(e.setMinutes(s, 1), o).length > 1;
    case "seconds":
      return e.formatByString(e.setSeconds(s, 1), o).length > 1;
    default:
      throw new Error("Invalid section type");
  }
}, ss = (e, n, r) => {
  const o = n.some((i) => i.type === "day"), s = [], a = [];
  for (let i = 0; i < n.length; i += 1) {
    const u = n[i];
    o && u.type === "weekDay" || (s.push(u.format), a.push(Ut(u, "non-input", r)));
  }
  const l = s.join(" "), c = a.join(" ");
  return e.parse(c, l);
}, as = (e) => e.map((n) => `${n.startSeparator}${n.value || n.placeholder}${n.endSeparator}`).join(""), is = (e, n, r) => {
  const s = e.map((a) => {
    const l = Ut(a, r ? "input-rtl" : "input-ltr", n);
    return `${a.startSeparator}${l}${a.endSeparator}`;
  }).join("");
  return r ? `⁦${s}⁩` : s;
}, ls = (e, n, r) => {
  const o = e.date(void 0, r), s = e.endOfYear(o), a = e.endOfDay(o), {
    maxDaysInMonth: l,
    longestMonth: c
  } = zt(e, o).reduce((i, u) => {
    const d = e.getDaysInMonth(u);
    return d > i.maxDaysInMonth ? {
      maxDaysInMonth: d,
      longestMonth: u
    } : i;
  }, {
    maxDaysInMonth: 0,
    longestMonth: null
  });
  return {
    year: ({
      format: i
    }) => ({
      minimum: 0,
      maximum: Gn(e, i) ? 9999 : 99
    }),
    month: () => ({
      minimum: 1,
      // Assumption: All years have the same amount of months
      maximum: e.getMonth(s) + 1
    }),
    day: ({
      currentDate: i
    }) => ({
      minimum: 1,
      maximum: i != null && e.isValid(i) ? e.getDaysInMonth(i) : l,
      longestMonth: c
    }),
    weekDay: ({
      format: i,
      contentType: u
    }) => {
      if (u === "digit") {
        const d = Dt(e, i).map(Number);
        return {
          minimum: Math.min(...d),
          maximum: Math.max(...d)
        };
      }
      return {
        minimum: 1,
        maximum: 7
      };
    },
    hours: ({
      format: i
    }) => {
      const u = e.getHours(a);
      return Ye(e.formatByString(e.endOfDay(o), i), n) !== u.toString() ? {
        minimum: 1,
        maximum: Number(Ye(e.formatByString(e.startOfDay(o), i), n))
      } : {
        minimum: 0,
        maximum: u
      };
    },
    minutes: () => ({
      minimum: 0,
      // Assumption: All years have the same amount of minutes
      maximum: e.getMinutes(a)
    }),
    seconds: () => ({
      minimum: 0,
      // Assumption: All years have the same amount of seconds
      maximum: e.getSeconds(a)
    }),
    meridiem: () => ({
      minimum: 0,
      maximum: 1
    }),
    empty: () => ({
      minimum: 0,
      maximum: 0
    })
  };
};
let yn = !1;
const vn = (e, n) => {
  if (process.env.NODE_ENV !== "production" && !yn) {
    const r = ["empty"];
    ["date", "date-time"].includes(n) && r.push("weekDay", "day", "month", "year"), ["time", "date-time"].includes(n) && r.push("hours", "minutes", "seconds", "meridiem");
    const o = e.find((s) => !r.includes(s.type));
    o && (console.warn(`MUI X: The field component you are using is not compatible with the "${o.type}" date section.`, `The supported date sections are ["${r.join('", "')}"]\`.`), yn = !0);
  }
}, cs = (e, n, r, o) => {
  switch (n.type) {
    case "year":
      return e.setYear(o, e.getYear(r));
    case "month":
      return e.setMonth(o, e.getMonth(r));
    case "weekDay": {
      const s = Dt(e, n.format), a = e.formatByString(r, n.format), l = s.indexOf(a), i = s.indexOf(n.value) - l;
      return e.addDays(r, i);
    }
    case "day":
      return e.setDate(o, e.getDate(r));
    case "meridiem": {
      const s = e.getHours(r) < 12, a = e.getHours(o);
      return s && a >= 12 ? e.addHours(o, -12) : !s && a < 12 ? e.addHours(o, 12) : o;
    }
    case "hours":
      return e.setHours(o, e.getHours(r));
    case "minutes":
      return e.setMinutes(o, e.getMinutes(r));
    case "seconds":
      return e.setSeconds(o, e.getSeconds(r));
    default:
      return o;
  }
}, Dn = {
  year: 1,
  month: 2,
  day: 3,
  weekDay: 4,
  hours: 5,
  minutes: 6,
  seconds: 7,
  meridiem: 8,
  empty: 9
}, wn = (e, n, r, o, s) => (
  // cloning sections before sort to avoid mutating it
  [...r].sort((a, l) => Dn[a.type] - Dn[l.type]).reduce((a, l) => !s || l.modified ? cs(e, l, n, a) : a, o)
), us = () => navigator.userAgent.toLowerCase().includes("android"), ds = (e, n) => {
  const r = {};
  if (!n)
    return e.forEach((i, u) => {
      const d = u === 0 ? null : u - 1, p = u === e.length - 1 ? null : u + 1;
      r[u] = {
        leftIndex: d,
        rightIndex: p
      };
    }), {
      neighbors: r,
      startIndex: 0,
      endIndex: e.length - 1
    };
  const o = {}, s = {};
  let a = 0, l = 0, c = e.length - 1;
  for (; c >= 0; ) {
    l = e.findIndex(
      // eslint-disable-next-line @typescript-eslint/no-loop-func
      (i, u) => {
        var d;
        return u >= a && ((d = i.endSeparator) == null ? void 0 : d.includes(" ")) && // Special case where the spaces were not there in the initial input
        i.endSeparator !== " / ";
      }
    ), l === -1 && (l = e.length - 1);
    for (let i = l; i >= a; i -= 1)
      s[i] = c, o[c] = i, c -= 1;
    a = l + 1;
  }
  return e.forEach((i, u) => {
    const d = s[u], p = d === 0 ? null : o[d - 1], h = d === e.length - 1 ? null : o[d + 1];
    r[u] = {
      leftIndex: p,
      rightIndex: h
    };
  }), {
    neighbors: r,
    startIndex: o[0],
    endIndex: o[e.length - 1]
  };
}, Nt = (e, n) => e == null ? null : e === "all" ? "all" : typeof e == "string" ? n.findIndex((r) => r.type === e) : e, ps = (e, n) => {
  if (e.value)
    switch (e.type) {
      case "month": {
        if (e.contentType === "digit")
          return n.format(n.setMonth(n.date(), Number(e.value) - 1), "month");
        const r = n.parse(e.value, e.format);
        return r ? n.format(r, "month") : void 0;
      }
      case "day":
        return e.contentType === "digit" ? n.format(n.setDate(n.startOfYear(n.date()), Number(e.value)), "dayOfMonthFull") : e.value;
      case "weekDay":
        return;
      default:
        return;
    }
}, fs = (e, n) => {
  if (e.value)
    switch (e.type) {
      case "weekDay":
        return e.contentType === "letter" ? void 0 : Number(e.value);
      case "meridiem": {
        const r = n.parse(`01:00 ${e.value}`, `${n.formats.hours12h}:${n.formats.minutes} ${e.format}`);
        return r ? n.getHours(r) >= 12 ? 1 : 0 : void 0;
      }
      case "day":
        return e.contentType === "digit-with-letter" ? parseInt(e.value, 10) : Number(e.value);
      case "month": {
        if (e.contentType === "digit")
          return Number(e.value);
        const r = n.parse(e.value, e.format);
        return r ? n.getMonth(r) + 1 : void 0;
      }
      default:
        return e.contentType !== "letter" ? Number(e.value) : void 0;
    }
}, ms = ["value", "referenceDate"], Re = {
  emptyValue: null,
  getTodayValue: Un,
  getInitialReferenceValue: (e) => {
    let {
      value: n,
      referenceDate: r
    } = e, o = se(e, ms);
    return n != null && o.utils.isValid(n) ? n : r ?? es(o);
  },
  cleanValue: Hr,
  areValuesEqual: _r,
  isSameError: (e, n) => e === n,
  hasError: (e) => e != null,
  defaultErrorState: null,
  getTimezone: (e, n) => n == null || !e.isValid(n) ? null : e.getTimezone(n),
  setTimezone: (e, n, r) => r == null ? null : e.setTimezone(r, n)
}, hs = {
  updateReferenceValue: (e, n, r) => n == null || !e.isValid(n) ? r : n,
  getSectionsFromValue: (e, n, r, o) => !e.isValid(n) && !!r ? r : o(n),
  getV7HiddenInputValueFromSections: as,
  getV6InputValueFromSections: is,
  getActiveDateManager: (e, n) => ({
    date: n.value,
    referenceDate: n.referenceValue,
    getSections: (r) => r,
    getNewValuesFromNewActiveDate: (r) => ({
      value: r,
      referenceValue: r == null || !e.isValid(r) ? n.referenceValue : r
    })
  }),
  parseValueStr: (e, n, r) => r(e.trim(), n)
}, bs = ["localeText"], bt = /* @__PURE__ */ m.createContext(null);
process.env.NODE_ENV !== "production" && (bt.displayName = "MuiPickersAdapterContext");
const Ht = function(n) {
  const {
    localeText: r
  } = n, o = se(n, bs), {
    utils: s,
    localeText: a
  } = m.useContext(bt) ?? {
    utils: void 0,
    localeText: void 0
  }, l = be({
    // We don't want to pass the `localeText` prop to the theme, that way it will always return the theme value,
    // We will then merge this theme value with our value manually
    props: o,
    name: "MuiLocalizationProvider"
  }), {
    children: c,
    dateAdapter: i,
    dateFormats: u,
    dateLibInstance: d,
    adapterLocale: p,
    localeText: h
  } = l, w = m.useMemo(() => g({}, h, a, r), [h, a, r]), b = m.useMemo(() => {
    if (!i)
      return s || null;
    const v = new i({
      locale: p,
      formats: u,
      instance: d
    });
    if (!v.isMUIAdapter)
      throw new Error(["MUI X: The date adapter should be imported from `@mui/x-date-pickers` or `@mui/x-date-pickers-pro`, not from `@date-io`", "For example, `import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'` instead of `import AdapterDayjs from '@date-io/dayjs'`", "More information on the installation documentation: https://mui.com/x/react-date-pickers/getting-started/#installation"].join(`
`));
    return v;
  }, [i, p, u, d, s]), D = m.useMemo(() => b ? {
    minDate: b.date("1900-01-01T00:00:00.000"),
    maxDate: b.date("2099-12-31T00:00:00.000")
  } : null, [b]), f = m.useMemo(() => ({
    utils: b,
    defaultDates: D,
    localeText: w
  }), [D, b, w]);
  return /* @__PURE__ */ P(bt.Provider, {
    value: f,
    children: c
  });
};
process.env.NODE_ENV !== "production" && (Ht.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Locale for the date library you are using
   */
  adapterLocale: t.any,
  children: t.node,
  /**
   * Date library adapter class function.
   * @see See the localization provider {@link https://mui.com/x/react-date-pickers/getting-started/#setup-your-date-library-adapter date adapter setup section} for more details.
   */
  dateAdapter: t.func,
  /**
   * Formats that are used for any child pickers
   */
  dateFormats: t.shape({
    dayOfMonth: t.string,
    dayOfMonthFull: t.string,
    fullDate: t.string,
    fullTime: t.string,
    fullTime12h: t.string,
    fullTime24h: t.string,
    hours12h: t.string,
    hours24h: t.string,
    keyboardDate: t.string,
    keyboardDateTime: t.string,
    keyboardDateTime12h: t.string,
    keyboardDateTime24h: t.string,
    meridiem: t.string,
    minutes: t.string,
    month: t.string,
    monthShort: t.string,
    normalDate: t.string,
    normalDateWithWeekday: t.string,
    seconds: t.string,
    shortDate: t.string,
    weekday: t.string,
    weekdayShort: t.string,
    year: t.string
  }),
  /**
   * Date library instance you are using, if it has some global overrides
   * ```jsx
   * dateLibInstance={momentTimeZone}
   * ```
   */
  dateLibInstance: t.any,
  /**
   * Locale for components texts
   */
  localeText: t.object
});
const gs = (e) => ({
  components: {
    MuiLocalizationProvider: {
      defaultProps: {
        localeText: g({}, e)
      }
    }
  }
}), Qn = (e) => {
  const {
    utils: n,
    formatKey: r,
    contextTranslation: o,
    propsTranslation: s
  } = e;
  return (a) => {
    const l = a !== null && n.isValid(a) ? n.format(a, r) : null;
    return (s ?? o)(a, n, l);
  };
}, Xn = {
  // Calendar navigation
  previousMonth: "Previous month",
  nextMonth: "Next month",
  // View navigation
  openPreviousView: "Open previous view",
  openNextView: "Open next view",
  calendarViewSwitchingButtonAriaLabel: (e) => e === "year" ? "year view is open, switch to calendar view" : "calendar view is open, switch to year view",
  // DateRange labels
  start: "Start",
  end: "End",
  startDate: "Start date",
  startTime: "Start time",
  endDate: "End date",
  endTime: "End time",
  // Action bar
  cancelButtonLabel: "Cancel",
  clearButtonLabel: "Clear",
  okButtonLabel: "OK",
  todayButtonLabel: "Today",
  // Toolbar titles
  datePickerToolbarTitle: "Select date",
  dateTimePickerToolbarTitle: "Select date & time",
  timePickerToolbarTitle: "Select time",
  dateRangePickerToolbarTitle: "Select date range",
  // Clock labels
  clockLabelText: (e, n, r, o) => `Select ${e}. ${!o && (n === null || !r.isValid(n)) ? "No time selected" : `Selected time is ${o ?? r.format(n, "fullTime")}`}`,
  hoursClockNumberText: (e) => `${e} hours`,
  minutesClockNumberText: (e) => `${e} minutes`,
  secondsClockNumberText: (e) => `${e} seconds`,
  // Digital clock labels
  selectViewText: (e) => `Select ${e}`,
  // Calendar labels
  calendarWeekNumberHeaderLabel: "Week number",
  calendarWeekNumberHeaderText: "#",
  calendarWeekNumberAriaLabelText: (e) => `Week ${e}`,
  calendarWeekNumberText: (e) => `${e}`,
  // Open picker labels
  openDatePickerDialogue: (e, n, r) => r || e !== null && n.isValid(e) ? `Choose date, selected date is ${r ?? n.format(e, "fullDate")}` : "Choose date",
  openTimePickerDialogue: (e, n, r) => r || e !== null && n.isValid(e) ? `Choose time, selected time is ${r ?? n.format(e, "fullTime")}` : "Choose time",
  fieldClearLabel: "Clear",
  // Table labels
  timeTableLabel: "pick time",
  dateTableLabel: "pick date",
  // Field section placeholders
  fieldYearPlaceholder: (e) => "Y".repeat(e.digitAmount),
  fieldMonthPlaceholder: (e) => e.contentType === "letter" ? "MMMM" : "MM",
  fieldDayPlaceholder: () => "DD",
  fieldWeekDayPlaceholder: (e) => e.contentType === "letter" ? "EEEE" : "EE",
  fieldHoursPlaceholder: () => "hh",
  fieldMinutesPlaceholder: () => "mm",
  fieldSecondsPlaceholder: () => "ss",
  fieldMeridiemPlaceholder: () => "aa",
  // View names
  year: "Year",
  month: "Month",
  day: "Day",
  weekDay: "Week day",
  hours: "Hours",
  minutes: "Minutes",
  seconds: "Seconds",
  meridiem: "Meridiem",
  // Common
  empty: "Empty"
}, ys = Xn;
gs(Xn);
const We = () => {
  const e = m.useContext(bt);
  if (e === null)
    throw new Error(["MUI X: Can not find the date and time pickers localization context.", "It looks like you forgot to wrap your component in LocalizationProvider.", "This can also happen if you are bundling multiple versions of the `@mui/x-date-pickers` package"].join(`
`));
  if (e.utils === null)
    throw new Error(["MUI X: Can not find the date and time pickers adapter from its localization context.", "It looks like you forgot to pass a `dateAdapter` to your LocalizationProvider."].join(`
`));
  const n = m.useMemo(() => g({}, ys, e.localeText), [e.localeText]);
  return m.useMemo(() => g({}, e, {
    localeText: n
  }), [e, n]);
}, ye = () => We().utils, lt = () => We().defaultDates, wt = (e) => {
  const n = ye(), r = m.useRef();
  return r.current === void 0 && (r.current = n.date(void 0, e)), r.current;
};
function vs(e) {
  return me("MuiPickersToolbar", e);
}
he("MuiPickersToolbar", ["root", "content"]);
const Ds = ["children", "className", "toolbarTitle", "hidden", "titleId", "isLandscape", "classes", "landscapeDirection"], ws = (e) => {
  const {
    classes: n,
    isLandscape: r
  } = e;
  return ge({
    root: ["root"],
    content: ["content"],
    penIconButton: ["penIconButton", r && "penIconButtonLandscape"]
  }, vs, n);
}, Ss = _("div", {
  name: "MuiPickersToolbar",
  slot: "Root",
  overridesResolver: (e, n) => n.root
})(({
  theme: e
}) => ({
  display: "flex",
  flexDirection: "column",
  alignItems: "flex-start",
  justifyContent: "space-between",
  padding: e.spacing(2, 3),
  variants: [{
    props: {
      isLandscape: !0
    },
    style: {
      height: "auto",
      maxWidth: 160,
      padding: 16,
      justifyContent: "flex-start",
      flexWrap: "wrap"
    }
  }]
})), Cs = _("div", {
  name: "MuiPickersToolbar",
  slot: "Content",
  overridesResolver: (e, n) => n.content
})({
  display: "flex",
  flexWrap: "wrap",
  width: "100%",
  flex: 1,
  justifyContent: "space-between",
  alignItems: "center",
  flexDirection: "row",
  variants: [{
    props: {
      isLandscape: !0
    },
    style: {
      justifyContent: "flex-start",
      alignItems: "flex-start",
      flexDirection: "column"
    }
  }, {
    props: {
      isLandscape: !0,
      landscapeDirection: "row"
    },
    style: {
      flexDirection: "row"
    }
  }]
}), xs = /* @__PURE__ */ m.forwardRef(function(n, r) {
  const o = be({
    props: n,
    name: "MuiPickersToolbar"
  }), {
    children: s,
    className: a,
    toolbarTitle: l,
    hidden: c,
    titleId: i
  } = o, u = se(o, Ds), d = o, p = ws(d);
  return c ? null : /* @__PURE__ */ ve(Ss, g({
    ref: r,
    className: pe(p.root, a),
    ownerState: d
  }, u, {
    children: [/* @__PURE__ */ P(Qe, {
      color: "text.secondary",
      variant: "overline",
      id: i,
      children: l
    }), /* @__PURE__ */ P(Cs, {
      className: p.content,
      ownerState: d,
      children: s
    })]
  }));
}), Ae = () => We().localeText;
function Ps(e) {
  return me("MuiDatePickerToolbar", e);
}
he("MuiDatePickerToolbar", ["root", "title"]);
const Ms = ["value", "isLandscape", "onChange", "toolbarFormat", "toolbarPlaceholder", "views", "className", "onViewChange", "view"], ks = (e) => {
  const {
    classes: n
  } = e;
  return ge({
    root: ["root"],
    title: ["title"]
  }, Ps, n);
}, Ts = _(xs, {
  name: "MuiDatePickerToolbar",
  slot: "Root",
  overridesResolver: (e, n) => n.root
})({}), Os = _(Qe, {
  name: "MuiDatePickerToolbar",
  slot: "Title",
  overridesResolver: (e, n) => n.title
})({
  variants: [{
    props: {
      isLandscape: !0
    },
    style: {
      margin: "auto 16px auto auto"
    }
  }]
}), Jn = /* @__PURE__ */ m.forwardRef(function(n, r) {
  const o = be({
    props: n,
    name: "MuiDatePickerToolbar"
  }), {
    value: s,
    isLandscape: a,
    toolbarFormat: l,
    toolbarPlaceholder: c = "––",
    views: i,
    className: u
  } = o, d = se(o, Ms), p = ye(), h = Ae(), w = ks(o), b = m.useMemo(() => {
    if (!s)
      return c;
    const f = Yt(p, {
      format: l,
      views: i
    }, !0);
    return p.formatByString(s, f);
  }, [s, l, c, p, i]), D = o;
  return /* @__PURE__ */ P(Ts, g({
    ref: r,
    toolbarTitle: h.datePickerToolbarTitle,
    isLandscape: a,
    className: pe(w.root, u)
  }, d, {
    children: /* @__PURE__ */ P(Os, {
      variant: "h4",
      align: a ? "left" : "center",
      ownerState: D,
      className: w.title,
      children: b
    })
  }));
});
process.env.NODE_ENV !== "production" && (Jn.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  className: t.string,
  disabled: t.bool,
  /**
   * If `true`, show the toolbar even in desktop mode.
   * @default `true` for Desktop, `false` for Mobile.
   */
  hidden: t.bool,
  isLandscape: t.bool.isRequired,
  onChange: t.func.isRequired,
  /**
   * Callback called when a toolbar is clicked
   * @template TView
   * @param {TView} view The view to open
   */
  onViewChange: t.func.isRequired,
  readOnly: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  titleId: t.string,
  /**
   * Toolbar date format.
   */
  toolbarFormat: t.string,
  /**
   * Toolbar value placeholder—it is displayed when the value is empty.
   * @default "––"
   */
  toolbarPlaceholder: t.node,
  value: t.object,
  /**
   * Currently visible picker view.
   */
  view: t.oneOf(["day", "month", "year"]).isRequired,
  /**
   * Available views.
   */
  views: t.arrayOf(t.oneOf(["day", "month", "year"]).isRequired).isRequired
});
function eo(e, n) {
  const r = ye(), o = lt(), s = be({
    props: e,
    name: n
  }), a = m.useMemo(() => {
    var l;
    return ((l = s.localeText) == null ? void 0 : l.toolbarTitle) == null ? s.localeText : g({}, s.localeText, {
      datePickerToolbarTitle: s.localeText.toolbarTitle
    });
  }, [s.localeText]);
  return g({}, s, {
    localeText: a
  }, Ur({
    views: s.views,
    openTo: s.openTo,
    defaultViews: ["year", "day"],
    defaultOpenTo: "day"
  }), {
    disableFuture: s.disableFuture ?? !1,
    disablePast: s.disablePast ?? !1,
    minDate: Me(r, s.minDate, o.minDate),
    maxDate: Me(r, s.maxDate, o.maxDate),
    slots: g({
      toolbar: Jn
    }, s.slots)
  });
}
const ct = ({
  props: e,
  value: n,
  timezone: r,
  adapter: o
}) => {
  if (n === null)
    return null;
  const {
    shouldDisableDate: s,
    shouldDisableMonth: a,
    shouldDisableYear: l,
    disablePast: c,
    disableFuture: i
  } = e, u = o.utils.date(void 0, r), d = Me(o.utils, e.minDate, o.defaultDates.minDate), p = Me(o.utils, e.maxDate, o.defaultDates.maxDate);
  switch (!0) {
    case !o.utils.isValid(n):
      return "invalidDate";
    case !!(s && s(n)):
      return "shouldDisableDate";
    case !!(a && a(n)):
      return "shouldDisableMonth";
    case !!(l && l(n)):
      return "shouldDisableYear";
    case !!(i && o.utils.isAfterDay(n, u)):
      return "disableFuture";
    case !!(c && o.utils.isBeforeDay(n, u)):
      return "disablePast";
    case !!(d && o.utils.isBeforeDay(n, d)):
      return "minDate";
    case !!(p && o.utils.isAfterDay(n, p)):
      return "maxDate";
    default:
      return null;
  }
};
ct.valueManager = Re;
const to = ["disablePast", "disableFuture", "minDate", "maxDate", "shouldDisableDate", "shouldDisableMonth", "shouldDisableYear"], Rs = ["disablePast", "disableFuture", "minTime", "maxTime", "shouldDisableTime", "minutesStep", "ampm", "disableIgnoringDatePartForTimeValidation"], Is = ["minDateTime", "maxDateTime"], Vs = [...to, ...Rs, ...Is], no = (e) => Vs.reduce((n, r) => (e.hasOwnProperty(r) && (n[r] = e[r]), n), {});
function oo(e) {
  const {
    props: n,
    validator: r,
    value: o,
    timezone: s,
    onError: a
  } = e, l = We(), c = m.useRef(r.valueManager.defaultErrorState), i = r({
    adapter: l,
    value: o,
    timezone: s,
    props: n
  }), u = r.valueManager.hasError(i);
  m.useEffect(() => {
    a && !r.valueManager.isSameError(i, c.current) && a(i, o), c.current = i;
  }, [r, a, i, o]);
  const d = G((p) => r({
    adapter: l,
    value: p,
    timezone: s,
    props: n
  }));
  return {
    validationError: i,
    hasValidationError: u,
    getValidationErrorForNewValue: d
  };
}
function Fs(e) {
  return me("MuiPickersPopper", e);
}
he("MuiPickersPopper", ["root", "paper"]);
function Es(e, n) {
  return Array.isArray(n) ? n.every((r) => e.indexOf(r) !== -1) : e.indexOf(n) !== -1;
}
const As = (e, n) => (r) => {
  (r.key === "Enter" || r.key === " ") && (e(r), r.preventDefault(), r.stopPropagation());
}, xe = (e = document) => {
  const n = e.activeElement;
  return n ? n.shadowRoot ? xe(n.shadowRoot) : n : null;
}, Ls = "@media (pointer: fine)", Ns = "@media (prefers-reduced-motion: reduce)", _e = typeof navigator < "u" && navigator.userAgent.match(/android\s(\d+)|OS\s(\d+)/i), Sn = _e && _e[1] ? parseInt(_e[1], 10) : null, Cn = _e && _e[2] ? parseInt(_e[2], 10) : null, $s = Sn && Sn < 10 || Cn && Cn < 13 || !1, ro = () => Ln(Ns, {
  defaultMatches: !1
}) || $s, Bs = ["PaperComponent", "popperPlacement", "ownerState", "children", "paperSlotProps", "paperClasses", "onPaperClick", "onPaperTouchStart"], js = (e) => {
  const {
    classes: n
  } = e;
  return ge({
    root: ["root"],
    paper: ["paper"]
  }, Fs, n);
}, zs = _(Qo, {
  name: "MuiPickersPopper",
  slot: "Root",
  overridesResolver: (e, n) => n.root
})(({
  theme: e
}) => ({
  zIndex: e.zIndex.modal
})), Ys = _(Xo, {
  name: "MuiPickersPopper",
  slot: "Paper",
  overridesResolver: (e, n) => n.paper
})({
  outline: 0,
  transformOrigin: "top center",
  variants: [{
    props: ({
      placement: e
    }) => ["top", "top-start", "top-end"].includes(e),
    style: {
      transformOrigin: "bottom center"
    }
  }]
});
function Ws(e, n) {
  return n.documentElement.clientWidth < e.clientX || n.documentElement.clientHeight < e.clientY;
}
function qs(e, n) {
  const r = m.useRef(!1), o = m.useRef(!1), s = m.useRef(null), a = m.useRef(!1);
  m.useEffect(() => {
    if (!e)
      return;
    function i() {
      a.current = !0;
    }
    return document.addEventListener("mousedown", i, !0), document.addEventListener("touchstart", i, !0), () => {
      document.removeEventListener("mousedown", i, !0), document.removeEventListener("touchstart", i, !0), a.current = !1;
    };
  }, [e]);
  const l = G((i) => {
    if (!a.current)
      return;
    const u = o.current;
    o.current = !1;
    const d = Vt(s.current);
    if (!s.current || // is a TouchEvent?
    "clientX" in i && Ws(i, d))
      return;
    if (r.current) {
      r.current = !1;
      return;
    }
    let p;
    i.composedPath ? p = i.composedPath().indexOf(s.current) > -1 : p = !d.documentElement.contains(i.target) || s.current.contains(i.target), !p && !u && n(i);
  }), c = () => {
    o.current = !0;
  };
  return m.useEffect(() => {
    if (e) {
      const i = Vt(s.current), u = () => {
        r.current = !0;
      };
      return i.addEventListener("touchstart", l), i.addEventListener("touchmove", u), () => {
        i.removeEventListener("touchstart", l), i.removeEventListener("touchmove", u);
      };
    }
  }, [e, l]), m.useEffect(() => {
    if (e) {
      const i = Vt(s.current);
      return i.addEventListener("click", l), () => {
        i.removeEventListener("click", l), o.current = !1;
      };
    }
  }, [e, l]), [s, c, c];
}
const Us = /* @__PURE__ */ m.forwardRef((e, n) => {
  const {
    PaperComponent: r,
    popperPlacement: o,
    ownerState: s,
    children: a,
    paperSlotProps: l,
    paperClasses: c,
    onPaperClick: i,
    onPaperTouchStart: u
    // picks up the style props provided by `Transition`
    // https://mui.com/material-ui/transitions/#child-requirement
  } = e, d = se(e, Bs), p = g({}, s, {
    placement: o
  }), h = ue({
    elementType: r,
    externalSlotProps: l,
    additionalProps: {
      tabIndex: -1,
      elevation: 8,
      ref: n
    },
    className: c,
    ownerState: p
  });
  return /* @__PURE__ */ P(r, g({}, d, h, {
    onClick: (w) => {
      var b;
      i(w), (b = h.onClick) == null || b.call(h, w);
    },
    onTouchStart: (w) => {
      var b;
      u(w), (b = h.onTouchStart) == null || b.call(h, w);
    },
    ownerState: p,
    children: a
  }));
});
function Hs(e) {
  const n = be({
    props: e,
    name: "MuiPickersPopper"
  }), {
    anchorEl: r,
    children: o,
    containerRef: s = null,
    shouldRestoreFocus: a,
    onBlur: l,
    onDismiss: c,
    open: i,
    role: u,
    placement: d,
    slots: p,
    slotProps: h,
    reduceAnimations: w
  } = n;
  m.useEffect(() => {
    function I(A) {
      i && A.key === "Escape" && c();
    }
    return document.addEventListener("keydown", I), () => {
      document.removeEventListener("keydown", I);
    };
  }, [c, i]);
  const b = m.useRef(null);
  m.useEffect(() => {
    u === "tooltip" || a && !a() || (i ? b.current = xe(document) : b.current && b.current instanceof HTMLElement && setTimeout(() => {
      b.current instanceof HTMLElement && b.current.focus();
    }));
  }, [i, u, a]);
  const [D, f, v] = qs(i, l ?? c), y = m.useRef(null), S = Ce(y, s), C = Ce(S, D), O = n, E = js(O), V = ro(), x = w ?? V, $ = (I) => {
    I.key === "Escape" && (I.stopPropagation(), c());
  }, B = (p == null ? void 0 : p.desktopTransition) ?? x ? gt : Jo, R = (p == null ? void 0 : p.desktopTrapFocus) ?? er, F = (p == null ? void 0 : p.desktopPaper) ?? Ys, L = (p == null ? void 0 : p.popper) ?? zs, M = ue({
    elementType: L,
    externalSlotProps: h == null ? void 0 : h.popper,
    additionalProps: {
      transition: !0,
      role: u,
      open: i,
      anchorEl: r,
      placement: d,
      onKeyDown: $
    },
    className: E.root,
    ownerState: n
  });
  return /* @__PURE__ */ P(L, g({}, M, {
    children: ({
      TransitionProps: I,
      placement: A
    }) => /* @__PURE__ */ P(R, g({
      open: i,
      disableAutoFocus: !0,
      disableRestoreFocus: !0,
      disableEnforceFocus: u === "tooltip",
      isEnabled: () => !0
    }, h == null ? void 0 : h.desktopTrapFocus, {
      children: /* @__PURE__ */ P(B, g({}, I, h == null ? void 0 : h.desktopTransition, {
        children: /* @__PURE__ */ P(Us, {
          PaperComponent: F,
          ownerState: O,
          popperPlacement: A,
          ref: C,
          onPaperClick: f,
          onPaperTouchStart: v,
          paperClasses: E.paper,
          paperSlotProps: h == null ? void 0 : h.desktopPaper,
          children: o
        })
      }))
    }))
  }));
}
const _s = ({
  open: e,
  onOpen: n,
  onClose: r
}) => {
  const o = m.useRef(typeof e == "boolean").current, [s, a] = m.useState(!1);
  m.useEffect(() => {
    if (o) {
      if (typeof e != "boolean")
        throw new Error("You must not mix controlling and uncontrolled mode for `open` prop");
      a(e);
    }
  }, [o, e]);
  const l = m.useCallback((c) => {
    o || a(c), c && n && n(), !c && r && r();
  }, [o, n, r]);
  return {
    isOpen: s,
    setIsOpen: l
  };
}, _t = ({
  timezone: e,
  value: n,
  defaultValue: r,
  onChange: o,
  valueManager: s
}) => {
  const a = ye(), l = m.useRef(r), c = n ?? l.current ?? s.emptyValue, i = m.useMemo(() => s.getTimezone(a, c), [a, s, c]), u = G((w) => i == null ? w : s.setTimezone(a, i, w)), d = e ?? i ?? "default", p = m.useMemo(() => s.setTimezone(a, d, c), [s, a, d, c]), h = G((w, ...b) => {
    const D = u(w);
    o == null || o(D, ...b);
  });
  return {
    value: p,
    handleValueChange: h,
    timezone: d
  };
}, Kt = ({
  name: e,
  timezone: n,
  value: r,
  defaultValue: o,
  onChange: s,
  valueManager: a
}) => {
  const [l, c] = ze({
    name: e,
    state: "value",
    controlled: r,
    default: o ?? a.emptyValue
  }), i = G((u, ...d) => {
    c(u), s == null || s(u, ...d);
  });
  return _t({
    timezone: n,
    value: l,
    defaultValue: void 0,
    onChange: i,
    valueManager: a
  });
}, Ks = (e) => {
  const {
    action: n,
    hasChanged: r,
    dateState: o,
    isControlled: s
  } = e, a = !s && !o.hasBeenModifiedSinceMount;
  return n.name === "setValueFromField" ? !0 : n.name === "setValueFromAction" ? a && ["accept", "today", "clear"].includes(n.pickerAction) ? !0 : r(o.lastPublishedValue) : n.name === "setValueFromView" && n.selectionState !== "shallow" || n.name === "setValueFromShortcut" ? a ? !0 : r(o.lastPublishedValue) : !1;
}, Gs = (e) => {
  const {
    action: n,
    hasChanged: r,
    dateState: o,
    isControlled: s,
    closeOnSelect: a
  } = e, l = !s && !o.hasBeenModifiedSinceMount;
  return n.name === "setValueFromAction" ? l && ["accept", "today", "clear"].includes(n.pickerAction) ? !0 : r(o.lastCommittedValue) : n.name === "setValueFromView" && n.selectionState === "finish" && a ? l ? !0 : r(o.lastCommittedValue) : n.name === "setValueFromShortcut" ? n.changeImportance === "accept" && r(o.lastCommittedValue) : !1;
}, Zs = (e) => {
  const {
    action: n,
    closeOnSelect: r
  } = e;
  return n.name === "setValueFromAction" ? !0 : n.name === "setValueFromView" ? n.selectionState === "finish" && r : n.name === "setValueFromShortcut" ? n.changeImportance === "accept" : !1;
}, Qs = ({
  props: e,
  valueManager: n,
  valueType: r,
  wrapperVariant: o,
  validator: s
}) => {
  const {
    onAccept: a,
    onChange: l,
    value: c,
    defaultValue: i,
    closeOnSelect: u = o === "desktop",
    timezone: d
  } = e, {
    current: p
  } = m.useRef(i), {
    current: h
  } = m.useRef(c !== void 0);
  process.env.NODE_ENV !== "production" && (m.useEffect(() => {
    h !== (c !== void 0) && console.error([`MUI X: A component is changing the ${h ? "" : "un"}controlled value of a picker to be ${h ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", "Decide between using a controlled or uncontrolled valuefor the lifetime of the component.", "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join(`
`));
  }, [c]), m.useEffect(() => {
    !h && p !== i && console.error(["MUI X: A component is changing the defaultValue of an uncontrolled picker after being initialized. To suppress this warning opt to use a controlled value."].join(`
`));
  }, [JSON.stringify(p)]));
  const w = ye(), b = We(), {
    isOpen: D,
    setIsOpen: f
  } = _s(e), {
    timezone: v,
    value: y,
    handleValueChange: S
  } = _t({
    timezone: d,
    value: c,
    defaultValue: p,
    onChange: l,
    valueManager: n
  }), [C, O] = m.useState(() => {
    let T;
    return y !== void 0 ? T = y : p !== void 0 ? T = p : T = n.emptyValue, {
      draft: T,
      lastPublishedValue: T,
      lastCommittedValue: T,
      lastControlledValue: y,
      hasBeenModifiedSinceMount: !1
    };
  }), {
    getValidationErrorForNewValue: E
  } = oo({
    props: e,
    validator: s,
    timezone: v,
    value: C.draft,
    onError: e.onError
  }), V = G((T) => {
    const q = {
      action: T,
      dateState: C,
      hasChanged: (Y) => !n.areValuesEqual(w, T.value, Y),
      isControlled: h,
      closeOnSelect: u
    }, W = Ks(q), N = Gs(q), X = Zs(q);
    O((Y) => g({}, Y, {
      draft: T.value,
      lastPublishedValue: W ? T.value : Y.lastPublishedValue,
      lastCommittedValue: N ? T.value : Y.lastCommittedValue,
      hasBeenModifiedSinceMount: !0
    }));
    let ne = null;
    const te = () => (ne || (ne = {
      validationError: T.name === "setValueFromField" ? T.context.validationError : E(T.value)
    }, T.name === "setValueFromShortcut" && (ne.shortcut = T.shortcut)), ne);
    W && S(T.value, te()), N && a && a(T.value, te()), X && f(!1);
  });
  if (y !== void 0 && (C.lastControlledValue === void 0 || !n.areValuesEqual(w, C.lastControlledValue, y))) {
    const T = n.areValuesEqual(w, C.draft, y);
    O((q) => g({}, q, {
      lastControlledValue: y
    }, T ? {} : {
      lastCommittedValue: y,
      lastPublishedValue: y,
      draft: y,
      hasBeenModifiedSinceMount: !0
    }));
  }
  const x = G(() => {
    V({
      value: n.emptyValue,
      name: "setValueFromAction",
      pickerAction: "clear"
    });
  }), $ = G(() => {
    V({
      value: C.lastPublishedValue,
      name: "setValueFromAction",
      pickerAction: "accept"
    });
  }), B = G(() => {
    V({
      value: C.lastPublishedValue,
      name: "setValueFromAction",
      pickerAction: "dismiss"
    });
  }), R = G(() => {
    V({
      value: C.lastCommittedValue,
      name: "setValueFromAction",
      pickerAction: "cancel"
    });
  }), F = G(() => {
    V({
      value: n.getTodayValue(w, v, r),
      name: "setValueFromAction",
      pickerAction: "today"
    });
  }), L = G((T) => {
    T.preventDefault(), f(!0);
  }), M = G((T) => {
    T == null || T.preventDefault(), f(!1);
  }), I = G((T, q = "partial") => V({
    name: "setValueFromView",
    value: T,
    selectionState: q
  })), A = G((T, q, W) => V({
    name: "setValueFromShortcut",
    value: T,
    changeImportance: q,
    shortcut: W
  })), Q = G((T, q) => V({
    name: "setValueFromField",
    value: T,
    context: q
  })), H = {
    onClear: x,
    onAccept: $,
    onDismiss: B,
    onCancel: R,
    onSetToday: F,
    onOpen: L,
    onClose: M
  }, K = {
    value: C.draft,
    onChange: Q
  }, oe = m.useMemo(() => n.cleanValue(w, C.draft), [w, n, C.draft]), J = {
    value: oe,
    onChange: I,
    onClose: M,
    open: D
  }, de = g({}, H, {
    value: oe,
    onChange: I,
    onSelectShortcut: A,
    isValid: (T) => {
      const q = s({
        adapter: b,
        value: T,
        timezone: v,
        props: e
      });
      return !n.hasError(q);
    }
  }), le = m.useMemo(() => ({
    onOpen: L,
    onClose: M,
    open: D
  }), [D, M, L]);
  return {
    open: D,
    fieldProps: K,
    viewProps: J,
    layoutProps: de,
    actions: H,
    contextValue: le
  };
};
let At = !1;
function so({
  onChange: e,
  onViewChange: n,
  openTo: r,
  view: o,
  views: s,
  autoFocus: a,
  focusedView: l,
  onFocusedViewChange: c
}) {
  process.env.NODE_ENV !== "production" && (At || (o != null && !s.includes(o) && (console.warn(`MUI X: \`view="${o}"\` is not a valid prop.`, `It must be an element of \`views=["${s.join('", "')}"]\`.`), At = !0), o == null && r != null && !s.includes(r) && (console.warn(`MUI X: \`openTo="${r}"\` is not a valid prop.`, `It must be an element of \`views=["${s.join('", "')}"]\`.`), At = !0)));
  const i = m.useRef(r), u = m.useRef(s), d = m.useRef(s.includes(r) ? r : s[0]), [p, h] = ze({
    name: "useViews",
    state: "view",
    controlled: o,
    default: d.current
  }), w = m.useRef(a ? p : null), [b, D] = ze({
    name: "useViews",
    state: "focusedView",
    controlled: l,
    default: w.current
  });
  m.useEffect(() => {
    (i.current && i.current !== r || u.current && u.current.some((V) => !s.includes(V))) && (h(s.includes(r) ? r : s[0]), u.current = s, i.current = r);
  }, [r, h, p, s]);
  const f = s.indexOf(p), v = s[f - 1] ?? null, y = s[f + 1] ?? null, S = G((V, x) => {
    D(x ? V : ($) => V === $ ? null : $), c == null || c(V, x);
  }), C = G((V) => {
    S(V, !0), V !== p && (h(V), n && n(V));
  }), O = G(() => {
    y && C(y);
  }), E = G((V, x, $) => {
    const B = x === "finish", R = $ ? (
      // handles case like `DateTimePicker`, where a view might return a `finish` selection state
      // but when it's not the final view given all `views` -> overall selection state should be `partial`.
      s.indexOf($) < s.length - 1
    ) : !!y;
    if (e(V, B && R ? "partial" : x, $), $ && $ !== p) {
      const L = s[s.indexOf($) + 1];
      L && C(L);
    } else B && O();
  });
  return {
    view: p,
    setView: C,
    focusedView: b,
    setFocusedView: S,
    nextView: y,
    previousView: v,
    // Always return up-to-date default view instead of the initial one (i.e. defaultView.current)
    defaultView: s.includes(r) ? r : s[0],
    goToNextView: O,
    setValueAndGoToNextView: E
  };
}
const Xs = ["className", "sx"], Js = ({
  props: e,
  propsFromPickerValue: n,
  additionalViewProps: r,
  autoFocusView: o,
  rendererInterceptor: s,
  fieldRef: a
}) => {
  const {
    onChange: l,
    open: c,
    onClose: i
  } = n, {
    view: u,
    views: d,
    openTo: p,
    onViewChange: h,
    viewRenderers: w,
    timezone: b
  } = e, D = se(e, Xs), {
    view: f,
    setView: v,
    defaultView: y,
    focusedView: S,
    setFocusedView: C,
    setValueAndGoToNextView: O
  } = so({
    view: u,
    views: d,
    openTo: p,
    onChange: l,
    onViewChange: h,
    autoFocus: o
  }), {
    hasUIView: E,
    viewModeLookup: V
  } = m.useMemo(() => d.reduce((M, I) => {
    let A;
    return w[I] != null ? A = "UI" : A = "field", M.viewModeLookup[I] = A, A === "UI" && (M.hasUIView = !0), M;
  }, {
    hasUIView: !1,
    viewModeLookup: {}
  }), [w, d]), x = m.useMemo(() => d.reduce((M, I) => w[I] != null && Qr(I) ? M + 1 : M, 0), [w, d]), $ = V[f], B = G(() => $ === "UI"), [R, F] = m.useState($ === "UI" ? f : null);
  return R !== f && V[f] === "UI" && F(f), Ie(() => {
    $ === "field" && c && (i(), setTimeout(() => {
      var M, I;
      (M = a == null ? void 0 : a.current) == null || M.setSelectedSections(f), (I = a == null ? void 0 : a.current) == null || I.focusField(f);
    }));
  }, [f]), Ie(() => {
    if (!c)
      return;
    let M = f;
    $ === "field" && R != null && (M = R), M !== y && V[M] === "UI" && V[y] === "UI" && (M = y), M !== f && v(M), C(M, !0);
  }, [c]), {
    hasUIView: E,
    shouldRestoreFocus: B,
    layoutProps: {
      views: d,
      view: R,
      onViewChange: v
    },
    renderCurrentView: () => {
      if (R == null)
        return null;
      const M = w[R];
      if (M == null)
        return null;
      const I = g({}, D, r, n, {
        views: d,
        timezone: b,
        onChange: O,
        view: R,
        onViewChange: v,
        focusedView: S,
        onFocusedViewChange: C,
        showViewSwitcher: x > 1,
        timeViewsCount: x
      });
      return s ? s(w, R, I) : M(I);
    }
  };
};
function xn() {
  return typeof window > "u" ? "portrait" : window.screen && window.screen.orientation && window.screen.orientation.angle ? Math.abs(window.screen.orientation.angle) === 90 ? "landscape" : "portrait" : window.orientation && Math.abs(Number(window.orientation)) === 90 ? "landscape" : "portrait";
}
const ea = (e, n) => {
  const [r, o] = m.useState(xn);
  return Ie(() => {
    const a = () => {
      o(xn());
    };
    return window.addEventListener("orientationchange", a), () => {
      window.removeEventListener("orientationchange", a);
    };
  }, []), Es(e, ["hours", "minutes", "seconds"]) ? !1 : (n || r) === "landscape";
}, ta = ({
  props: e,
  propsFromPickerValue: n,
  propsFromPickerViews: r,
  wrapperVariant: o
}) => {
  const {
    orientation: s
  } = e, a = ea(r.views, s), l = Ee();
  return {
    layoutProps: g({}, r, n, {
      isLandscape: a,
      isRtl: l,
      wrapperVariant: o,
      disabled: e.disabled,
      readOnly: e.readOnly
    })
  };
};
function na(e) {
  const {
    props: n,
    pickerValueResponse: r
  } = e;
  return m.useMemo(() => ({
    value: r.viewProps.value,
    open: r.open,
    disabled: n.disabled ?? !1,
    readOnly: n.readOnly ?? !1
  }), [r.viewProps.value, r.open, n.disabled, n.readOnly]);
}
const ao = ({
  props: e,
  valueManager: n,
  valueType: r,
  wrapperVariant: o,
  additionalViewProps: s,
  validator: a,
  autoFocusView: l,
  rendererInterceptor: c,
  fieldRef: i
}) => {
  process.env.NODE_ENV !== "production" && e.renderInput != null && qn(["MUI X: The `renderInput` prop has been removed in version 6.0 of the Date and Time Pickers.", "You can replace it with the `textField` component slot in most cases.", "For more information, please have a look at the migration guide (https://mui.com/x/migration/migration-pickers-v5/#input-renderer-required-in-v5)."]);
  const u = Qs({
    props: e,
    valueManager: n,
    valueType: r,
    wrapperVariant: o,
    validator: a
  }), d = Js({
    props: e,
    additionalViewProps: s,
    autoFocusView: l,
    fieldRef: i,
    propsFromPickerValue: u.viewProps,
    rendererInterceptor: c
  }), p = ta({
    props: e,
    wrapperVariant: o,
    propsFromPickerValue: u.layoutProps,
    propsFromPickerViews: d.layoutProps
  }), h = na({
    props: e,
    pickerValueResponse: u
  });
  return {
    // Picker value
    open: u.open,
    actions: u.actions,
    fieldProps: u.fieldProps,
    // Picker views
    renderCurrentView: d.renderCurrentView,
    hasUIView: d.hasUIView,
    shouldRestoreFocus: d.shouldRestoreFocus,
    // Picker layout
    layoutProps: p.layoutProps,
    // Picker context
    contextValue: u.contextValue,
    // Picker owner state
    ownerState: h
  };
};
function io(e) {
  return me("MuiPickersLayout", e);
}
const $e = he("MuiPickersLayout", ["root", "landscape", "contentWrapper", "toolbar", "actionBar", "tabs", "shortcuts"]), oa = ["onAccept", "onClear", "onCancel", "onSetToday", "actions"];
function lo(e) {
  const {
    onAccept: n,
    onClear: r,
    onCancel: o,
    onSetToday: s,
    actions: a
  } = e, l = se(e, oa), c = Ae();
  if (a == null || a.length === 0)
    return null;
  const i = a == null ? void 0 : a.map((u) => {
    switch (u) {
      case "clear":
        return /* @__PURE__ */ P(ut, {
          onClick: r,
          children: c.clearButtonLabel
        }, u);
      case "cancel":
        return /* @__PURE__ */ P(ut, {
          onClick: o,
          children: c.cancelButtonLabel
        }, u);
      case "accept":
        return /* @__PURE__ */ P(ut, {
          onClick: n,
          children: c.okButtonLabel
        }, u);
      case "today":
        return /* @__PURE__ */ P(ut, {
          onClick: s,
          children: c.todayButtonLabel
        }, u);
      default:
        return null;
    }
  });
  return /* @__PURE__ */ P(tr, g({}, l, {
    children: i
  }));
}
process.env.NODE_ENV !== "production" && (lo.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Ordered array of actions to display.
   * If empty, does not display that action bar.
   * @default `['cancel', 'accept']` for mobile and `[]` for desktop
   */
  actions: t.arrayOf(t.oneOf(["accept", "cancel", "clear", "today"]).isRequired),
  /**
   * If `true`, the actions do not have additional margin.
   * @default false
   */
  disableSpacing: t.bool,
  onAccept: t.func.isRequired,
  onCancel: t.func.isRequired,
  onClear: t.func.isRequired,
  onSetToday: t.func.isRequired,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const st = 36, St = 2, Ct = 320, ra = 280, Gt = 336, sa = ["items", "changeImportance", "isLandscape", "onChange", "isValid"], aa = ["getValue"];
function co(e) {
  const {
    items: n,
    changeImportance: r = "accept",
    onChange: o,
    isValid: s
  } = e, a = se(e, sa);
  if (n == null || n.length === 0)
    return null;
  const l = n.map((c) => {
    let {
      getValue: i
    } = c, u = se(c, aa);
    const d = i({
      isValid: s
    });
    return g({}, u, {
      label: u.label,
      onClick: () => {
        o(d, r, u);
      },
      disabled: !s(d)
    });
  });
  return /* @__PURE__ */ P(rr, g({
    dense: !0,
    sx: [{
      maxHeight: Gt,
      maxWidth: 200,
      overflow: "auto"
    }, ...Array.isArray(a.sx) ? a.sx : [a.sx]]
  }, a, {
    children: l.map((c) => /* @__PURE__ */ P($n, {
      children: /* @__PURE__ */ P(Nn, g({}, c))
    }, c.id ?? c.label))
  }));
}
process.env.NODE_ENV !== "production" && (co.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Importance of the change when picking a shortcut:
   * - "accept": fires `onChange`, fires `onAccept` and closes the picker.
   * - "set": fires `onChange` but do not fire `onAccept` and does not close the picker.
   * @default "accept"
   */
  changeImportance: t.oneOf(["accept", "set"]),
  className: t.string,
  component: t.elementType,
  /**
   * If `true`, compact vertical padding designed for keyboard and mouse input is used for
   * the list and list items.
   * The prop is available to descendant components as the `dense` context.
   * @default false
   */
  dense: t.bool,
  /**
   * If `true`, vertical padding is removed from the list.
   * @default false
   */
  disablePadding: t.bool,
  isLandscape: t.bool.isRequired,
  isValid: t.func.isRequired,
  /**
   * Ordered array of shortcuts to display.
   * If empty, does not display the shortcuts.
   * @default []
   */
  items: t.arrayOf(t.shape({
    getValue: t.func.isRequired,
    id: t.string,
    label: t.string.isRequired
  })),
  onChange: t.func.isRequired,
  style: t.object,
  /**
   * The content of the subheader, normally `ListSubheader`.
   */
  subheader: t.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
function ia(e) {
  return e.view !== null;
}
const la = (e) => {
  const {
    classes: n,
    isLandscape: r
  } = e;
  return ge({
    root: ["root", r && "landscape"],
    contentWrapper: ["contentWrapper"],
    toolbar: ["toolbar"],
    actionBar: ["actionBar"],
    tabs: ["tabs"],
    landscape: ["landscape"],
    shortcuts: ["shortcuts"]
  }, io, n);
}, ca = (e) => {
  const {
    wrapperVariant: n,
    onAccept: r,
    onClear: o,
    onCancel: s,
    onSetToday: a,
    view: l,
    views: c,
    onViewChange: i,
    value: u,
    onChange: d,
    onSelectShortcut: p,
    isValid: h,
    isLandscape: w,
    disabled: b,
    readOnly: D,
    children: f,
    slots: v,
    slotProps: y
    // TODO: Remove this "as" hack. It get introduced to mark `value` prop in PickersLayoutProps as not required.
    // The true type should be
    // - For pickers value: TDate | null
    // - For range pickers value: [TDate | null, TDate | null]
  } = e, S = la(e), C = (v == null ? void 0 : v.actionBar) ?? lo, O = ue({
    elementType: C,
    externalSlotProps: y == null ? void 0 : y.actionBar,
    additionalProps: {
      onAccept: r,
      onClear: o,
      onCancel: s,
      onSetToday: a,
      actions: n === "desktop" ? [] : ["cancel", "accept"]
    },
    className: S.actionBar,
    ownerState: g({}, e, {
      wrapperVariant: n
    })
  }), E = /* @__PURE__ */ P(C, g({}, O)), V = v == null ? void 0 : v.toolbar, x = ue({
    elementType: V,
    externalSlotProps: y == null ? void 0 : y.toolbar,
    additionalProps: {
      isLandscape: w,
      onChange: d,
      value: u,
      view: l,
      onViewChange: i,
      views: c,
      disabled: b,
      readOnly: D
    },
    className: S.toolbar,
    ownerState: g({}, e, {
      wrapperVariant: n
    })
  }), $ = ia(x) && V ? /* @__PURE__ */ P(V, g({}, x)) : null, B = f, R = v == null ? void 0 : v.tabs, F = l && R ? /* @__PURE__ */ P(R, g({
    view: l,
    onViewChange: i,
    className: S.tabs
  }, y == null ? void 0 : y.tabs)) : null, L = (v == null ? void 0 : v.shortcuts) ?? co, M = ue({
    elementType: L,
    externalSlotProps: y == null ? void 0 : y.shortcuts,
    additionalProps: {
      isValid: h,
      isLandscape: w,
      onChange: p
    },
    className: S.shortcuts,
    ownerState: {
      isValid: h,
      isLandscape: w,
      onChange: p,
      wrapperVariant: n
    }
  }), I = l && L ? /* @__PURE__ */ P(L, g({}, M)) : null;
  return {
    toolbar: $,
    content: B,
    tabs: F,
    actionBar: E,
    shortcuts: I
  };
}, ua = (e) => {
  const {
    isLandscape: n,
    classes: r
  } = e;
  return ge({
    root: ["root", n && "landscape"],
    contentWrapper: ["contentWrapper"]
  }, io, r);
}, da = _("div", {
  name: "MuiPickersLayout",
  slot: "Root",
  overridesResolver: (e, n) => n.root
})({
  display: "grid",
  gridAutoColumns: "max-content auto max-content",
  gridAutoRows: "max-content auto max-content",
  [`& .${$e.actionBar}`]: {
    gridColumn: "1 / 4",
    gridRow: 3
  },
  variants: [{
    props: {
      isLandscape: !0
    },
    style: {
      [`& .${$e.toolbar}`]: {
        gridColumn: 1,
        gridRow: "2 / 3"
      },
      [`.${$e.shortcuts}`]: {
        gridColumn: "2 / 4",
        gridRow: 1
      }
    }
  }, {
    props: {
      isLandscape: !0,
      isRtl: !0
    },
    style: {
      [`& .${$e.toolbar}`]: {
        gridColumn: 3
      }
    }
  }, {
    props: {
      isLandscape: !1
    },
    style: {
      [`& .${$e.toolbar}`]: {
        gridColumn: "2 / 4",
        gridRow: 1
      },
      [`& .${$e.shortcuts}`]: {
        gridColumn: 1,
        gridRow: "2 / 3"
      }
    }
  }, {
    props: {
      isLandscape: !1,
      isRtl: !0
    },
    style: {
      [`& .${$e.shortcuts}`]: {
        gridColumn: 3
      }
    }
  }]
}), pa = _("div", {
  name: "MuiPickersLayout",
  slot: "ContentWrapper",
  overridesResolver: (e, n) => n.contentWrapper
})({
  gridColumn: 2,
  gridRow: 2,
  display: "flex",
  flexDirection: "column"
}), Zt = /* @__PURE__ */ m.forwardRef(function(n, r) {
  const o = be({
    props: n,
    name: "MuiPickersLayout"
  }), {
    toolbar: s,
    content: a,
    tabs: l,
    actionBar: c,
    shortcuts: i
  } = ca(o), {
    sx: u,
    className: d,
    isLandscape: p,
    wrapperVariant: h
  } = o, w = ua(o);
  return /* @__PURE__ */ ve(da, {
    ref: r,
    sx: u,
    className: pe(w.root, d),
    ownerState: o,
    children: [p ? i : s, p ? s : i, /* @__PURE__ */ P(pa, {
      className: w.contentWrapper,
      children: h === "desktop" ? /* @__PURE__ */ ve(m.Fragment, {
        children: [a, l]
      }) : /* @__PURE__ */ ve(m.Fragment, {
        children: [l, a]
      })
    }), c]
  });
});
process.env.NODE_ENV !== "production" && (Zt.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  className: t.string,
  disabled: t.bool,
  isLandscape: t.bool.isRequired,
  /**
   * `true` if the application is in right-to-left direction.
   */
  isRtl: t.bool.isRequired,
  isValid: t.func.isRequired,
  onAccept: t.func.isRequired,
  onCancel: t.func.isRequired,
  onChange: t.func.isRequired,
  onClear: t.func.isRequired,
  onClose: t.func.isRequired,
  onDismiss: t.func.isRequired,
  onOpen: t.func.isRequired,
  onSelectShortcut: t.func.isRequired,
  onSetToday: t.func.isRequired,
  onViewChange: t.func.isRequired,
  /**
   * Force rendering in particular orientation.
   */
  orientation: t.oneOf(["landscape", "portrait"]),
  readOnly: t.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: t.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  value: t.any,
  view: t.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]),
  views: t.arrayOf(t.oneOf(["day", "hours", "meridiem", "minutes", "month", "seconds", "year"]).isRequired).isRequired,
  wrapperVariant: t.oneOf(["desktop", "mobile"])
});
const fa = /* @__PURE__ */ m.createContext(null);
function uo(e) {
  const {
    contextValue: n,
    localeText: r,
    children: o
  } = e;
  return /* @__PURE__ */ P(fa.Provider, {
    value: n,
    children: /* @__PURE__ */ P(Ht, {
      localeText: r,
      children: o
    })
  });
}
const ma = ["props", "getOpenDialogAriaText"], ha = ["ownerState"], ba = ["ownerState"], ga = (e) => {
  var Z;
  let {
    props: n,
    getOpenDialogAriaText: r
  } = e, o = se(e, ma);
  const {
    slots: s,
    slotProps: a,
    className: l,
    sx: c,
    format: i,
    formatDensity: u,
    enableAccessibleFieldDOMStructure: d,
    selectedSections: p,
    onSelectedSectionsChange: h,
    timezone: w,
    name: b,
    label: D,
    inputRef: f,
    readOnly: v,
    disabled: y,
    autoFocus: S,
    localeText: C,
    reduceAnimations: O
  } = n, E = m.useRef(null), V = m.useRef(null), x = it(), $ = ((Z = a == null ? void 0 : a.toolbar) == null ? void 0 : Z.hidden) ?? !1, {
    open: B,
    actions: R,
    hasUIView: F,
    layoutProps: L,
    renderCurrentView: M,
    shouldRestoreFocus: I,
    fieldProps: A,
    contextValue: Q,
    ownerState: H
  } = ao(g({}, o, {
    props: n,
    fieldRef: V,
    autoFocusView: !0,
    additionalViewProps: {},
    wrapperVariant: "desktop"
  })), K = s.inputAdornment ?? Vn, oe = ue({
    elementType: K,
    externalSlotProps: a == null ? void 0 : a.inputAdornment,
    additionalProps: {
      position: "end"
    },
    ownerState: n
  }), J = se(oe, ha), ie = s.openPickerButton ?? yt, de = ue({
    elementType: ie,
    externalSlotProps: a == null ? void 0 : a.openPickerButton,
    additionalProps: {
      disabled: y || v,
      onClick: B ? R.onClose : R.onOpen,
      "aria-label": r(A.value),
      edge: J.position
    },
    ownerState: n
  }), le = se(de, ba), T = s.openPickerIcon, q = ue({
    elementType: T,
    externalSlotProps: a == null ? void 0 : a.openPickerIcon,
    ownerState: H
  }), W = s.field, N = ue({
    elementType: W,
    externalSlotProps: a == null ? void 0 : a.field,
    additionalProps: g({}, A, $ && {
      id: x
    }, {
      readOnly: v,
      disabled: y,
      className: l,
      sx: c,
      format: i,
      formatDensity: u,
      enableAccessibleFieldDOMStructure: d,
      selectedSections: p,
      onSelectedSectionsChange: h,
      timezone: w,
      label: D,
      name: b,
      autoFocus: S && !n.open,
      focused: B ? !0 : void 0
    }, f ? {
      inputRef: f
    } : {}),
    ownerState: n
  });
  F && (N.InputProps = g({}, N.InputProps, {
    ref: E
  }, !n.disableOpenPicker && {
    [`${J.position}Adornment`]: /* @__PURE__ */ P(K, g({}, J, {
      children: /* @__PURE__ */ P(ie, g({}, le, {
        children: /* @__PURE__ */ P(T, g({}, q))
      }))
    }))
  }));
  const X = g({
    textField: s.textField,
    clearIcon: s.clearIcon,
    clearButton: s.clearButton
  }, N.slots), ne = s.layout ?? Zt;
  let te = x;
  $ && (D ? te = `${x}-label` : te = void 0);
  const Y = g({}, a, {
    toolbar: g({}, a == null ? void 0 : a.toolbar, {
      titleId: x
    }),
    popper: g({
      "aria-labelledby": te
    }, a == null ? void 0 : a.popper)
  }), k = Ce(V, N.unstableFieldRef);
  return {
    renderPicker: () => /* @__PURE__ */ ve(uo, {
      contextValue: Q,
      localeText: C,
      children: [/* @__PURE__ */ P(W, g({}, N, {
        slots: X,
        slotProps: Y,
        unstableFieldRef: k
      })), /* @__PURE__ */ P(Hs, g({
        role: "dialog",
        placement: "bottom-start",
        anchorEl: E.current
      }, R, {
        open: B,
        slots: s,
        slotProps: Y,
        shouldRestoreFocus: I,
        reduceAnimations: O,
        children: /* @__PURE__ */ P(ne, g({}, L, Y == null ? void 0 : Y.layout, {
          slots: s,
          slotProps: Y,
          children: M()
        }))
      }))]
    })
  };
}, ya = Fe(/* @__PURE__ */ P("path", {
  d: "M7 10l5 5 5-5z"
}), "ArrowDropDown"), va = Fe(/* @__PURE__ */ P("path", {
  d: "M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"
}), "ArrowLeft"), Da = Fe(/* @__PURE__ */ P("path", {
  d: "M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
}), "ArrowRight"), wa = Fe(/* @__PURE__ */ P("path", {
  d: "M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
}), "Calendar");
Fe(/* @__PURE__ */ ve(m.Fragment, {
  children: [/* @__PURE__ */ P("path", {
    d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), /* @__PURE__ */ P("path", {
    d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
  })]
}), "Clock");
Fe(/* @__PURE__ */ P("path", {
  d: "M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z"
}), "DateRange");
Fe(/* @__PURE__ */ ve(m.Fragment, {
  children: [/* @__PURE__ */ P("path", {
    d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), /* @__PURE__ */ P("path", {
    d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
  })]
}), "Time");
const Sa = Fe(/* @__PURE__ */ P("path", {
  d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Clear"), Ca = ({
  utils: e,
  format: n
}) => {
  let r = 10, o = n, s = e.expandFormat(n);
  for (; s !== o; )
    if (o = s, s = e.expandFormat(o), r -= 1, r < 0)
      throw new Error("MUI X: The format expansion seems to be in an infinite loop. Please open an issue with the format passed to the picker component.");
  return s;
}, xa = ({
  utils: e,
  expandedFormat: n
}) => {
  const r = [], {
    start: o,
    end: s
  } = e.escapedCharacters, a = new RegExp(`(\\${o}[^\\${s}]*\\${s})+`, "g");
  let l = null;
  for (; l = a.exec(n); )
    r.push({
      start: l.index,
      end: a.lastIndex - 1
    });
  return r;
}, Pa = (e, n, r, o) => {
  switch (r.type) {
    case "year":
      return n.fieldYearPlaceholder({
        digitAmount: e.formatByString(e.date(void 0, "default"), o).length,
        format: o
      });
    case "month":
      return n.fieldMonthPlaceholder({
        contentType: r.contentType,
        format: o
      });
    case "day":
      return n.fieldDayPlaceholder({
        format: o
      });
    case "weekDay":
      return n.fieldWeekDayPlaceholder({
        contentType: r.contentType,
        format: o
      });
    case "hours":
      return n.fieldHoursPlaceholder({
        format: o
      });
    case "minutes":
      return n.fieldMinutesPlaceholder({
        format: o
      });
    case "seconds":
      return n.fieldSecondsPlaceholder({
        format: o
      });
    case "meridiem":
      return n.fieldMeridiemPlaceholder({
        format: o
      });
    default:
      return o;
  }
}, Ma = ({
  utils: e,
  date: n,
  shouldRespectLeadingZeros: r,
  localeText: o,
  localizedDigits: s,
  now: a,
  token: l,
  startSeparator: c
}) => {
  if (l === "")
    throw new Error("MUI X: Should not call `commitToken` with an empty token");
  const i = Wt(e, l), u = Zn(e, i.contentType, i.type, l), d = r ? u : i.contentType === "digit", p = n != null && e.isValid(n);
  let h = p ? e.formatByString(n, l) : "", w = null;
  if (d)
    if (u)
      w = h === "" ? e.formatByString(a, l).length : h.length;
    else {
      if (i.maxLength == null)
        throw new Error(`MUI X: The token ${l} should have a 'maxDigitNumber' property on it's adapter`);
      w = i.maxLength, p && (h = qt(_n(Ye(h, s), w), s));
    }
  return g({}, i, {
    format: l,
    maxLength: w,
    value: h,
    placeholder: Pa(e, o, i, l),
    hasLeadingZerosInFormat: u,
    hasLeadingZerosInInput: d,
    startSeparator: c,
    endSeparator: "",
    modified: !1
  });
}, ka = (e) => {
  var w;
  const {
    utils: n,
    expandedFormat: r,
    escapedParts: o
  } = e, s = n.date(void 0), a = [];
  let l = "";
  const c = Object.keys(n.formatTokenMap).sort((b, D) => D.length - b.length), i = /^([a-zA-Z]+)/, u = new RegExp(`^(${c.join("|")})*$`), d = new RegExp(`^(${c.join("|")})`), p = (b) => o.find((D) => D.start <= b && D.end >= b);
  let h = 0;
  for (; h < r.length; ) {
    const b = p(h), D = b != null, f = (w = i.exec(r.slice(h))) == null ? void 0 : w[1];
    if (!D && f != null && u.test(f)) {
      let v = f;
      for (; v.length > 0; ) {
        const y = d.exec(v)[1];
        v = v.slice(y.length), a.push(Ma(g({}, e, {
          now: s,
          token: y,
          startSeparator: l
        }))), l = "";
      }
      h += f.length;
    } else {
      const v = r[h];
      D && (b == null ? void 0 : b.start) === h || (b == null ? void 0 : b.end) === h || (a.length === 0 ? l += v : a[a.length - 1].endSeparator += v), h += 1;
    }
  }
  return a.length === 0 && l.length > 0 && a.push({
    type: "empty",
    contentType: "letter",
    maxLength: null,
    format: "",
    value: "",
    placeholder: "",
    hasLeadingZerosInFormat: !1,
    hasLeadingZerosInInput: !1,
    startSeparator: l,
    endSeparator: "",
    modified: !1
  }), a;
}, Ta = ({
  isRtl: e,
  formatDensity: n,
  sections: r
}) => r.map((o) => {
  const s = (a) => {
    let l = a;
    return e && l !== null && l.includes(" ") && (l = `⁩${l}⁦`), n === "spacious" && ["/", ".", "-"].includes(l) && (l = ` ${l} `), l;
  };
  return o.startSeparator = s(o.startSeparator), o.endSeparator = s(o.endSeparator), o;
}), Pn = (e) => {
  let n = Ca(e);
  e.isRtl && e.enableAccessibleFieldDOMStructure && (n = n.split(" ").reverse().join(" "));
  const r = xa(g({}, e, {
    expandedFormat: n
  })), o = ka(g({}, e, {
    expandedFormat: n,
    escapedParts: r
  }));
  return Ta(g({}, e, {
    sections: o
  }));
}, Oa = (e) => {
  const n = ye(), r = Ae(), o = We(), s = Ee(), {
    valueManager: a,
    fieldValueManager: l,
    valueType: c,
    validator: i,
    internalProps: u,
    internalProps: {
      value: d,
      defaultValue: p,
      referenceDate: h,
      onChange: w,
      format: b,
      formatDensity: D = "dense",
      selectedSections: f,
      onSelectedSectionsChange: v,
      shouldRespectLeadingZeros: y = !1,
      timezone: S,
      enableAccessibleFieldDOMStructure: C = !1
    }
  } = e, {
    timezone: O,
    value: E,
    handleValueChange: V
  } = _t({
    timezone: S,
    value: d,
    defaultValue: p,
    onChange: w,
    valueManager: a
  }), x = m.useMemo(() => os(n), [n]), $ = m.useMemo(() => ls(n, x, O), [n, x, O]), B = m.useCallback((T, q = null) => l.getSectionsFromValue(n, T, q, (W) => Pn({
    utils: n,
    localeText: r,
    localizedDigits: x,
    format: b,
    date: W,
    formatDensity: D,
    shouldRespectLeadingZeros: y,
    enableAccessibleFieldDOMStructure: C,
    isRtl: s
  })), [l, b, r, x, s, y, n, D, C]), [R, F] = m.useState(() => {
    const T = B(E);
    vn(T, c);
    const q = {
      sections: T,
      value: E,
      referenceValue: a.emptyValue,
      tempValueStrAndroid: null
    }, W = Jr(T), N = a.getInitialReferenceValue({
      referenceDate: h,
      value: E,
      utils: n,
      props: u,
      granularity: W,
      timezone: O
    });
    return g({}, q, {
      referenceValue: N
    });
  }), [L, M] = ze({
    controlled: f,
    default: null,
    name: "useField",
    state: "selectedSections"
  }), I = (T) => {
    M(T), v == null || v(T);
  }, A = m.useMemo(() => Nt(L, R.sections), [L, R.sections]), Q = A === "all" ? 0 : A, H = ({
    value: T,
    referenceValue: q,
    sections: W
  }) => {
    if (F((X) => g({}, X, {
      sections: W,
      value: T,
      referenceValue: q,
      tempValueStrAndroid: null
    })), a.areValuesEqual(n, R.value, T))
      return;
    const N = {
      validationError: i({
        adapter: o,
        value: T,
        timezone: O,
        props: u
      })
    };
    V(T, N);
  }, K = (T, q) => {
    const W = [...R.sections];
    return W[T] = g({}, W[T], {
      value: q,
      modified: !0
    }), W;
  }, oe = () => {
    H({
      value: a.emptyValue,
      referenceValue: R.referenceValue,
      sections: B(a.emptyValue)
    });
  }, J = () => {
    if (Q == null)
      return;
    const T = R.sections[Q], q = l.getActiveDateManager(n, R, T), N = q.getSections(R.sections).filter((Y) => Y.value !== "").length === (T.value === "" ? 0 : 1), X = K(Q, ""), ne = N ? null : n.getInvalidDate(), te = q.getNewValuesFromNewActiveDate(ne);
    H(g({}, te, {
      sections: X
    }));
  }, ie = (T) => {
    const q = (X, ne) => {
      const te = n.parse(X, b);
      if (te == null || !n.isValid(te))
        return null;
      const Y = Pn({
        utils: n,
        localeText: r,
        localizedDigits: x,
        format: b,
        date: te,
        formatDensity: D,
        shouldRespectLeadingZeros: y,
        enableAccessibleFieldDOMStructure: C,
        isRtl: s
      });
      return wn(n, te, Y, ne, !1);
    }, W = l.parseValueStr(T, R.referenceValue, q), N = l.updateReferenceValue(n, W, R.referenceValue);
    H({
      value: W,
      referenceValue: N,
      sections: B(W, R.sections)
    });
  }, de = ({
    activeSection: T,
    newSectionValue: q,
    shouldGoToNextSection: W
  }) => {
    W && Q < R.sections.length - 1 && I(Q + 1);
    const N = l.getActiveDateManager(n, R, T), X = K(Q, q), ne = N.getSections(X), te = ss(n, ne, x);
    let Y, k;
    if (te != null && n.isValid(te)) {
      const z = wn(n, te, ne, N.referenceDate, !0);
      Y = N.getNewValuesFromNewActiveDate(z), k = !0;
    } else
      Y = N.getNewValuesFromNewActiveDate(te), k = (te != null && !n.isValid(te)) != (N.date != null && !n.isValid(N.date));
    return k ? H(g({}, Y, {
      sections: X
    })) : F((z) => g({}, z, Y, {
      sections: X,
      tempValueStrAndroid: null
    }));
  }, le = (T) => F((q) => g({}, q, {
    tempValueStrAndroid: T
  }));
  return m.useEffect(() => {
    const T = B(R.value);
    vn(T, c), F((q) => g({}, q, {
      sections: T
    }));
  }, [b, n.locale, s]), m.useEffect(() => {
    let T;
    a.areValuesEqual(n, R.value, E) ? T = a.getTimezone(n, R.value) !== a.getTimezone(n, E) : T = !0, T && F((q) => g({}, q, {
      value: E,
      referenceValue: l.updateReferenceValue(n, E, q.referenceValue),
      sections: B(E)
    }));
  }, [E]), {
    state: R,
    activeSectionIndex: Q,
    parsedSelectedSections: A,
    setSelectedSections: I,
    clearValue: oe,
    clearActiveSection: J,
    updateSectionValue: de,
    updateValueFromValueStr: ie,
    setTempAndroidValueStr: le,
    getSectionsFromValue: B,
    sectionsValueBoundaries: $,
    localizedDigits: x,
    timezone: O
  };
}, Ra = 5e3, Ue = (e) => e.saveQuery != null, Ia = ({
  sections: e,
  updateSectionValue: n,
  sectionsValueBoundaries: r,
  localizedDigits: o,
  setTempAndroidValueStr: s,
  timezone: a
}) => {
  const l = ye(), [c, i] = m.useState(null), u = G(() => i(null));
  m.useEffect(() => {
    var b;
    c != null && ((b = e[c.sectionIndex]) == null ? void 0 : b.type) !== c.sectionType && u();
  }, [e, c, u]), m.useEffect(() => {
    if (c != null) {
      const b = setTimeout(() => u(), Ra);
      return () => {
        clearTimeout(b);
      };
    }
    return () => {
    };
  }, [c, u]);
  const d = ({
    keyPressed: b,
    sectionIndex: D
  }, f, v) => {
    const y = b.toLowerCase(), S = e[D];
    if (c != null && (!v || v(c.value)) && c.sectionIndex === D) {
      const O = `${c.value}${y}`, E = f(O, S);
      if (!Ue(E))
        return i({
          sectionIndex: D,
          value: O,
          sectionType: S.type
        }), E;
    }
    const C = f(y, S);
    return Ue(C) && !C.saveQuery ? (u(), null) : (i({
      sectionIndex: D,
      value: y,
      sectionType: S.type
    }), Ue(C) ? null : C);
  }, p = (b) => {
    const D = (y, S, C) => {
      const O = S.filter((E) => E.toLowerCase().startsWith(C));
      return O.length === 0 ? {
        saveQuery: !1
      } : {
        sectionValue: O[0],
        shouldGoToNextSection: O.length === 1
      };
    }, f = (y, S, C, O) => {
      const E = (V) => Hn(l, a, S.type, V);
      if (S.contentType === "letter")
        return D(S.format, E(S.format), y);
      if (C && O != null && Wt(l, C).contentType === "letter") {
        const V = E(C), x = D(C, V, y);
        return Ue(x) ? {
          saveQuery: !1
        } : g({}, x, {
          sectionValue: O(x.sectionValue, V)
        });
      }
      return {
        saveQuery: !1
      };
    };
    return d(b, (y, S) => {
      switch (S.type) {
        case "month": {
          const C = (O) => gn(l, O, l.formats.month, S.format);
          return f(y, S, l.formats.month, C);
        }
        case "weekDay": {
          const C = (O, E) => E.indexOf(O).toString();
          return f(y, S, l.formats.weekday, C);
        }
        case "meridiem":
          return f(y, S);
        default:
          return {
            saveQuery: !1
          };
      }
    });
  }, h = (b) => {
    const D = (v, y) => {
      const S = Ye(v, o), C = Number(S), O = r[y.type]({
        currentDate: null,
        format: y.format,
        contentType: y.contentType
      });
      if (C > O.maximum)
        return {
          saveQuery: !1
        };
      if (C < O.minimum)
        return {
          saveQuery: !0
        };
      const E = C * 10 > O.maximum || S.length === O.maximum.toString().length;
      return {
        sectionValue: Kn(l, C, O, o, y),
        shouldGoToNextSection: E
      };
    };
    return d(b, (v, y) => {
      if (y.contentType === "digit" || y.contentType === "digit-with-letter")
        return D(v, y);
      if (y.type === "month") {
        const S = Zn(l, "digit", "month", "MM"), C = D(v, {
          type: y.type,
          format: "MM",
          hasLeadingZerosInFormat: S,
          hasLeadingZerosInInput: !0,
          contentType: "digit",
          maxLength: 2
        });
        if (Ue(C))
          return C;
        const O = gn(l, C.sectionValue, "MM", y.format);
        return g({}, C, {
          sectionValue: O
        });
      }
      if (y.type === "weekDay") {
        const S = D(v, y);
        if (Ue(S))
          return S;
        const C = Dt(l, y.format)[Number(S.sectionValue) - 1];
        return g({}, S, {
          sectionValue: C
        });
      }
      return {
        saveQuery: !1
      };
    }, (v) => bn(v, o));
  };
  return {
    applyCharacterEditing: G((b) => {
      const D = e[b.sectionIndex], v = bn(b.keyPressed, o) ? h(g({}, b, {
        keyPressed: qt(b.keyPressed, o)
      })) : p(b);
      if (v == null) {
        s(null);
        return;
      }
      n({
        activeSection: D,
        newSectionValue: v.sectionValue,
        shouldGoToNextSection: v.shouldGoToNextSection
      });
    }),
    resetCharacterQuery: u
  };
}, Va = (e) => {
  const {
    internalProps: {
      disabled: n,
      readOnly: r = !1
    },
    forwardedProps: {
      sectionListRef: o,
      onBlur: s,
      onClick: a,
      onFocus: l,
      onInput: c,
      onPaste: i,
      focused: u,
      autoFocus: d = !1
    },
    fieldValueManager: p,
    applyCharacterEditing: h,
    resetCharacterQuery: w,
    setSelectedSections: b,
    parsedSelectedSections: D,
    state: f,
    clearActiveSection: v,
    clearValue: y,
    updateSectionValue: S,
    updateValueFromValueStr: C,
    sectionOrder: O,
    areAllSectionsEmpty: E,
    sectionsValueBoundaries: V
  } = e, x = m.useRef(null), $ = Ce(o, x), B = Ae(), R = ye(), F = it(), [L, M] = m.useState(!1), I = m.useMemo(() => ({
    syncSelectionToDOM: () => {
      if (!x.current)
        return;
      const k = document.getSelection();
      if (!k)
        return;
      if (D == null) {
        k.rangeCount > 0 && x.current.getRoot().contains(k.getRangeAt(0).startContainer) && k.removeAllRanges(), L && x.current.getRoot().blur();
        return;
      }
      if (!x.current.getRoot().contains(xe(document)))
        return;
      const z = new window.Range();
      let Z;
      D === "all" ? Z = x.current.getRoot() : f.sections[D].type === "empty" ? Z = x.current.getSectionContainer(D) : Z = x.current.getSectionContent(D), z.selectNodeContents(Z), Z.focus(), k.removeAllRanges(), k.addRange(z);
    },
    getActiveSectionIndexFromDOM: () => {
      const k = xe(document);
      return !k || !x.current || !x.current.getRoot().contains(k) ? null : x.current.getSectionIndexFromDOMElement(k);
    },
    focusField: (k = 0) => {
      if (!x.current)
        return;
      const z = Nt(k, f.sections);
      M(!0), x.current.getSectionContent(z).focus();
    },
    setSelectedSections: (k) => {
      if (!x.current)
        return;
      const z = Nt(k, f.sections);
      M((z === "all" ? 0 : z) !== null), b(k);
    },
    isFieldFocused: () => {
      const k = xe(document);
      return !!x.current && x.current.getRoot().contains(k);
    }
  }), [D, b, f.sections, L]), A = G((k) => {
    if (!x.current)
      return;
    const z = f.sections[k];
    x.current.getSectionContent(k).innerHTML = z.value || z.placeholder, I.syncSelectionToDOM();
  }), Q = G((k, ...z) => {
    k.isDefaultPrevented() || !x.current || (M(!0), a == null || a(k, ...z), D === "all" ? setTimeout(() => {
      const Z = document.getSelection().getRangeAt(0).startOffset;
      if (Z === 0) {
        b(O.startIndex);
        return;
      }
      let j = 0, ee = 0;
      for (; ee < Z && j < f.sections.length; ) {
        const U = f.sections[j];
        j += 1, ee += `${U.startSeparator}${U.value || U.placeholder}${U.endSeparator}`.length;
      }
      b(j - 1);
    }) : L ? x.current.getRoot().contains(k.target) || b(O.startIndex) : (M(!0), b(O.startIndex)));
  }), H = G((k) => {
    if (c == null || c(k), !x.current || D !== "all")
      return;
    const Z = k.target.textContent ?? "";
    x.current.getRoot().innerHTML = f.sections.map((j) => `${j.startSeparator}${j.value || j.placeholder}${j.endSeparator}`).join(""), I.syncSelectionToDOM(), Z.length === 0 || Z.charCodeAt(0) === 10 ? (w(), y(), b("all")) : Z.length > 1 ? C(Z) : h({
      keyPressed: Z,
      sectionIndex: 0
    });
  }), K = G((k) => {
    if (i == null || i(k), r || D !== "all") {
      k.preventDefault();
      return;
    }
    const z = k.clipboardData.getData("text");
    k.preventDefault(), w(), C(z);
  }), oe = G((...k) => {
    if (l == null || l(...k), L || !x.current)
      return;
    M(!0), x.current.getSectionIndexFromDOMElement(xe(document)) != null || b(O.startIndex);
  }), J = G((...k) => {
    s == null || s(...k), setTimeout(() => {
      if (!x.current)
        return;
      const z = xe(document);
      !x.current.getRoot().contains(z) && (M(!1), b(null));
    });
  }), ie = G((k) => (z) => {
    z.isDefaultPrevented() || b(k);
  }), de = G((k) => {
    k.preventDefault();
  }), le = G((k) => () => {
    b(k);
  }), T = G((k) => {
    if (k.preventDefault(), r || n || typeof D != "number")
      return;
    const z = f.sections[D], Z = k.clipboardData.getData("text"), j = /^[a-zA-Z]+$/.test(Z), ee = /^[0-9]+$/.test(Z), U = /^(([a-zA-Z]+)|)([0-9]+)(([a-zA-Z]+)|)$/.test(Z);
    z.contentType === "letter" && j || z.contentType === "digit" && ee || z.contentType === "digit-with-letter" && U ? (w(), S({
      activeSection: z,
      newSectionValue: Z,
      shouldGoToNextSection: !0
    })) : !j && !ee && (w(), C(Z));
  }), q = G((k) => {
    k.preventDefault(), k.dataTransfer.dropEffect = "none";
  }), W = G((k) => {
    if (!x.current)
      return;
    const z = k.target, Z = z.textContent ?? "", j = x.current.getSectionIndexFromDOMElement(z), ee = f.sections[j];
    if (r || !x.current) {
      A(j);
      return;
    }
    if (Z.length === 0) {
      if (ee.value === "") {
        A(j);
        return;
      }
      const U = k.nativeEvent.inputType;
      if (U === "insertParagraph" || U === "insertLineBreak") {
        A(j);
        return;
      }
      w(), v();
      return;
    }
    h({
      keyPressed: Z,
      sectionIndex: j
    }), A(j);
  });
  Ie(() => {
    if (!(!L || !x.current)) {
      if (D === "all")
        x.current.getRoot().focus();
      else if (typeof D == "number") {
        const k = x.current.getSectionContent(D);
        k && k.focus();
      }
    }
  }, [D, L]);
  const N = m.useMemo(() => f.sections.reduce((k, z) => (k[z.type] = V[z.type]({
    currentDate: null,
    contentType: z.contentType,
    format: z.format
  }), k), {}), [V, f.sections]), X = D === "all", ne = m.useMemo(() => f.sections.map((k, z) => {
    const Z = !X && !n && !r;
    return {
      container: {
        "data-sectionindex": z,
        onClick: ie(z)
      },
      content: {
        tabIndex: X || z > 0 ? -1 : 0,
        contentEditable: !X && !n && !r,
        role: "spinbutton",
        id: `${F}-${k.type}`,
        "aria-labelledby": `${F}-${k.type}`,
        "aria-readonly": r,
        "aria-valuenow": fs(k, R),
        "aria-valuemin": N[k.type].minimum,
        "aria-valuemax": N[k.type].maximum,
        "aria-valuetext": k.value ? ps(k, R) : B.empty,
        "aria-label": B[k.type],
        "aria-disabled": n,
        spellCheck: Z ? !1 : void 0,
        autoCapitalize: Z ? "off" : void 0,
        autoCorrect: Z ? "off" : void 0,
        [parseInt(m.version, 10) >= 17 ? "enterKeyHint" : "enterkeyhint"]: Z ? "next" : void 0,
        children: k.value || k.placeholder,
        onInput: W,
        onPaste: T,
        onFocus: le(z),
        onDragOver: q,
        onMouseUp: de,
        inputMode: k.contentType === "letter" ? "text" : "numeric"
      },
      before: {
        children: k.startSeparator
      },
      after: {
        children: k.endSeparator
      }
    };
  }), [f.sections, le, T, q, W, ie, de, n, r, X, B, R, N, F]), te = G((k) => {
    C(k.target.value);
  }), Y = m.useMemo(() => E ? "" : p.getV7HiddenInputValueFromSections(f.sections), [E, f.sections, p]);
  return m.useEffect(() => {
    if (x.current == null)
      throw new Error(["MUI X: The `sectionListRef` prop has not been initialized by `PickersSectionList`", "You probably tried to pass a component to the `textField` slot that contains an `<input />` element instead of a `PickersSectionList`.", "", "If you want to keep using an `<input />` HTML element for the editing, please remove the `enableAccessibleFieldDOMStructure` prop from your picker or field component:", "", "<DatePicker slots={{ textField: MyCustomTextField }} />", "", "Learn more about the field accessible DOM structure on the MUI documentation: https://mui.com/x/react-date-pickers/fields/#fields-to-edit-a-single-element"].join(`
`));
    d && x.current && x.current.getSectionContent(O.startIndex).focus();
  }, []), {
    interactions: I,
    returnedValue: {
      // Forwarded
      autoFocus: d,
      readOnly: r,
      focused: u ?? L,
      sectionListRef: $,
      onBlur: J,
      onClick: Q,
      onFocus: oe,
      onInput: H,
      onPaste: K,
      // Additional
      enableAccessibleFieldDOMStructure: !0,
      elements: ne,
      // TODO v7: Try to set to undefined when there is a section selected.
      tabIndex: D === 0 ? -1 : 0,
      contentEditable: X,
      value: Y,
      onChange: te,
      areAllSectionsEmpty: E
    }
  };
}, He = (e) => e.replace(/[\u2066\u2067\u2068\u2069]/g, ""), Fa = (e, n, r) => {
  let o = 0, s = r ? 1 : 0;
  const a = [];
  for (let l = 0; l < e.length; l += 1) {
    const c = e[l], i = Ut(c, r ? "input-rtl" : "input-ltr", n), u = `${c.startSeparator}${i}${c.endSeparator}`, d = He(u).length, p = u.length, h = He(i), w = s + (h === "" ? 0 : i.indexOf(h[0])) + c.startSeparator.length, b = w + h.length;
    a.push(g({}, c, {
      start: o,
      end: o + d,
      startInInput: w,
      endInInput: b
    })), o += d, s += p;
  }
  return a;
}, Ea = (e) => {
  const n = Ee(), r = m.useRef(), o = m.useRef(), {
    forwardedProps: {
      onFocus: s,
      onClick: a,
      onPaste: l,
      onBlur: c,
      inputRef: i,
      placeholder: u
    },
    internalProps: {
      readOnly: d = !1,
      disabled: p = !1
    },
    parsedSelectedSections: h,
    activeSectionIndex: w,
    state: b,
    fieldValueManager: D,
    valueManager: f,
    applyCharacterEditing: v,
    resetCharacterQuery: y,
    updateSectionValue: S,
    updateValueFromValueStr: C,
    clearActiveSection: O,
    clearValue: E,
    setTempAndroidValueStr: V,
    setSelectedSections: x,
    getSectionsFromValue: $,
    areAllSectionsEmpty: B,
    localizedDigits: R
  } = e, F = m.useRef(null), L = Ce(i, F), M = m.useMemo(() => Fa(b.sections, R, n), [b.sections, R, n]), I = m.useMemo(() => ({
    syncSelectionToDOM: () => {
      if (!F.current)
        return;
      if (h == null) {
        F.current.scrollLeft && (F.current.scrollLeft = 0);
        return;
      }
      if (F.current !== xe(document))
        return;
      const W = F.current.scrollTop;
      if (h === "all")
        F.current.select();
      else {
        const N = M[h], X = N.type === "empty" ? N.startInInput - N.startSeparator.length : N.startInInput, ne = N.type === "empty" ? N.endInInput + N.endSeparator.length : N.endInInput;
        (X !== F.current.selectionStart || ne !== F.current.selectionEnd) && F.current === xe(document) && F.current.setSelectionRange(X, ne), clearTimeout(o.current), o.current = setTimeout(() => {
          F.current && F.current === xe(document) && // The section might loose all selection, where `selectionStart === selectionEnd`
          // https://github.com/mui/mui-x/pull/13652
          F.current.selectionStart === F.current.selectionEnd && (F.current.selectionStart !== X || F.current.selectionEnd !== ne) && I.syncSelectionToDOM();
        });
      }
      F.current.scrollTop = W;
    },
    getActiveSectionIndexFromDOM: () => {
      const W = F.current.selectionStart ?? 0, N = F.current.selectionEnd ?? 0;
      if (W === 0 && N === 0)
        return null;
      const X = W <= M[0].startInInput ? 1 : M.findIndex((ne) => ne.startInInput - ne.startSeparator.length > W);
      return X === -1 ? M.length - 1 : X - 1;
    },
    focusField: (W = 0) => {
      var N;
      (N = F.current) == null || N.focus(), x(W);
    },
    setSelectedSections: (W) => x(W),
    isFieldFocused: () => F.current === xe(document)
  }), [F, h, M, x]), A = () => {
    const W = F.current.selectionStart ?? 0;
    let N;
    W <= M[0].startInInput || W >= M[M.length - 1].endInInput ? N = 1 : N = M.findIndex((ne) => ne.startInInput - ne.startSeparator.length > W);
    const X = N === -1 ? M.length - 1 : N - 1;
    x(X);
  }, Q = G((...W) => {
    s == null || s(...W);
    const N = F.current;
    clearTimeout(r.current), r.current = setTimeout(() => {
      !N || N !== F.current || w == null && (// avoid selecting all sections when focusing empty field without value
      N.value.length && Number(N.selectionEnd) - Number(N.selectionStart) === N.value.length ? x("all") : A());
    });
  }), H = G((W, ...N) => {
    W.isDefaultPrevented() || (a == null || a(W, ...N), A());
  }), K = G((W) => {
    if (l == null || l(W), W.preventDefault(), d || p)
      return;
    const N = W.clipboardData.getData("text");
    if (typeof h == "number") {
      const X = b.sections[h], ne = /^[a-zA-Z]+$/.test(N), te = /^[0-9]+$/.test(N), Y = /^(([a-zA-Z]+)|)([0-9]+)(([a-zA-Z]+)|)$/.test(N);
      if (X.contentType === "letter" && ne || X.contentType === "digit" && te || X.contentType === "digit-with-letter" && Y) {
        y(), S({
          activeSection: X,
          newSectionValue: N,
          shouldGoToNextSection: !0
        });
        return;
      }
      if (ne || te)
        return;
    }
    y(), C(N);
  }), oe = G((...W) => {
    c == null || c(...W), x(null);
  }), J = G((W) => {
    if (d)
      return;
    const N = W.target.value;
    if (N === "") {
      y(), E();
      return;
    }
    const X = W.nativeEvent.data, ne = X && X.length > 1, te = ne ? X : N, Y = He(te);
    if (w == null || ne) {
      C(ne ? X : Y);
      return;
    }
    let k;
    if (h === "all" && Y.length === 1)
      k = Y;
    else {
      const z = He(D.getV6InputValueFromSections(M, R, n));
      let Z = -1, j = -1;
      for (let fe = 0; fe < z.length; fe += 1)
        Z === -1 && z[fe] !== Y[fe] && (Z = fe), j === -1 && z[z.length - fe - 1] !== Y[Y.length - fe - 1] && (j = fe);
      const ee = M[w];
      if (Z < ee.start || z.length - j - 1 > ee.end)
        return;
      const re = Y.length - z.length + ee.end - He(ee.endSeparator || "").length;
      k = Y.slice(ee.start + He(ee.startSeparator || "").length, re);
    }
    if (k.length === 0) {
      us() && V(te), y(), O();
      return;
    }
    v({
      keyPressed: k,
      sectionIndex: w
    });
  }), ie = m.useMemo(() => u !== void 0 ? u : D.getV6InputValueFromSections($(f.emptyValue), R, n), [u, D, $, f.emptyValue, R, n]), de = m.useMemo(() => b.tempValueStrAndroid ?? D.getV6InputValueFromSections(b.sections, R, n), [b.sections, D, b.tempValueStrAndroid, R, n]);
  m.useEffect(() => (F.current && F.current === xe(document) && x("all"), () => {
    clearTimeout(r.current), clearTimeout(o.current);
  }), []);
  const le = m.useMemo(() => w == null || b.sections[w].contentType === "letter" ? "text" : "numeric", [w, b.sections]), q = !(F.current && F.current === xe(document)) && B;
  return {
    interactions: I,
    returnedValue: {
      // Forwarded
      readOnly: d,
      onBlur: oe,
      onClick: H,
      onFocus: Q,
      onPaste: K,
      inputRef: L,
      // Additional
      enableAccessibleFieldDOMStructure: !1,
      placeholder: ie,
      inputMode: le,
      autoComplete: "off",
      value: q ? "" : de,
      onChange: J
    }
  };
}, Aa = (e) => {
  const n = ye(), {
    internalProps: r,
    internalProps: {
      unstableFieldRef: o,
      minutesStep: s,
      enableAccessibleFieldDOMStructure: a = !1,
      disabled: l = !1,
      readOnly: c = !1
    },
    forwardedProps: {
      onKeyDown: i,
      error: u,
      clearable: d,
      onClear: p
    },
    fieldValueManager: h,
    valueManager: w,
    validator: b
  } = e, D = Ee(), f = Oa(e), {
    state: v,
    activeSectionIndex: y,
    parsedSelectedSections: S,
    setSelectedSections: C,
    clearValue: O,
    clearActiveSection: E,
    updateSectionValue: V,
    setTempAndroidValueStr: x,
    sectionsValueBoundaries: $,
    localizedDigits: B,
    timezone: R
  } = f, F = Ia({
    sections: v.sections,
    updateSectionValue: V,
    sectionsValueBoundaries: $,
    localizedDigits: B,
    setTempAndroidValueStr: x,
    timezone: R
  }), {
    resetCharacterQuery: L
  } = F, M = w.areValuesEqual(n, v.value, w.emptyValue), I = a ? Va : Ea, A = m.useMemo(() => ds(v.sections, D && !a), [v.sections, D, a]), {
    returnedValue: Q,
    interactions: H
  } = I(g({}, e, f, F, {
    areAllSectionsEmpty: M,
    sectionOrder: A
  })), K = G((T) => {
    if (i == null || i(T), !l)
      switch (!0) {
        case ((T.ctrlKey || T.metaKey) && String.fromCharCode(T.keyCode) === "A" && !T.shiftKey && !T.altKey): {
          T.preventDefault(), C("all");
          break;
        }
        case T.key === "ArrowRight": {
          if (T.preventDefault(), S == null)
            C(A.startIndex);
          else if (S === "all")
            C(A.endIndex);
          else {
            const q = A.neighbors[S].rightIndex;
            q !== null && C(q);
          }
          break;
        }
        case T.key === "ArrowLeft": {
          if (T.preventDefault(), S == null)
            C(A.endIndex);
          else if (S === "all")
            C(A.startIndex);
          else {
            const q = A.neighbors[S].leftIndex;
            q !== null && C(q);
          }
          break;
        }
        case T.key === "Delete": {
          if (T.preventDefault(), c)
            break;
          S == null || S === "all" ? O() : E(), L();
          break;
        }
        case ["ArrowUp", "ArrowDown", "Home", "End", "PageUp", "PageDown"].includes(T.key): {
          if (T.preventDefault(), c || y == null)
            break;
          const q = v.sections[y], W = h.getActiveDateManager(n, v, q), N = rs(n, R, q, T.key, $, B, W.date, {
            minutesStep: s
          });
          V({
            activeSection: q,
            newSectionValue: N,
            shouldGoToNextSection: !1
          });
          break;
        }
      }
  });
  Ie(() => {
    H.syncSelectionToDOM();
  });
  const {
    hasValidationError: oe
  } = oo({
    props: r,
    validator: b,
    timezone: R,
    value: v.value,
    onError: r.onError
  }), J = m.useMemo(() => u !== void 0 ? u : oe, [oe, u]);
  m.useEffect(() => {
    !J && y == null && L();
  }, [v.referenceValue, y, J]), m.useEffect(() => {
    v.tempValueStrAndroid != null && y != null && (L(), E());
  }, [v.sections]), m.useImperativeHandle(o, () => ({
    getSections: () => v.sections,
    getActiveSectionIndex: H.getActiveSectionIndexFromDOM,
    setSelectedSections: H.setSelectedSections,
    focusField: H.focusField,
    isFieldFocused: H.isFieldFocused
  }));
  const ie = G((T, ...q) => {
    T.preventDefault(), p == null || p(T, ...q), O(), H.isFieldFocused() ? C(A.startIndex) : H.focusField(0);
  }), de = {
    onKeyDown: K,
    onClear: ie,
    error: J,
    clearable: !!(d && !M && !c && !l)
  }, le = {
    disabled: l,
    readOnly: c
  };
  return g({}, e.forwardedProps, de, le, Q);
}, La = ["clearable", "onClear", "InputProps", "sx", "slots", "slotProps"], Na = ["ownerState"], $a = (e) => {
  const n = Ae(), {
    clearable: r,
    onClear: o,
    InputProps: s,
    sx: a,
    slots: l,
    slotProps: c
  } = e, i = se(e, La), u = (l == null ? void 0 : l.clearButton) ?? yt, d = ue({
    elementType: u,
    externalSlotProps: c == null ? void 0 : c.clearButton,
    ownerState: {},
    className: "clearButton",
    additionalProps: {
      title: n.fieldClearLabel
    }
  }), p = se(d, Na), h = (l == null ? void 0 : l.clearIcon) ?? Sa, w = ue({
    elementType: h,
    externalSlotProps: c == null ? void 0 : c.clearIcon,
    ownerState: {}
  });
  return g({}, i, {
    InputProps: g({}, s, {
      endAdornment: /* @__PURE__ */ ve(m.Fragment, {
        children: [r && /* @__PURE__ */ P(Vn, {
          position: "end",
          sx: {
            marginRight: s != null && s.endAdornment ? -1 : -1.5
          },
          children: /* @__PURE__ */ P(u, g({}, p, {
            onClick: o,
            children: /* @__PURE__ */ P(h, g({
              fontSize: "small"
            }, w))
          }))
        }), s == null ? void 0 : s.endAdornment]
      })
    }),
    sx: [{
      "& .clearButton": {
        opacity: 1
      },
      "@media (pointer: fine)": {
        "& .clearButton": {
          opacity: 0
        },
        "&:hover, &:focus-within": {
          ".clearButton": {
            opacity: 1
          }
        }
      }
    }, ...Array.isArray(a) ? a : [a]]
  });
}, Ba = ["value", "defaultValue", "referenceDate", "format", "formatDensity", "onChange", "timezone", "onError", "shouldRespectLeadingZeros", "selectedSections", "onSelectedSectionsChange", "unstableFieldRef", "enableAccessibleFieldDOMStructure", "disabled", "readOnly", "dateSeparator"], ja = (e, n) => m.useMemo(() => {
  const r = g({}, e), o = {}, s = (a) => {
    r.hasOwnProperty(a) && (o[a] = r[a], delete r[a]);
  };
  return Ba.forEach(s), to.forEach(s), {
    forwardedProps: r,
    internalProps: o
  };
}, [e, n]), za = (e) => {
  const n = ye(), r = lt();
  return g({}, e, {
    disablePast: e.disablePast ?? !1,
    disableFuture: e.disableFuture ?? !1,
    format: e.format ?? n.formats.keyboardDate,
    minDate: Me(n, e.minDate, r.minDate),
    maxDate: Me(n, e.maxDate, r.maxDate)
  });
}, Ya = (e) => {
  const n = za(e), {
    forwardedProps: r,
    internalProps: o
  } = ja(n, "date");
  return Aa({
    forwardedProps: r,
    internalProps: o,
    valueManager: Re,
    fieldValueManager: hs,
    validator: ct,
    valueType: "date"
  });
};
function Wa(e) {
  return me("MuiPickersTextField", e);
}
he("MuiPickersTextField", ["root", "focused", "disabled", "error", "required"]);
function qa(e) {
  return me("MuiPickersInputBase", e);
}
const Ke = he("MuiPickersInputBase", ["root", "focused", "disabled", "error", "notchedOutline", "sectionContent", "sectionBefore", "sectionAfter", "adornedStart", "adornedEnd", "input"]);
function Ua(e) {
  return me("MuiPickersSectionList", e);
}
const tt = he("MuiPickersSectionList", ["root", "section", "sectionContent"]), Ha = ["slots", "slotProps", "elements", "sectionListRef"], po = _("div", {
  name: "MuiPickersSectionList",
  slot: "Root",
  overridesResolver: (e, n) => n.root
})({
  direction: "ltr /*! @noflip */",
  outline: "none"
}), fo = _("span", {
  name: "MuiPickersSectionList",
  slot: "Section",
  overridesResolver: (e, n) => n.section
})({}), mo = _("span", {
  name: "MuiPickersSectionList",
  slot: "SectionSeparator",
  overridesResolver: (e, n) => n.sectionSeparator
})({
  whiteSpace: "pre"
}), ho = _("span", {
  name: "MuiPickersSectionList",
  slot: "SectionContent",
  overridesResolver: (e, n) => n.sectionContent
})({
  outline: "none"
}), _a = (e) => {
  const {
    classes: n
  } = e;
  return ge({
    root: ["root"],
    section: ["section"],
    sectionContent: ["sectionContent"]
  }, Ua, n);
};
function bo(e) {
  const {
    slots: n,
    slotProps: r,
    element: o,
    classes: s
  } = e, a = (n == null ? void 0 : n.section) ?? fo, l = ue({
    elementType: a,
    externalSlotProps: r == null ? void 0 : r.section,
    externalForwardedProps: o.container,
    className: s.section,
    ownerState: {}
  }), c = (n == null ? void 0 : n.sectionContent) ?? ho, i = ue({
    elementType: c,
    externalSlotProps: r == null ? void 0 : r.sectionContent,
    externalForwardedProps: o.content,
    additionalProps: {
      suppressContentEditableWarning: !0
    },
    className: s.sectionContent,
    ownerState: {}
  }), u = (n == null ? void 0 : n.sectionSeparator) ?? mo, d = ue({
    elementType: u,
    externalSlotProps: r == null ? void 0 : r.sectionSeparator,
    externalForwardedProps: o.before,
    ownerState: {
      position: "before"
    }
  }), p = ue({
    elementType: u,
    externalSlotProps: r == null ? void 0 : r.sectionSeparator,
    externalForwardedProps: o.after,
    ownerState: {
      position: "after"
    }
  });
  return /* @__PURE__ */ ve(a, g({}, l, {
    children: [/* @__PURE__ */ P(u, g({}, d)), /* @__PURE__ */ P(c, g({}, i)), /* @__PURE__ */ P(u, g({}, p))]
  }));
}
process.env.NODE_ENV !== "production" && (bo.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  classes: t.object.isRequired,
  element: t.shape({
    after: t.object.isRequired,
    before: t.object.isRequired,
    container: t.object.isRequired,
    content: t.object.isRequired
  }).isRequired,
  /**
   * The props used for each component slot.
   */
  slotProps: t.object,
  /**
   * Overridable component slots.
   */
  slots: t.object
});
const go = /* @__PURE__ */ m.forwardRef(function(n, r) {
  const o = be({
    props: n,
    name: "MuiPickersSectionList"
  }), {
    slots: s,
    slotProps: a,
    elements: l,
    sectionListRef: c
  } = o, i = se(o, Ha), u = _a(o), d = m.useRef(null), p = Ce(r, d), h = (D) => {
    if (!d.current)
      throw new Error(`MUI X: Cannot call sectionListRef.${D} before the mount of the component.`);
    return d.current;
  };
  m.useImperativeHandle(c, () => ({
    getRoot() {
      return h("getRoot");
    },
    getSectionContainer(D) {
      return h("getSectionContainer").querySelector(`.${tt.section}[data-sectionindex="${D}"]`);
    },
    getSectionContent(D) {
      return h("getSectionContent").querySelector(`.${tt.section}[data-sectionindex="${D}"] .${tt.sectionContent}`);
    },
    getSectionIndexFromDOMElement(D) {
      const f = h("getSectionIndexFromDOMElement");
      if (D == null || !f.contains(D))
        return null;
      let v = null;
      return D.classList.contains(tt.section) ? v = D : D.classList.contains(tt.sectionContent) && (v = D.parentElement), v == null ? null : Number(v.dataset.sectionindex);
    }
  }));
  const w = (s == null ? void 0 : s.root) ?? po, b = ue({
    elementType: w,
    externalSlotProps: a == null ? void 0 : a.root,
    externalForwardedProps: i,
    additionalProps: {
      ref: p,
      suppressContentEditableWarning: !0
    },
    className: u.root,
    ownerState: {}
  });
  return /* @__PURE__ */ P(w, g({}, b, {
    children: b.contentEditable ? l.map(({
      content: D,
      before: f,
      after: v
    }) => `${f.children}${D.children}${v.children}`).join("") : /* @__PURE__ */ P(m.Fragment, {
      children: l.map((D, f) => /* @__PURE__ */ P(bo, {
        slots: s,
        slotProps: a,
        element: D,
        classes: u
      }, f))
    })
  }));
});
process.env.NODE_ENV !== "production" && (go.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * If true, the whole element is editable.
   * Useful when all the sections are selected.
   */
  contentEditable: t.bool.isRequired,
  /**
   * The elements to render.
   * Each element contains the prop to edit a section of the value.
   */
  elements: t.arrayOf(t.shape({
    after: t.object.isRequired,
    before: t.object.isRequired,
    container: t.object.isRequired,
    content: t.object.isRequired
  })).isRequired,
  sectionListRef: t.oneOfType([t.func, t.shape({
    current: t.shape({
      getRoot: t.func.isRequired,
      getSectionContainer: t.func.isRequired,
      getSectionContent: t.func.isRequired,
      getSectionIndexFromDOMElement: t.func.isRequired
    })
  })]),
  /**
   * The props used for each component slot.
   */
  slotProps: t.object,
  /**
   * Overridable component slots.
   */
  slots: t.object
});
const Ka = ["elements", "areAllSectionsEmpty", "defaultValue", "label", "value", "onChange", "id", "autoFocus", "endAdornment", "startAdornment", "renderSuffix", "slots", "slotProps", "contentEditable", "tabIndex", "onInput", "onPaste", "onKeyDown", "fullWidth", "name", "readOnly", "inputProps", "inputRef", "sectionListRef"], Ga = (e) => Math.round(e * 1e5) / 1e5, xt = _("div", {
  name: "MuiPickersInputBase",
  slot: "Root",
  overridesResolver: (e, n) => n.root
})(({
  theme: e
}) => g({}, e.typography.body1, {
  color: (e.vars || e).palette.text.primary,
  cursor: "text",
  padding: 0,
  display: "flex",
  justifyContent: "flex-start",
  alignItems: "center",
  position: "relative",
  boxSizing: "border-box",
  // Prevent padding issue with fullWidth.
  letterSpacing: `${Ga(0.15 / 16)}em`,
  variants: [{
    props: {
      fullWidth: !0
    },
    style: {
      width: "100%"
    }
  }]
})), Qt = _(po, {
  name: "MuiPickersInputBase",
  slot: "SectionsContainer",
  overridesResolver: (e, n) => n.sectionsContainer
})(({
  theme: e
}) => ({
  padding: "4px 0 5px",
  fontFamily: e.typography.fontFamily,
  fontSize: "inherit",
  lineHeight: "1.4375em",
  // 23px
  flexGrow: 1,
  outline: "none",
  display: "flex",
  flexWrap: "nowrap",
  overflow: "hidden",
  letterSpacing: "inherit",
  // Baseline behavior
  width: "182px",
  variants: [{
    props: {
      isRtl: !0
    },
    style: {
      textAlign: "right /*! @noflip */"
    }
  }, {
    props: {
      size: "small"
    },
    style: {
      paddingTop: 1
    }
  }, {
    props: {
      adornedStart: !1,
      focused: !1,
      filled: !1
    },
    style: {
      color: "currentColor",
      opacity: 0
    }
  }, {
    // Can't use the object notation because label can be null or undefined
    props: ({
      adornedStart: n,
      focused: r,
      filled: o,
      label: s
    }) => !n && !r && !o && s == null,
    style: e.vars ? {
      opacity: e.vars.opacity.inputPlaceholder
    } : {
      opacity: e.palette.mode === "light" ? 0.42 : 0.5
    }
  }]
})), Za = _(fo, {
  name: "MuiPickersInputBase",
  slot: "Section",
  overridesResolver: (e, n) => n.section
})(({
  theme: e
}) => ({
  fontFamily: e.typography.fontFamily,
  fontSize: "inherit",
  letterSpacing: "inherit",
  lineHeight: "1.4375em",
  // 23px
  display: "flex"
})), Qa = _(ho, {
  name: "MuiPickersInputBase",
  slot: "SectionContent",
  overridesResolver: (e, n) => n.content
})(({
  theme: e
}) => ({
  fontFamily: e.typography.fontFamily,
  lineHeight: "1.4375em",
  // 23px
  letterSpacing: "inherit",
  width: "fit-content",
  outline: "none"
})), Xa = _(mo, {
  name: "MuiPickersInputBase",
  slot: "Separator",
  overridesResolver: (e, n) => n.separator
})(() => ({
  whiteSpace: "pre",
  letterSpacing: "inherit"
})), Ja = _("input", {
  name: "MuiPickersInputBase",
  slot: "Input",
  overridesResolver: (e, n) => n.hiddenInput
})(g({}, dr)), ei = (e) => {
  const {
    focused: n,
    disabled: r,
    error: o,
    classes: s,
    fullWidth: a,
    readOnly: l,
    color: c,
    size: i,
    endAdornment: u,
    startAdornment: d
  } = e, p = {
    root: ["root", n && !r && "focused", r && "disabled", l && "readOnly", o && "error", a && "fullWidth", `color${ce(c)}`, i === "small" && "inputSizeSmall", !!d && "adornedStart", !!u && "adornedEnd"],
    notchedOutline: ["notchedOutline"],
    input: ["input"],
    sectionsContainer: ["sectionsContainer"],
    sectionContent: ["sectionContent"],
    sectionBefore: ["sectionBefore"],
    sectionAfter: ["sectionAfter"]
  };
  return ge(p, qa, s);
}, Pt = /* @__PURE__ */ m.forwardRef(function(n, r) {
  const o = be({
    props: n,
    name: "MuiPickersInputBase"
  }), {
    elements: s,
    areAllSectionsEmpty: a,
    value: l,
    onChange: c,
    id: i,
    endAdornment: u,
    startAdornment: d,
    renderSuffix: p,
    slots: h,
    slotProps: w,
    contentEditable: b,
    tabIndex: D,
    onInput: f,
    onPaste: v,
    onKeyDown: y,
    name: S,
    readOnly: C,
    inputProps: O,
    inputRef: E,
    sectionListRef: V
  } = o, x = se(o, Ka), $ = m.useRef(null), B = Ce(r, $), R = Ce(O == null ? void 0 : O.ref, E), F = Ee(), L = vt();
  if (!L)
    throw new Error("MUI X: PickersInputBase should always be used inside a PickersTextField component");
  const M = (oe) => {
    var J;
    if (L.disabled) {
      oe.stopPropagation();
      return;
    }
    (J = L.onFocus) == null || J.call(L, oe);
  };
  m.useEffect(() => {
    L && L.setAdornedStart(!!d);
  }, [L, d]), m.useEffect(() => {
    L && (a ? L.onEmpty() : L.onFilled());
  }, [L, a]);
  const I = g({}, o, L, {
    isRtl: F
  }), A = ei(I), Q = (h == null ? void 0 : h.root) || xt, H = ue({
    elementType: Q,
    externalSlotProps: w == null ? void 0 : w.root,
    externalForwardedProps: x,
    additionalProps: {
      "aria-invalid": L.error,
      ref: B
    },
    className: A.root,
    ownerState: I
  }), K = (h == null ? void 0 : h.input) || Qt;
  return /* @__PURE__ */ ve(Q, g({}, H, {
    children: [d, /* @__PURE__ */ P(go, {
      sectionListRef: V,
      elements: s,
      contentEditable: b,
      tabIndex: D,
      className: A.sectionsContainer,
      onFocus: M,
      onBlur: L.onBlur,
      onInput: f,
      onPaste: v,
      onKeyDown: y,
      slots: {
        root: K,
        section: Za,
        sectionContent: Qa,
        sectionSeparator: Xa
      },
      slotProps: {
        root: {
          ownerState: I
        },
        sectionContent: {
          className: Ke.sectionContent
        },
        sectionSeparator: ({
          position: oe
        }) => ({
          className: oe === "before" ? Ke.sectionBefore : Ke.sectionAfter
        })
      }
    }), u, p ? p(g({}, L)) : null, /* @__PURE__ */ P(Ja, g({
      name: S,
      className: A.input,
      value: l,
      onChange: c,
      id: i,
      "aria-hidden": "true",
      tabIndex: -1,
      readOnly: C,
      required: L.required,
      disabled: L.disabled
    }, O, {
      ref: R
    }))]
  }));
});
process.env.NODE_ENV !== "production" && (Pt.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Is `true` if the current values equals the empty value.
   * For a single item value, it means that `value === null`
   * For a range value, it means that `value === [null, null]`
   */
  areAllSectionsEmpty: t.bool.isRequired,
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If true, the whole element is editable.
   * Useful when all the sections are selected.
   */
  contentEditable: t.bool.isRequired,
  /**
   * The elements to render.
   * Each element contains the prop to edit a section of the value.
   */
  elements: t.arrayOf(t.shape({
    after: t.object.isRequired,
    before: t.object.isRequired,
    container: t.object.isRequired,
    content: t.object.isRequired
  })).isRequired,
  endAdornment: t.node,
  fullWidth: t.bool,
  id: t.string,
  inputProps: t.object,
  inputRef: Ve,
  label: t.node,
  margin: t.oneOf(["dense", "none", "normal"]),
  name: t.string,
  onChange: t.func.isRequired,
  onClick: t.func.isRequired,
  onInput: t.func.isRequired,
  onKeyDown: t.func.isRequired,
  onPaste: t.func.isRequired,
  ownerState: t.any,
  readOnly: t.bool,
  renderSuffix: t.func,
  sectionListRef: t.oneOfType([t.func, t.shape({
    current: t.shape({
      getRoot: t.func.isRequired,
      getSectionContainer: t.func.isRequired,
      getSectionContent: t.func.isRequired,
      getSectionIndexFromDOMElement: t.func.isRequired
    })
  })]),
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: t.object,
  /**
   * The components used for each slot inside.
   *
   * @default {}
   */
  slots: t.object,
  startAdornment: t.node,
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  value: t.string.isRequired
});
function ti(e) {
  return me("MuiPickersOutlinedInput", e);
}
const ke = g({}, Ke, he("MuiPickersOutlinedInput", ["root", "notchedOutline", "input"])), ni = ["children", "className", "label", "notched", "shrink"], oi = _("fieldset", {
  name: "MuiPickersOutlinedInput",
  slot: "NotchedOutline",
  overridesResolver: (e, n) => n.notchedOutline
})(({
  theme: e
}) => {
  const n = e.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
  return {
    textAlign: "left",
    position: "absolute",
    bottom: 0,
    right: 0,
    top: -5,
    left: 0,
    margin: 0,
    padding: "0 8px",
    pointerEvents: "none",
    borderRadius: "inherit",
    borderStyle: "solid",
    borderWidth: 1,
    overflow: "hidden",
    minWidth: "0%",
    borderColor: e.vars ? `rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)` : n
  };
}), Mn = _("span")(({
  theme: e
}) => ({
  fontFamily: e.typography.fontFamily,
  fontSize: "inherit"
})), ri = _("legend")(({
  theme: e
}) => ({
  float: "unset",
  // Fix conflict with bootstrap
  width: "auto",
  // Fix conflict with bootstrap
  overflow: "hidden",
  // Fix Horizontal scroll when label too long
  variants: [{
    props: {
      withLabel: !1
    },
    style: {
      padding: 0,
      lineHeight: "11px",
      // sync with `height` in `legend` styles
      transition: e.transitions.create("width", {
        duration: 150,
        easing: e.transitions.easing.easeOut
      })
    }
  }, {
    props: {
      withLabel: !0
    },
    style: {
      display: "block",
      // Fix conflict with normalize.css and sanitize.css
      padding: 0,
      height: 11,
      // sync with `lineHeight` in `legend` styles
      fontSize: "0.75em",
      visibility: "hidden",
      maxWidth: 0.01,
      transition: e.transitions.create("max-width", {
        duration: 50,
        easing: e.transitions.easing.easeOut
      }),
      whiteSpace: "nowrap",
      "& > span": {
        paddingLeft: 5,
        paddingRight: 5,
        display: "inline-block",
        opacity: 0,
        visibility: "visible"
      }
    }
  }, {
    props: {
      withLabel: !0,
      notched: !0
    },
    style: {
      maxWidth: "100%",
      transition: e.transitions.create("max-width", {
        duration: 100,
        easing: e.transitions.easing.easeOut,
        delay: 50
      })
    }
  }]
}));
function si(e) {
  const {
    className: n,
    label: r
  } = e, o = se(e, ni), s = r != null && r !== "", a = g({}, e, {
    withLabel: s
  });
  return /* @__PURE__ */ P(oi, g({
    "aria-hidden": !0,
    className: n
  }, o, {
    ownerState: a,
    children: /* @__PURE__ */ P(ri, {
      ownerState: a,
      children: s ? /* @__PURE__ */ P(Mn, {
        children: r
      }) : (
        // notranslate needed while Google Translate will not fix zero-width space issue
        /* @__PURE__ */ P(Mn, {
          className: "notranslate",
          children: "​"
        })
      )
    })
  }));
}
const ai = ["label", "autoFocus", "ownerState", "notched"], ii = _(xt, {
  name: "MuiPickersOutlinedInput",
  slot: "Root",
  overridesResolver: (e, n) => n.root
})(({
  theme: e
}) => {
  const n = e.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
  return {
    padding: "0 14px",
    borderRadius: (e.vars || e).shape.borderRadius,
    [`&:hover .${ke.notchedOutline}`]: {
      borderColor: (e.vars || e).palette.text.primary
    },
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      [`&:hover .${ke.notchedOutline}`]: {
        borderColor: e.vars ? `rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)` : n
      }
    },
    [`&.${ke.focused} .${ke.notchedOutline}`]: {
      borderStyle: "solid",
      borderWidth: 2
    },
    [`&.${ke.disabled}`]: {
      [`& .${ke.notchedOutline}`]: {
        borderColor: (e.vars || e).palette.action.disabled
      },
      "*": {
        color: (e.vars || e).palette.action.disabled
      }
    },
    [`&.${ke.error} .${ke.notchedOutline}`]: {
      borderColor: (e.vars || e).palette.error.main
    },
    variants: Object.keys((e.vars ?? e).palette).filter((r) => {
      var o;
      return ((o = (e.vars ?? e).palette[r]) == null ? void 0 : o.main) ?? !1;
    }).map((r) => ({
      props: {
        color: r
      },
      style: {
        [`&.${ke.focused}:not(.${ke.error}) .${ke.notchedOutline}`]: {
          // @ts-ignore
          borderColor: (e.vars || e).palette[r].main
        }
      }
    }))
  };
}), li = _(Qt, {
  name: "MuiPickersOutlinedInput",
  slot: "SectionsContainer",
  overridesResolver: (e, n) => n.sectionsContainer
})({
  padding: "16.5px 0",
  variants: [{
    props: {
      size: "small"
    },
    style: {
      padding: "8.5px 0"
    }
  }]
}), ci = (e) => {
  const {
    classes: n
  } = e, o = ge({
    root: ["root"],
    notchedOutline: ["notchedOutline"],
    input: ["input"]
  }, ti, n);
  return g({}, n, o);
}, Xt = /* @__PURE__ */ m.forwardRef(function(n, r) {
  const o = be({
    props: n,
    name: "MuiPickersOutlinedInput"
  }), {
    label: s,
    ownerState: a,
    notched: l
  } = o, c = se(o, ai), i = vt(), u = g({}, o, a, i, {
    color: (i == null ? void 0 : i.color) || "primary"
  }), d = ci(u);
  return /* @__PURE__ */ P(Pt, g({
    slots: {
      root: ii,
      input: li
    },
    renderSuffix: (p) => /* @__PURE__ */ P(si, {
      shrink: !!(l || p.adornedStart || p.focused || p.filled),
      notched: !!(l || p.adornedStart || p.focused || p.filled),
      className: d.notchedOutline,
      label: s != null && s !== "" && (i != null && i.required) ? /* @__PURE__ */ ve(m.Fragment, {
        children: [s, " ", "*"]
      }) : s,
      ownerState: u
    })
  }, c, {
    label: s,
    classes: d,
    ref: r
  }));
});
process.env.NODE_ENV !== "production" && (Xt.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Is `true` if the current values equals the empty value.
   * For a single item value, it means that `value === null`
   * For a range value, it means that `value === [null, null]`
   */
  areAllSectionsEmpty: t.bool.isRequired,
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If true, the whole element is editable.
   * Useful when all the sections are selected.
   */
  contentEditable: t.bool.isRequired,
  /**
   * The elements to render.
   * Each element contains the prop to edit a section of the value.
   */
  elements: t.arrayOf(t.shape({
    after: t.object.isRequired,
    before: t.object.isRequired,
    container: t.object.isRequired,
    content: t.object.isRequired
  })).isRequired,
  endAdornment: t.node,
  fullWidth: t.bool,
  id: t.string,
  inputProps: t.object,
  inputRef: Ve,
  label: t.node,
  margin: t.oneOf(["dense", "none", "normal"]),
  name: t.string,
  notched: t.bool,
  onChange: t.func.isRequired,
  onClick: t.func.isRequired,
  onInput: t.func.isRequired,
  onKeyDown: t.func.isRequired,
  onPaste: t.func.isRequired,
  ownerState: t.any,
  readOnly: t.bool,
  renderSuffix: t.func,
  sectionListRef: t.oneOfType([t.func, t.shape({
    current: t.shape({
      getRoot: t.func.isRequired,
      getSectionContainer: t.func.isRequired,
      getSectionContent: t.func.isRequired,
      getSectionIndexFromDOMElement: t.func.isRequired
    })
  })]),
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: t.object,
  /**
   * The components used for each slot inside.
   *
   * @default {}
   */
  slots: t.object,
  startAdornment: t.node,
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  value: t.string.isRequired
});
Xt.muiName = "Input";
function ui(e) {
  return me("MuiPickersFilledInput", e);
}
const Be = g({}, Ke, he("MuiPickersFilledInput", ["root", "underline", "input"])), di = ["label", "autoFocus", "disableUnderline", "ownerState"], pi = _(xt, {
  name: "MuiPickersFilledInput",
  slot: "Root",
  overridesResolver: (e, n) => n.root,
  shouldForwardProp: (e) => qo(e) && e !== "disableUnderline"
})(({
  theme: e
}) => {
  const n = e.palette.mode === "light", r = n ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)", o = n ? "rgba(0, 0, 0, 0.06)" : "rgba(255, 255, 255, 0.09)", s = n ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.13)", a = n ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)";
  return {
    backgroundColor: e.vars ? e.vars.palette.FilledInput.bg : o,
    borderTopLeftRadius: (e.vars || e).shape.borderRadius,
    borderTopRightRadius: (e.vars || e).shape.borderRadius,
    transition: e.transitions.create("background-color", {
      duration: e.transitions.duration.shorter,
      easing: e.transitions.easing.easeOut
    }),
    "&:hover": {
      backgroundColor: e.vars ? e.vars.palette.FilledInput.hoverBg : s,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: e.vars ? e.vars.palette.FilledInput.bg : o
      }
    },
    [`&.${Be.focused}`]: {
      backgroundColor: e.vars ? e.vars.palette.FilledInput.bg : o
    },
    [`&.${Be.disabled}`]: {
      backgroundColor: e.vars ? e.vars.palette.FilledInput.disabledBg : a
    },
    variants: [...Object.keys((e.vars ?? e).palette).filter((l) => (e.vars ?? e).palette[l].main).map((l) => {
      var c;
      return {
        props: {
          color: l,
          disableUnderline: !1
        },
        style: {
          "&::after": {
            // @ts-ignore
            borderBottom: `2px solid ${(c = (e.vars || e).palette[l]) == null ? void 0 : c.main}`
          }
        }
      };
    }), {
      props: {
        disableUnderline: !1
      },
      style: {
        "&::after": {
          left: 0,
          bottom: 0,
          // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
          content: '""',
          position: "absolute",
          right: 0,
          transform: "scaleX(0)",
          transition: e.transitions.create("transform", {
            duration: e.transitions.duration.shorter,
            easing: e.transitions.easing.easeOut
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
        [`&.${Be.focused}:after`]: {
          // translateX(0) is a workaround for Safari transform scale bug
          // See https://github.com/mui/material-ui/issues/31766
          transform: "scaleX(1) translateX(0)"
        },
        [`&.${Be.error}`]: {
          "&:before, &:after": {
            borderBottomColor: (e.vars || e).palette.error.main
          }
        },
        "&::before": {
          borderBottom: `1px solid ${e.vars ? `rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})` : r}`,
          left: 0,
          bottom: 0,
          // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
          content: '"\\00a0"',
          position: "absolute",
          right: 0,
          transition: e.transitions.create("border-bottom-color", {
            duration: e.transitions.duration.shorter
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
        [`&:hover:not(.${Be.disabled}, .${Be.error}):before`]: {
          borderBottom: `1px solid ${(e.vars || e).palette.text.primary}`
        },
        [`&.${Be.disabled}:before`]: {
          borderBottomStyle: "dotted"
        }
      }
    }, {
      props: ({
        startAdornment: l
      }) => !!l,
      style: {
        paddingLeft: 12
      }
    }, {
      props: ({
        endAdornment: l
      }) => !!l,
      style: {
        paddingRight: 12
      }
    }]
  };
}), fi = _(Qt, {
  name: "MuiPickersFilledInput",
  slot: "sectionsContainer",
  overridesResolver: (e, n) => n.sectionsContainer
})({
  paddingTop: 25,
  paddingRight: 12,
  paddingBottom: 8,
  paddingLeft: 12,
  variants: [{
    props: {
      size: "small"
    },
    style: {
      paddingTop: 21,
      paddingBottom: 4
    }
  }, {
    props: ({
      startAdornment: e
    }) => !!e,
    style: {
      paddingLeft: 0
    }
  }, {
    props: ({
      endAdornment: e
    }) => !!e,
    style: {
      paddingRight: 0
    }
  }, {
    props: {
      hiddenLabel: !0
    },
    style: {
      paddingTop: 16,
      paddingBottom: 17
    }
  }, {
    props: {
      hiddenLabel: !0,
      size: "small"
    },
    style: {
      paddingTop: 8,
      paddingBottom: 9
    }
  }]
}), mi = (e) => {
  const {
    classes: n,
    disableUnderline: r
  } = e, s = ge({
    root: ["root", !r && "underline"],
    input: ["input"]
  }, ui, n);
  return g({}, n, s);
}, Jt = /* @__PURE__ */ m.forwardRef(function(n, r) {
  const o = be({
    props: n,
    name: "MuiPickersFilledInput"
  }), {
    label: s,
    disableUnderline: a = !1,
    ownerState: l
  } = o, c = se(o, di), i = vt(), u = g({}, o, l, i, {
    color: (i == null ? void 0 : i.color) || "primary"
  }), d = mi(u);
  return /* @__PURE__ */ P(Pt, g({
    slots: {
      root: pi,
      input: fi
    },
    slotProps: {
      root: {
        disableUnderline: a
      }
    }
  }, c, {
    label: s,
    classes: d,
    ref: r
  }));
});
process.env.NODE_ENV !== "production" && (Jt.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Is `true` if the current values equals the empty value.
   * For a single item value, it means that `value === null`
   * For a range value, it means that `value === [null, null]`
   */
  areAllSectionsEmpty: t.bool.isRequired,
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If true, the whole element is editable.
   * Useful when all the sections are selected.
   */
  contentEditable: t.bool.isRequired,
  disableUnderline: t.bool,
  /**
   * The elements to render.
   * Each element contains the prop to edit a section of the value.
   */
  elements: t.arrayOf(t.shape({
    after: t.object.isRequired,
    before: t.object.isRequired,
    container: t.object.isRequired,
    content: t.object.isRequired
  })).isRequired,
  endAdornment: t.node,
  fullWidth: t.bool,
  hiddenLabel: t.bool,
  id: t.string,
  inputProps: t.object,
  inputRef: Ve,
  label: t.node,
  margin: t.oneOf(["dense", "none", "normal"]),
  name: t.string,
  onChange: t.func.isRequired,
  onClick: t.func.isRequired,
  onInput: t.func.isRequired,
  onKeyDown: t.func.isRequired,
  onPaste: t.func.isRequired,
  ownerState: t.any,
  readOnly: t.bool,
  renderSuffix: t.func,
  sectionListRef: t.oneOfType([t.func, t.shape({
    current: t.shape({
      getRoot: t.func.isRequired,
      getSectionContainer: t.func.isRequired,
      getSectionContent: t.func.isRequired,
      getSectionIndexFromDOMElement: t.func.isRequired
    })
  })]),
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: t.object,
  /**
   * The components used for each slot inside.
   *
   * @default {}
   */
  slots: t.object,
  startAdornment: t.node,
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  value: t.string.isRequired
});
Jt.muiName = "Input";
function hi(e) {
  return me("MuiPickersFilledInput", e);
}
const nt = g({}, Ke, he("MuiPickersInput", ["root", "input"])), bi = ["label", "autoFocus", "disableUnderline", "ownerState"], gi = _(xt, {
  name: "MuiPickersInput",
  slot: "Root",
  overridesResolver: (e, n) => n.root
})(({
  theme: e
}) => {
  let r = e.palette.mode === "light" ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
  return e.vars && (r = `rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`), {
    "label + &": {
      marginTop: 16
    },
    variants: [...Object.keys((e.vars ?? e).palette).filter((o) => (e.vars ?? e).palette[o].main).map((o) => ({
      props: {
        color: o
      },
      style: {
        "&::after": {
          // @ts-ignore
          borderBottom: `2px solid ${(e.vars || e).palette[o].main}`
        }
      }
    })), {
      props: {
        disableUnderline: !1
      },
      style: {
        "&::after": {
          background: "red",
          left: 0,
          bottom: 0,
          // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
          content: '""',
          position: "absolute",
          right: 0,
          transform: "scaleX(0)",
          transition: e.transitions.create("transform", {
            duration: e.transitions.duration.shorter,
            easing: e.transitions.easing.easeOut
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
        [`&.${nt.focused}:after`]: {
          // translateX(0) is a workaround for Safari transform scale bug
          // See https://github.com/mui/material-ui/issues/31766
          transform: "scaleX(1) translateX(0)"
        },
        [`&.${nt.error}`]: {
          "&:before, &:after": {
            borderBottomColor: (e.vars || e).palette.error.main
          }
        },
        "&::before": {
          borderBottom: `1px solid ${r}`,
          left: 0,
          bottom: 0,
          // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
          content: '"\\00a0"',
          position: "absolute",
          right: 0,
          transition: e.transitions.create("border-bottom-color", {
            duration: e.transitions.duration.shorter
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
        [`&:hover:not(.${nt.disabled}, .${nt.error}):before`]: {
          borderBottom: `2px solid ${(e.vars || e).palette.text.primary}`,
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            borderBottom: `1px solid ${r}`
          }
        },
        [`&.${nt.disabled}:before`]: {
          borderBottomStyle: "dotted"
        }
      }
    }]
  };
}), yi = (e) => {
  const {
    classes: n,
    disableUnderline: r
  } = e, s = ge({
    root: ["root", !r && "underline"],
    input: ["input"]
  }, hi, n);
  return g({}, n, s);
}, en = /* @__PURE__ */ m.forwardRef(function(n, r) {
  const o = be({
    props: n,
    name: "MuiPickersInput"
  }), {
    label: s,
    disableUnderline: a = !1,
    ownerState: l
  } = o, c = se(o, bi), i = vt(), u = g({}, o, l, i, {
    disableUnderline: a,
    color: (i == null ? void 0 : i.color) || "primary"
  }), d = yi(u);
  return /* @__PURE__ */ P(Pt, g({
    slots: {
      root: gi
    }
  }, c, {
    label: s,
    classes: d,
    ref: r
  }));
});
process.env.NODE_ENV !== "production" && (en.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Is `true` if the current values equals the empty value.
   * For a single item value, it means that `value === null`
   * For a range value, it means that `value === [null, null]`
   */
  areAllSectionsEmpty: t.bool.isRequired,
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If true, the whole element is editable.
   * Useful when all the sections are selected.
   */
  contentEditable: t.bool.isRequired,
  disableUnderline: t.bool,
  /**
   * The elements to render.
   * Each element contains the prop to edit a section of the value.
   */
  elements: t.arrayOf(t.shape({
    after: t.object.isRequired,
    before: t.object.isRequired,
    container: t.object.isRequired,
    content: t.object.isRequired
  })).isRequired,
  endAdornment: t.node,
  fullWidth: t.bool,
  id: t.string,
  inputProps: t.object,
  inputRef: Ve,
  label: t.node,
  margin: t.oneOf(["dense", "none", "normal"]),
  name: t.string,
  onChange: t.func.isRequired,
  onClick: t.func.isRequired,
  onInput: t.func.isRequired,
  onKeyDown: t.func.isRequired,
  onPaste: t.func.isRequired,
  ownerState: t.any,
  readOnly: t.bool,
  renderSuffix: t.func,
  sectionListRef: t.oneOfType([t.func, t.shape({
    current: t.shape({
      getRoot: t.func.isRequired,
      getSectionContainer: t.func.isRequired,
      getSectionContent: t.func.isRequired,
      getSectionIndexFromDOMElement: t.func.isRequired
    })
  })]),
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: t.object,
  /**
   * The components used for each slot inside.
   *
   * @default {}
   */
  slots: t.object,
  startAdornment: t.node,
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  value: t.string.isRequired
});
en.muiName = "Input";
const vi = ["onFocus", "onBlur", "className", "color", "disabled", "error", "variant", "required", "InputProps", "inputProps", "inputRef", "sectionListRef", "elements", "areAllSectionsEmpty", "onClick", "onKeyDown", "onKeyUp", "onPaste", "onInput", "endAdornment", "startAdornment", "tabIndex", "contentEditable", "focused", "value", "onChange", "fullWidth", "id", "name", "helperText", "FormHelperTextProps", "label", "InputLabelProps"], Di = {
  standard: en,
  filled: Jt,
  outlined: Xt
}, wi = _(_o, {
  name: "MuiPickersTextField",
  slot: "Root",
  overridesResolver: (e, n) => n.root
})({}), Si = (e) => {
  const {
    focused: n,
    disabled: r,
    classes: o,
    required: s
  } = e;
  return ge({
    root: ["root", n && !r && "focused", r && "disabled", s && "required"]
  }, Wa, o);
}, yo = /* @__PURE__ */ m.forwardRef(function(n, r) {
  const o = be({
    props: n,
    name: "MuiPickersTextField"
  }), {
    // Props used by FormControl
    onFocus: s,
    onBlur: a,
    className: l,
    color: c = "primary",
    disabled: i = !1,
    error: u = !1,
    variant: d = "outlined",
    required: p = !1,
    // Props used by PickersInput
    InputProps: h,
    inputProps: w,
    inputRef: b,
    sectionListRef: D,
    elements: f,
    areAllSectionsEmpty: v,
    onClick: y,
    onKeyDown: S,
    onKeyUp: C,
    onPaste: O,
    onInput: E,
    endAdornment: V,
    startAdornment: x,
    tabIndex: $,
    contentEditable: B,
    focused: R,
    value: F,
    onChange: L,
    fullWidth: M,
    id: I,
    name: A,
    // Props used by FormHelperText
    helperText: Q,
    FormHelperTextProps: H,
    // Props used by InputLabel
    label: K,
    InputLabelProps: oe
  } = o, J = se(o, vi), ie = m.useRef(null), de = Ce(r, ie), le = it(I), T = Q && le ? `${le}-helper-text` : void 0, q = K && le ? `${le}-label` : void 0, W = g({}, o, {
    color: c,
    disabled: i,
    error: u,
    focused: R,
    required: p,
    variant: d
  }), N = Si(W), X = Di[d];
  return /* @__PURE__ */ ve(wi, g({
    className: pe(N.root, l),
    ref: de,
    focused: R,
    onFocus: s,
    onBlur: a,
    disabled: i,
    variant: d,
    error: u,
    color: c,
    fullWidth: M,
    required: p,
    ownerState: W
  }, J, {
    children: [/* @__PURE__ */ P(Ko, g({
      htmlFor: le,
      id: q
    }, oe, {
      children: K
    })), /* @__PURE__ */ P(X, g({
      elements: f,
      areAllSectionsEmpty: v,
      onClick: y,
      onKeyDown: S,
      onKeyUp: C,
      onInput: E,
      onPaste: O,
      endAdornment: V,
      startAdornment: x,
      tabIndex: $,
      contentEditable: B,
      value: F,
      onChange: L,
      id: le,
      fullWidth: M,
      inputProps: w,
      inputRef: b,
      sectionListRef: D,
      label: K,
      name: A,
      role: "group",
      "aria-labelledby": q
    }, h)), Q && /* @__PURE__ */ P(Go, g({
      id: T
    }, H, {
      children: Q
    }))]
  }));
});
process.env.NODE_ENV !== "production" && (yo.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Is `true` if the current values equals the empty value.
   * For a single item value, it means that `value === null`
   * For a range value, it means that `value === [null, null]`
   */
  areAllSectionsEmpty: t.bool.isRequired,
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOf(["error", "info", "primary", "secondary", "success", "warning"]),
  component: t.elementType,
  /**
   * If true, the whole element is editable.
   * Useful when all the sections are selected.
   */
  contentEditable: t.bool.isRequired,
  disabled: t.bool.isRequired,
  /**
   * The elements to render.
   * Each element contains the prop to edit a section of the value.
   */
  elements: t.arrayOf(t.shape({
    after: t.object.isRequired,
    before: t.object.isRequired,
    container: t.object.isRequired,
    content: t.object.isRequired
  })).isRequired,
  endAdornment: t.node,
  error: t.bool.isRequired,
  /**
   * If `true`, the component is displayed in focused state.
   */
  focused: t.bool,
  FormHelperTextProps: t.object,
  fullWidth: t.bool,
  /**
   * The helper text content.
   */
  helperText: t.node,
  /**
   * If `true`, the label is hidden.
   * This is used to increase density for a `FilledInput`.
   * Be sure to add `aria-label` to the `input` element.
   * @default false
   */
  hiddenLabel: t.bool,
  id: t.string,
  InputLabelProps: t.object,
  inputProps: t.object,
  /**
   * Props applied to the Input element.
   * It will be a [`FilledInput`](/material-ui/api/filled-input/),
   * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)
   * component depending on the `variant` prop value.
   */
  InputProps: t.object,
  inputRef: Ve,
  label: t.node,
  /**
   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
   * @default 'none'
   */
  margin: t.oneOf(["dense", "none", "normal"]),
  name: t.string,
  onBlur: t.func.isRequired,
  onChange: t.func.isRequired,
  onClick: t.func.isRequired,
  onFocus: t.func.isRequired,
  onInput: t.func.isRequired,
  onKeyDown: t.func.isRequired,
  onPaste: t.func.isRequired,
  readOnly: t.bool,
  /**
   * If `true`, the label will indicate that the `input` is required.
   * @default false
   */
  required: t.bool,
  sectionListRef: t.oneOfType([t.func, t.shape({
    current: t.shape({
      getRoot: t.func.isRequired,
      getSectionContainer: t.func.isRequired,
      getSectionContent: t.func.isRequired,
      getSectionIndexFromDOMElement: t.func.isRequired
    })
  })]),
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: t.oneOf(["medium", "small"]),
  startAdornment: t.node,
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  value: t.string.isRequired,
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: t.oneOf(["filled", "outlined", "standard"])
});
const Ci = ["enableAccessibleFieldDOMStructure"], xi = ["InputProps", "readOnly"], Pi = ["onPaste", "onKeyDown", "inputMode", "readOnly", "InputProps", "inputProps", "inputRef"], Mi = (e) => {
  let {
    enableAccessibleFieldDOMStructure: n
  } = e, r = se(e, Ci);
  if (n) {
    const {
      InputProps: p,
      readOnly: h
    } = r, w = se(r, xi);
    return g({}, w, {
      InputProps: g({}, p ?? {}, {
        readOnly: h
      })
    });
  }
  const {
    onPaste: o,
    onKeyDown: s,
    inputMode: a,
    readOnly: l,
    InputProps: c,
    inputProps: i,
    inputRef: u
  } = r, d = se(r, Pi);
  return g({}, d, {
    InputProps: g({}, c ?? {}, {
      readOnly: l
    }),
    inputProps: g({}, i ?? {}, {
      inputMode: a,
      onPaste: o,
      onKeyDown: s,
      ref: u
    })
  });
}, ki = ["slots", "slotProps", "InputProps", "inputProps"], tn = /* @__PURE__ */ m.forwardRef(function(n, r) {
  const o = be({
    props: n,
    name: "MuiDateField"
  }), {
    slots: s,
    slotProps: a,
    InputProps: l,
    inputProps: c
  } = o, i = se(o, ki), u = o, d = (s == null ? void 0 : s.textField) ?? (n.enableAccessibleFieldDOMStructure ? yo : Zo), p = ue({
    elementType: d,
    externalSlotProps: a == null ? void 0 : a.textField,
    externalForwardedProps: i,
    additionalProps: {
      ref: r
    },
    ownerState: u
  });
  p.inputProps = g({}, c, p.inputProps), p.InputProps = g({}, l, p.InputProps);
  const h = Ya(p), w = Mi(h), b = $a(g({}, w, {
    slots: s,
    slotProps: a
  }));
  return /* @__PURE__ */ P(d, g({}, b));
});
process.env.NODE_ENV !== "production" && (tn.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If `true`, the `input` element is focused during the first mount.
   * @default false
   */
  autoFocus: t.bool,
  className: t.string,
  /**
   * If `true`, a clear button will be shown in the field allowing value clearing.
   * @default false
   */
  clearable: t.bool,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOf(["error", "info", "primary", "secondary", "success", "warning"]),
  component: t.elementType,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: t.object,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disableFuture: t.bool,
  /**
   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disablePast: t.bool,
  /**
   * @default false
   */
  enableAccessibleFieldDOMStructure: t.bool,
  /**
   * If `true`, the component is displayed in focused state.
   */
  focused: t.bool,
  /**
   * Format of the date when rendered in the input(s).
   */
  format: t.string,
  /**
   * Density of the format when rendered in the input.
   * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
   * @default "dense"
   */
  formatDensity: t.oneOf(["dense", "spacious"]),
  /**
   * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.
   */
  FormHelperTextProps: t.object,
  /**
   * If `true`, the input will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * The helper text content.
   */
  helperText: t.node,
  /**
   * If `true`, the label is hidden.
   * This is used to increase density for a `FilledInput`.
   * Be sure to add `aria-label` to the `input` element.
   * @default false
   */
  hiddenLabel: t.bool,
  /**
   * The id of the `input` element.
   * Use this prop to make `label` and `helperText` accessible for screen readers.
   */
  id: t.string,
  /**
   * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.
   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
   */
  InputLabelProps: t.object,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: t.object,
  /**
   * Props applied to the Input element.
   * It will be a [`FilledInput`](/material-ui/api/filled-input/),
   * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)
   * component depending on the `variant` prop value.
   */
  InputProps: t.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: Ve,
  /**
   * The label content.
   */
  label: t.node,
  /**
   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
   * @default 'none'
   */
  margin: t.oneOf(["dense", "none", "normal"]),
  /**
   * Maximal selectable date.
   * @default 2099-12-31
   */
  maxDate: t.object,
  /**
   * Minimal selectable date.
   * @default 1900-01-01
   */
  minDate: t.object,
  /**
   * Name attribute of the `input` element.
   */
  name: t.string,
  onBlur: t.func,
  /**
   * Callback fired when the value changes.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @param {TValue} value The new value.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onChange: t.func,
  /**
   * Callback fired when the clear button is clicked.
   */
  onClear: t.func,
  /**
   * Callback fired when the error associated with the current value changes.
   * When a validation error is detected, the `error` parameter contains a non-null value.
   * This can be used to render an appropriate form error.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @param {TError} error The reason why the current value is not valid.
   * @param {TValue} value The value associated with the error.
   */
  onError: t.func,
  onFocus: t.func,
  /**
   * Callback fired when the selected sections change.
   * @param {FieldSelectedSections} newValue The new selected sections.
   */
  onSelectedSectionsChange: t.func,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   * @default false
   */
  readOnly: t.bool,
  /**
   * The date used to generate a part of the new value that is not present in the format when both `value` and `defaultValue` are empty.
   * For example, on time fields it will be used to determine the date to set.
   * @default The closest valid date using the validation props, except callbacks such as `shouldDisableDate`. Value is rounded to the most granular section used.
   */
  referenceDate: t.object,
  /**
   * If `true`, the label is displayed as required and the `input` element is required.
   * @default false
   */
  required: t.bool,
  /**
   * The currently selected sections.
   * This prop accepts four formats:
   * 1. If a number is provided, the section at this index will be selected.
   * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
   * 3. If `"all"` is provided, all the sections will be selected.
   * 4. If `null` is provided, no section will be selected.
   * If not provided, the selected sections will be handled internally.
   */
  selectedSections: t.oneOfType([t.oneOf(["all", "day", "empty", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), t.number]),
  /**
   * Disable specific date.
   *
   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
   *
   * @template TDate
   * @param {TDate} day The date to test.
   * @returns {boolean} If `true` the date will be disabled.
   */
  shouldDisableDate: t.func,
  /**
   * Disable specific month.
   * @template TDate
   * @param {TDate} month The month to test.
   * @returns {boolean} If `true`, the month will be disabled.
   */
  shouldDisableMonth: t.func,
  /**
   * Disable specific year.
   * @template TDate
   * @param {TDate} year The year to test.
   * @returns {boolean} If `true`, the year will be disabled.
   */
  shouldDisableYear: t.func,
  /**
   * If `true`, the format will respect the leading zeroes (e.g: on dayjs, the format `M/D/YYYY` will render `8/16/2018`)
   * If `false`, the format will always add leading zeroes (e.g: on dayjs, the format `M/D/YYYY` will render `08/16/2018`)
   *
   * Warning n°1: Luxon is not able to respect the leading zeroes when using macro tokens (e.g: "DD"), so `shouldRespectLeadingZeros={true}` might lead to inconsistencies when using `AdapterLuxon`.
   *
   * Warning n°2: When `shouldRespectLeadingZeros={true}`, the field will add an invisible character on the sections containing a single digit to make sure `onChange` is fired.
   * If you need to get the clean value from the input, you can remove this character using `input.value.replace(/\u200e/g, '')`.
   *
   * Warning n°3: When used in strict mode, dayjs and moment require to respect the leading zeros.
   * This mean that when using `shouldRespectLeadingZeros={false}`, if you retrieve the value directly from the input (not listening to `onChange`) and your format contains tokens without leading zeros, the value will not be parsed by your library.
   *
   * @default false
   */
  shouldRespectLeadingZeros: t.bool,
  /**
   * The size of the component.
   */
  size: t.oneOf(["medium", "small"]),
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: t.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: t.object,
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Choose which timezone to use for the value.
   * Example: "default", "system", "UTC", "America/New_York".
   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
   */
  timezone: t.string,
  /**
   * The ref object used to imperatively interact with the field.
   */
  unstableFieldRef: t.oneOfType([t.func, t.object]),
  /**
   * The selected value.
   * Used when the component is controlled.
   */
  value: t.object,
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: t.oneOf(["filled", "outlined", "standard"])
});
const vo = ({
  shouldDisableDate: e,
  shouldDisableMonth: n,
  shouldDisableYear: r,
  minDate: o,
  maxDate: s,
  disableFuture: a,
  disablePast: l,
  timezone: c
}) => {
  const i = We();
  return m.useCallback((u) => ct({
    adapter: i,
    value: u,
    timezone: c,
    props: {
      shouldDisableDate: e,
      shouldDisableMonth: n,
      shouldDisableYear: r,
      minDate: o,
      maxDate: s,
      disableFuture: a,
      disablePast: l
    }
  }) !== null, [i, e, n, r, o, s, a, l, c]);
}, Ti = (e, n, r) => (o, s) => {
  switch (s.type) {
    case "changeMonth":
      return g({}, o, {
        slideDirection: s.direction,
        currentMonth: s.newMonth,
        isMonthSwitchingAnimating: !e
      });
    case "changeMonthTimezone": {
      const a = s.newTimezone;
      if (r.getTimezone(o.currentMonth) === a)
        return o;
      let l = r.setTimezone(o.currentMonth, a);
      return r.getMonth(l) !== r.getMonth(o.currentMonth) && (l = r.setMonth(l, r.getMonth(o.currentMonth))), g({}, o, {
        currentMonth: l
      });
    }
    case "finishMonthSwitchingAnimation":
      return g({}, o, {
        isMonthSwitchingAnimating: !1
      });
    case "changeFocusedDay": {
      if (o.focusedDay != null && s.focusedDay != null && r.isSameDay(s.focusedDay, o.focusedDay))
        return o;
      const a = s.focusedDay != null && !n && !r.isSameMonth(o.currentMonth, s.focusedDay);
      return g({}, o, {
        focusedDay: s.focusedDay,
        isMonthSwitchingAnimating: a && !e && !s.withoutMonthSwitchingAnimation,
        currentMonth: a ? r.startOfMonth(s.focusedDay) : o.currentMonth,
        slideDirection: s.focusedDay != null && r.isAfterDay(s.focusedDay, o.currentMonth) ? "left" : "right"
      });
    }
    default:
      throw new Error("missing support");
  }
}, Oi = (e) => {
  const {
    value: n,
    referenceDate: r,
    disableFuture: o,
    disablePast: s,
    disableSwitchToMonthOnDayFocus: a = !1,
    maxDate: l,
    minDate: c,
    onMonthChange: i,
    reduceAnimations: u,
    shouldDisableDate: d,
    timezone: p
  } = e, h = ye(), w = m.useRef(Ti(!!u, a, h)).current, b = m.useMemo(
    () => Re.getInitialReferenceValue({
      value: n,
      utils: h,
      timezone: p,
      props: e,
      referenceDate: r,
      granularity: Oe.day
    }),
    // We want the `referenceDate` to update on prop and `timezone` change (https://github.com/mui/mui-x/issues/10804)
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [r, p]
  ), [D, f] = m.useReducer(w, {
    isMonthSwitchingAnimating: !1,
    focusedDay: b,
    currentMonth: h.startOfMonth(b),
    slideDirection: "left"
  });
  m.useEffect(() => {
    f({
      type: "changeMonthTimezone",
      newTimezone: h.getTimezone(b)
    });
  }, [b, h]);
  const v = m.useCallback((E) => {
    f(g({
      type: "changeMonth"
    }, E)), i && i(E.newMonth);
  }, [i]), y = m.useCallback((E) => {
    const V = E;
    h.isSameMonth(V, D.currentMonth) || v({
      newMonth: h.startOfMonth(V),
      direction: h.isAfterDay(V, D.currentMonth) ? "left" : "right"
    });
  }, [D.currentMonth, v, h]), S = vo({
    shouldDisableDate: d,
    minDate: c,
    maxDate: l,
    disableFuture: o,
    disablePast: s,
    timezone: p
  }), C = m.useCallback(() => {
    f({
      type: "finishMonthSwitchingAnimation"
    });
  }, []), O = G((E, V) => {
    S(E) || f({
      type: "changeFocusedDay",
      focusedDay: E,
      withoutMonthSwitchingAnimation: V
    });
  });
  return {
    referenceDate: b,
    calendarState: D,
    changeMonth: y,
    changeFocusedDay: O,
    isDateDisabled: S,
    onMonthSwitchingAnimationEnd: C,
    handleChangeMonth: v
  };
}, Ri = (e) => me("MuiPickersFadeTransitionGroup", e);
he("MuiPickersFadeTransitionGroup", ["root"]);
const Ii = (e) => {
  const {
    classes: n
  } = e;
  return ge({
    root: ["root"]
  }, Ri, n);
}, Vi = _(Tn, {
  name: "MuiPickersFadeTransitionGroup",
  slot: "Root",
  overridesResolver: (e, n) => n.root
})({
  display: "block",
  position: "relative"
});
function Do(e) {
  const n = be({
    props: e,
    name: "MuiPickersFadeTransitionGroup"
  }), {
    children: r,
    className: o,
    reduceAnimations: s,
    transKey: a
  } = n, l = Ii(n), c = On();
  return s ? r : /* @__PURE__ */ P(Vi, {
    className: pe(l.root, o),
    children: /* @__PURE__ */ P(gt, {
      appear: !1,
      mountOnEnter: !0,
      unmountOnExit: !0,
      timeout: {
        appear: c.transitions.duration.enteringScreen,
        enter: c.transitions.duration.enteringScreen,
        exit: 0
      },
      children: r
    }, a)
  });
}
function Fi(e) {
  return me("MuiPickersDay", e);
}
const je = he("MuiPickersDay", ["root", "dayWithMargin", "dayOutsideMonth", "hiddenDaySpacingFiller", "today", "selected", "disabled"]), Ei = ["autoFocus", "className", "day", "disabled", "disableHighlightToday", "disableMargin", "hidden", "isAnimating", "onClick", "onDaySelect", "onFocus", "onBlur", "onKeyDown", "onMouseDown", "onMouseEnter", "outsideCurrentMonth", "selected", "showDaysOutsideCurrentMonth", "children", "today", "isFirstVisibleCell", "isLastVisibleCell"], Ai = (e) => {
  const {
    selected: n,
    disableMargin: r,
    disableHighlightToday: o,
    today: s,
    disabled: a,
    outsideCurrentMonth: l,
    showDaysOutsideCurrentMonth: c,
    classes: i
  } = e, u = l && !c;
  return ge({
    root: ["root", n && !u && "selected", a && "disabled", !r && "dayWithMargin", !o && s && "today", l && c && "dayOutsideMonth", u && "hiddenDaySpacingFiller"],
    hiddenDaySpacingFiller: ["hiddenDaySpacingFiller"]
  }, Fi, i);
}, wo = ({
  theme: e
}) => g({}, e.typography.caption, {
  width: st,
  height: st,
  borderRadius: "50%",
  padding: 0,
  // explicitly setting to `transparent` to avoid potentially getting impacted by change from the overridden component
  backgroundColor: "transparent",
  transition: e.transitions.create("background-color", {
    duration: e.transitions.duration.short
  }),
  color: (e.vars || e).palette.text.primary,
  "@media (pointer: fine)": {
    "&:hover": {
      backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.hoverOpacity})` : Se(e.palette.primary.main, e.palette.action.hoverOpacity)
    }
  },
  "&:focus": {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.focusOpacity})` : Se(e.palette.primary.main, e.palette.action.focusOpacity),
    [`&.${je.selected}`]: {
      willChange: "background-color",
      backgroundColor: (e.vars || e).palette.primary.dark
    }
  },
  [`&.${je.selected}`]: {
    color: (e.vars || e).palette.primary.contrastText,
    backgroundColor: (e.vars || e).palette.primary.main,
    fontWeight: e.typography.fontWeightMedium,
    "&:hover": {
      willChange: "background-color",
      backgroundColor: (e.vars || e).palette.primary.dark
    }
  },
  [`&.${je.disabled}:not(.${je.selected})`]: {
    color: (e.vars || e).palette.text.disabled
  },
  [`&.${je.disabled}&.${je.selected}`]: {
    opacity: 0.6
  },
  variants: [{
    props: {
      disableMargin: !1
    },
    style: {
      margin: `0 ${St}px`
    }
  }, {
    props: {
      outsideCurrentMonth: !0,
      showDaysOutsideCurrentMonth: !0
    },
    style: {
      color: (e.vars || e).palette.text.secondary
    }
  }, {
    props: {
      disableHighlightToday: !1,
      today: !0
    },
    style: {
      [`&:not(.${je.selected})`]: {
        border: `1px solid ${(e.vars || e).palette.text.secondary}`
      }
    }
  }]
}), So = (e, n) => {
  const {
    ownerState: r
  } = e;
  return [n.root, !r.disableMargin && n.dayWithMargin, !r.disableHighlightToday && r.today && n.today, !r.outsideCurrentMonth && r.showDaysOutsideCurrentMonth && n.dayOutsideMonth, r.outsideCurrentMonth && !r.showDaysOutsideCurrentMonth && n.hiddenDaySpacingFiller];
}, Li = _(Lt, {
  name: "MuiPickersDay",
  slot: "Root",
  overridesResolver: So
})(wo), Ni = _("div", {
  name: "MuiPickersDay",
  slot: "Root",
  overridesResolver: So
})(({
  theme: e
}) => g({}, wo({
  theme: e
}), {
  // visibility: 'hidden' does not work here as it hides the element from screen readers as well
  opacity: 0,
  pointerEvents: "none"
})), ot = () => {
}, Co = /* @__PURE__ */ m.forwardRef(function(n, r) {
  const o = be({
    props: n,
    name: "MuiPickersDay"
  }), {
    autoFocus: s = !1,
    className: a,
    day: l,
    disabled: c = !1,
    disableHighlightToday: i = !1,
    disableMargin: u = !1,
    isAnimating: d,
    onClick: p,
    onDaySelect: h,
    onFocus: w = ot,
    onBlur: b = ot,
    onKeyDown: D = ot,
    onMouseDown: f = ot,
    onMouseEnter: v = ot,
    outsideCurrentMonth: y,
    selected: S = !1,
    showDaysOutsideCurrentMonth: C = !1,
    children: O,
    today: E = !1
  } = o, V = se(o, Ei), x = g({}, o, {
    autoFocus: s,
    disabled: c,
    disableHighlightToday: i,
    disableMargin: u,
    selected: S,
    showDaysOutsideCurrentMonth: C,
    today: E
  }), $ = Ai(x), B = ye(), R = m.useRef(null), F = Ce(R, r);
  Ie(() => {
    s && !c && !d && !y && R.current.focus();
  }, [s, c, d, y]);
  const L = (I) => {
    f(I), y && I.preventDefault();
  }, M = (I) => {
    c || h(l), y && I.currentTarget.focus(), p && p(I);
  };
  return y && !C ? /* @__PURE__ */ P(Ni, {
    className: pe($.root, $.hiddenDaySpacingFiller, a),
    ownerState: x,
    role: V.role
  }) : /* @__PURE__ */ P(Li, g({
    className: pe($.root, a),
    ref: F,
    centerRipple: !0,
    disabled: c,
    tabIndex: S ? 0 : -1,
    onKeyDown: (I) => D(I, l),
    onFocus: (I) => w(I, l),
    onBlur: (I) => b(I, l),
    onMouseEnter: (I) => v(I, l),
    onClick: M,
    onMouseDown: L
  }, V, {
    ownerState: x,
    children: O || B.format(l, "dayOfMonth")
  }));
});
process.env.NODE_ENV !== "production" && (Co.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * A ref for imperative actions.
   * It currently only supports `focusVisible()` action.
   */
  action: t.oneOfType([t.func, t.shape({
    current: t.shape({
      focusVisible: t.func.isRequired
    })
  })]),
  /**
   * If `true`, the ripples are centered.
   * They won't start at the cursor interaction position.
   * @default false
   */
  centerRipple: t.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  className: t.string,
  component: t.elementType,
  /**
   * The date to show.
   */
  day: t.object.isRequired,
  /**
   * If `true`, renders as disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, today's date is rendering without highlighting with circle.
   * @default false
   */
  disableHighlightToday: t.bool,
  /**
   * If `true`, days are rendering without margin. Useful for displaying linked range of days.
   * @default false
   */
  disableMargin: t.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: t.bool,
  /**
   * If `true`, the touch ripple effect is disabled.
   * @default false
   */
  disableTouchRipple: t.bool,
  /**
   * If `true`, the base button will have a keyboard focus ripple.
   * @default false
   */
  focusRipple: t.bool,
  /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */
  focusVisibleClassName: t.string,
  isAnimating: t.bool,
  /**
   * If `true`, day is the first visible cell of the month.
   * Either the first day of the month or the first day of the week depending on `showDaysOutsideCurrentMonth`.
   */
  isFirstVisibleCell: t.bool.isRequired,
  /**
   * If `true`, day is the last visible cell of the month.
   * Either the last day of the month or the last day of the week depending on `showDaysOutsideCurrentMonth`.
   */
  isLastVisibleCell: t.bool.isRequired,
  onBlur: t.func,
  onDaySelect: t.func.isRequired,
  onFocus: t.func,
  /**
   * Callback fired when the component is focused with a keyboard.
   * We trigger a `onFocus` callback too.
   */
  onFocusVisible: t.func,
  onKeyDown: t.func,
  onMouseEnter: t.func,
  /**
   * If `true`, day is outside of month and will be hidden.
   */
  outsideCurrentMonth: t.bool.isRequired,
  /**
   * If `true`, renders as selected.
   * @default false
   */
  selected: t.bool,
  /**
   * If `true`, days outside the current month are rendered:
   *
   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
   *
   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
   *
   * - ignored if `calendars` equals more than `1` on range pickers.
   * @default false
   */
  showDaysOutsideCurrentMonth: t.bool,
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * @default 0
   */
  tabIndex: t.number,
  /**
   * If `true`, renders as today date.
   * @default false
   */
  today: t.bool,
  /**
   * Props applied to the `TouchRipple` element.
   */
  TouchRippleProps: t.object,
  /**
   * A ref that points to the `TouchRipple` element.
   */
  touchRippleRef: t.oneOfType([t.func, t.shape({
    current: t.shape({
      pulsate: t.func.isRequired,
      start: t.func.isRequired,
      stop: t.func.isRequired
    })
  })])
});
const $i = /* @__PURE__ */ m.memo(Co), Bi = (e) => me("MuiPickersSlideTransition", e), Pe = he("MuiPickersSlideTransition", ["root", "slideEnter-left", "slideEnter-right", "slideEnterActive", "slideExit", "slideExitActiveLeft-left", "slideExitActiveLeft-right"]), ji = ["children", "className", "reduceAnimations", "slideDirection", "transKey", "classes"], zi = (e) => {
  const {
    classes: n,
    slideDirection: r
  } = e, o = {
    root: ["root"],
    exit: ["slideExit"],
    enterActive: ["slideEnterActive"],
    enter: [`slideEnter-${r}`],
    exitActive: [`slideExitActiveLeft-${r}`]
  };
  return ge(o, Bi, n);
}, Yi = _(Tn, {
  name: "MuiPickersSlideTransition",
  slot: "Root",
  overridesResolver: (e, n) => [n.root, {
    [`.${Pe["slideEnter-left"]}`]: n["slideEnter-left"]
  }, {
    [`.${Pe["slideEnter-right"]}`]: n["slideEnter-right"]
  }, {
    [`.${Pe.slideEnterActive}`]: n.slideEnterActive
  }, {
    [`.${Pe.slideExit}`]: n.slideExit
  }, {
    [`.${Pe["slideExitActiveLeft-left"]}`]: n["slideExitActiveLeft-left"]
  }, {
    [`.${Pe["slideExitActiveLeft-right"]}`]: n["slideExitActiveLeft-right"]
  }]
})(({
  theme: e
}) => {
  const n = e.transitions.create("transform", {
    duration: e.transitions.duration.complex,
    easing: "cubic-bezier(0.35, 0.8, 0.4, 1)"
  });
  return {
    display: "block",
    position: "relative",
    overflowX: "hidden",
    "& > *": {
      position: "absolute",
      top: 0,
      right: 0,
      left: 0
    },
    [`& .${Pe["slideEnter-left"]}`]: {
      willChange: "transform",
      transform: "translate(100%)",
      zIndex: 1
    },
    [`& .${Pe["slideEnter-right"]}`]: {
      willChange: "transform",
      transform: "translate(-100%)",
      zIndex: 1
    },
    [`& .${Pe.slideEnterActive}`]: {
      transform: "translate(0%)",
      transition: n
    },
    [`& .${Pe.slideExit}`]: {
      transform: "translate(0%)"
    },
    [`& .${Pe["slideExitActiveLeft-left"]}`]: {
      willChange: "transform",
      transform: "translate(-100%)",
      transition: n,
      zIndex: 0
    },
    [`& .${Pe["slideExitActiveLeft-right"]}`]: {
      willChange: "transform",
      transform: "translate(100%)",
      transition: n,
      zIndex: 0
    }
  };
});
function Wi(e) {
  const n = be({
    props: e,
    name: "MuiPickersSlideTransition"
  }), {
    children: r,
    className: o,
    reduceAnimations: s,
    transKey: a
    // extracting `classes` from `other`
  } = n, l = se(n, ji), c = zi(n), i = On();
  if (s)
    return /* @__PURE__ */ P("div", {
      className: pe(c.root, o),
      children: r
    });
  const u = {
    exit: c.exit,
    enterActive: c.enterActive,
    enter: c.enter,
    exitActive: c.exitActive
  };
  return /* @__PURE__ */ P(Yi, {
    className: pe(c.root, o),
    childFactory: (d) => /* @__PURE__ */ m.cloneElement(d, {
      classNames: u
    }),
    role: "presentation",
    children: /* @__PURE__ */ P(Bt, g({
      mountOnEnter: !0,
      unmountOnExit: !0,
      timeout: i.transitions.duration.complex,
      classNames: u
    }, l, {
      children: r
    }), a)
  });
}
const qi = (e) => me("MuiDayCalendar", e);
he("MuiDayCalendar", ["root", "header", "weekDayLabel", "loadingContainer", "slideTransition", "monthContainer", "weekContainer", "weekNumberLabel", "weekNumber"]);
const Ui = ["parentProps", "day", "focusableDay", "selectedDays", "isDateDisabled", "currentMonthNumber", "isViewFocused"], Hi = ["ownerState"], _i = (e) => {
  const {
    classes: n
  } = e;
  return ge({
    root: ["root"],
    header: ["header"],
    weekDayLabel: ["weekDayLabel"],
    loadingContainer: ["loadingContainer"],
    slideTransition: ["slideTransition"],
    monthContainer: ["monthContainer"],
    weekContainer: ["weekContainer"],
    weekNumberLabel: ["weekNumberLabel"],
    weekNumber: ["weekNumber"]
  }, qi, n);
}, xo = (st + St * 2) * 6, Ki = _("div", {
  name: "MuiDayCalendar",
  slot: "Root",
  overridesResolver: (e, n) => n.root
})({}), Gi = _("div", {
  name: "MuiDayCalendar",
  slot: "Header",
  overridesResolver: (e, n) => n.header
})({
  display: "flex",
  justifyContent: "center",
  alignItems: "center"
}), Zi = _(Qe, {
  name: "MuiDayCalendar",
  slot: "WeekDayLabel",
  overridesResolver: (e, n) => n.weekDayLabel
})(({
  theme: e
}) => ({
  width: 36,
  height: 40,
  margin: "0 2px",
  textAlign: "center",
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  color: (e.vars || e).palette.text.secondary
})), Qi = _(Qe, {
  name: "MuiDayCalendar",
  slot: "WeekNumberLabel",
  overridesResolver: (e, n) => n.weekNumberLabel
})(({
  theme: e
}) => ({
  width: 36,
  height: 40,
  margin: "0 2px",
  textAlign: "center",
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  color: e.palette.text.disabled
})), Xi = _(Qe, {
  name: "MuiDayCalendar",
  slot: "WeekNumber",
  overridesResolver: (e, n) => n.weekNumber
})(({
  theme: e
}) => g({}, e.typography.caption, {
  width: st,
  height: st,
  padding: 0,
  margin: `0 ${St}px`,
  color: e.palette.text.disabled,
  fontSize: "0.75rem",
  alignItems: "center",
  justifyContent: "center",
  display: "inline-flex"
})), Ji = _("div", {
  name: "MuiDayCalendar",
  slot: "LoadingContainer",
  overridesResolver: (e, n) => n.loadingContainer
})({
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  minHeight: xo
}), el = _(Wi, {
  name: "MuiDayCalendar",
  slot: "SlideTransition",
  overridesResolver: (e, n) => n.slideTransition
})({
  minHeight: xo
}), tl = _("div", {
  name: "MuiDayCalendar",
  slot: "MonthContainer",
  overridesResolver: (e, n) => n.monthContainer
})({
  overflow: "hidden"
}), nl = _("div", {
  name: "MuiDayCalendar",
  slot: "WeekContainer",
  overridesResolver: (e, n) => n.weekContainer
})({
  margin: `${St}px 0`,
  display: "flex",
  justifyContent: "center"
});
function ol(e) {
  let {
    parentProps: n,
    day: r,
    focusableDay: o,
    selectedDays: s,
    isDateDisabled: a,
    currentMonthNumber: l,
    isViewFocused: c
  } = e, i = se(e, Ui);
  const {
    disabled: u,
    disableHighlightToday: d,
    isMonthSwitchingAnimating: p,
    showDaysOutsideCurrentMonth: h,
    slots: w,
    slotProps: b,
    timezone: D
  } = n, f = ye(), v = wt(D), y = o !== null && f.isSameDay(r, o), S = s.some((F) => f.isSameDay(F, r)), C = f.isSameDay(r, v), O = (w == null ? void 0 : w.day) ?? $i, E = ue({
    elementType: O,
    externalSlotProps: b == null ? void 0 : b.day,
    additionalProps: g({
      disableHighlightToday: d,
      showDaysOutsideCurrentMonth: h,
      role: "gridcell",
      isAnimating: p,
      // it is used in date range dragging logic by accessing `dataset.timestamp`
      "data-timestamp": f.toJsDate(r).valueOf()
    }, i),
    ownerState: g({}, n, {
      day: r,
      selected: S
    })
  }), V = se(E, Hi), x = m.useMemo(() => u || a(r), [u, a, r]), $ = m.useMemo(() => f.getMonth(r) !== l, [f, r, l]), B = m.useMemo(() => {
    const F = f.startOfMonth(f.setMonth(r, l));
    return h ? f.isSameDay(r, f.startOfWeek(F)) : f.isSameDay(r, F);
  }, [l, r, h, f]), R = m.useMemo(() => {
    const F = f.endOfMonth(f.setMonth(r, l));
    return h ? f.isSameDay(r, f.endOfWeek(F)) : f.isSameDay(r, F);
  }, [l, r, h, f]);
  return /* @__PURE__ */ P(O, g({}, V, {
    day: r,
    disabled: x,
    autoFocus: c && y,
    today: C,
    outsideCurrentMonth: $,
    isFirstVisibleCell: B,
    isLastVisibleCell: R,
    selected: S,
    tabIndex: y ? 0 : -1,
    "aria-selected": S,
    "aria-current": C ? "date" : void 0
  }));
}
function rl(e) {
  const n = be({
    props: e,
    name: "MuiDayCalendar"
  }), r = ye(), {
    onFocusedDayChange: o,
    className: s,
    currentMonth: a,
    selectedDays: l,
    focusedDay: c,
    loading: i,
    onSelectedDaysChange: u,
    onMonthSwitchingAnimationEnd: d,
    readOnly: p,
    reduceAnimations: h,
    renderLoading: w = () => /* @__PURE__ */ P("span", {
      children: "..."
    }),
    slideDirection: b,
    TransitionProps: D,
    disablePast: f,
    disableFuture: v,
    minDate: y,
    maxDate: S,
    shouldDisableDate: C,
    shouldDisableMonth: O,
    shouldDisableYear: E,
    dayOfWeekFormatter: V = (j) => r.format(j, "weekdayShort").charAt(0).toUpperCase(),
    hasFocus: x,
    onFocusedViewChange: $,
    gridLabelId: B,
    displayWeekNumber: R,
    fixedWeekNumber: F,
    autoFocus: L,
    timezone: M
  } = n, I = wt(M), A = _i(n), Q = Ee(), H = vo({
    shouldDisableDate: C,
    shouldDisableMonth: O,
    shouldDisableYear: E,
    minDate: y,
    maxDate: S,
    disablePast: f,
    disableFuture: v,
    timezone: M
  }), K = Ae(), [oe, J] = ze({
    name: "DayCalendar",
    state: "hasFocus",
    controlled: x,
    default: L ?? !1
  }), [ie, de] = m.useState(() => c || I), le = G((j) => {
    p || u(j);
  }), T = (j) => {
    H(j) || (o(j), de(j), $ == null || $(!0), J(!0));
  }, q = G((j, ee) => {
    switch (j.key) {
      case "ArrowUp":
        T(r.addDays(ee, -7)), j.preventDefault();
        break;
      case "ArrowDown":
        T(r.addDays(ee, 7)), j.preventDefault();
        break;
      case "ArrowLeft": {
        const U = r.addDays(ee, Q ? 1 : -1), re = r.addMonths(ee, Q ? 1 : -1), fe = rt({
          utils: r,
          date: U,
          minDate: Q ? U : r.startOfMonth(re),
          maxDate: Q ? r.endOfMonth(re) : U,
          isDateDisabled: H,
          timezone: M
        });
        T(fe || U), j.preventDefault();
        break;
      }
      case "ArrowRight": {
        const U = r.addDays(ee, Q ? -1 : 1), re = r.addMonths(ee, Q ? -1 : 1), fe = rt({
          utils: r,
          date: U,
          minDate: Q ? r.startOfMonth(re) : U,
          maxDate: Q ? U : r.endOfMonth(re),
          isDateDisabled: H,
          timezone: M
        });
        T(fe || U), j.preventDefault();
        break;
      }
      case "Home":
        T(r.startOfWeek(ee)), j.preventDefault();
        break;
      case "End":
        T(r.endOfWeek(ee)), j.preventDefault();
        break;
      case "PageUp":
        T(r.addMonths(ee, 1)), j.preventDefault();
        break;
      case "PageDown":
        T(r.addMonths(ee, -1)), j.preventDefault();
        break;
    }
  }), W = G((j, ee) => T(ee)), N = G((j, ee) => {
    oe && r.isSameDay(ie, ee) && ($ == null || $(!1));
  }), X = r.getMonth(a), ne = r.getYear(a), te = m.useMemo(() => l.filter((j) => !!j).map((j) => r.startOfDay(j)), [r, l]), Y = `${ne}-${X}`, k = m.useMemo(() => /* @__PURE__ */ m.createRef(), [Y]), z = m.useMemo(() => {
    const j = r.startOfMonth(a), ee = r.endOfMonth(a);
    return H(ie) || r.isAfterDay(ie, ee) || r.isBeforeDay(ie, j) ? rt({
      utils: r,
      date: ie,
      minDate: j,
      maxDate: ee,
      disablePast: f,
      disableFuture: v,
      isDateDisabled: H,
      timezone: M
    }) : ie;
  }, [a, v, f, ie, H, r, M]), Z = m.useMemo(() => {
    const j = r.getWeekArray(a);
    let ee = r.addMonths(a, 1);
    for (; F && j.length < F; ) {
      const U = r.getWeekArray(ee), re = r.isSameDay(j[j.length - 1][0], U[0][0]);
      U.slice(re ? 1 : 0).forEach((fe) => {
        j.length < F && j.push(fe);
      }), ee = r.addMonths(ee, 1);
    }
    return j;
  }, [a, F, r]);
  return /* @__PURE__ */ ve(Ki, {
    role: "grid",
    "aria-labelledby": B,
    className: A.root,
    children: [/* @__PURE__ */ ve(Gi, {
      role: "row",
      className: A.header,
      children: [R && /* @__PURE__ */ P(Qi, {
        variant: "caption",
        role: "columnheader",
        "aria-label": K.calendarWeekNumberHeaderLabel,
        className: A.weekNumberLabel,
        children: K.calendarWeekNumberHeaderText
      }), Gr(r, I).map((j, ee) => /* @__PURE__ */ P(Zi, {
        variant: "caption",
        role: "columnheader",
        "aria-label": r.format(j, "weekday"),
        className: A.weekDayLabel,
        children: V(j)
      }, ee.toString()))]
    }), i ? /* @__PURE__ */ P(Ji, {
      className: A.loadingContainer,
      children: w()
    }) : /* @__PURE__ */ P(el, g({
      transKey: Y,
      onExited: d,
      reduceAnimations: h,
      slideDirection: b,
      className: pe(s, A.slideTransition)
    }, D, {
      nodeRef: k,
      children: /* @__PURE__ */ P(tl, {
        ref: k,
        role: "rowgroup",
        className: A.monthContainer,
        children: Z.map((j, ee) => /* @__PURE__ */ ve(nl, {
          role: "row",
          className: A.weekContainer,
          "aria-rowindex": ee + 1,
          children: [R && /* @__PURE__ */ P(Xi, {
            className: A.weekNumber,
            role: "rowheader",
            "aria-label": K.calendarWeekNumberAriaLabelText(r.getWeekNumber(j[0])),
            children: K.calendarWeekNumberText(r.getWeekNumber(j[0]))
          }), j.map((U, re) => /* @__PURE__ */ P(ol, {
            parentProps: n,
            day: U,
            selectedDays: te,
            focusableDay: z,
            onKeyDown: q,
            onFocus: W,
            onBlur: N,
            onDaySelect: le,
            isDateDisabled: H,
            currentMonthNumber: X,
            isViewFocused: oe,
            "aria-colindex": re + 1
          }, U.toString()))]
        }, `week-${j[0]}`))
      })
    }))]
  });
}
function sl(e) {
  return me("MuiPickersMonth", e);
}
const pt = he("MuiPickersMonth", ["root", "monthButton", "disabled", "selected"]), al = ["autoFocus", "className", "children", "disabled", "selected", "value", "tabIndex", "onClick", "onKeyDown", "onFocus", "onBlur", "aria-current", "aria-label", "monthsPerRow", "slots", "slotProps"], il = (e) => {
  const {
    disabled: n,
    selected: r,
    classes: o
  } = e;
  return ge({
    root: ["root"],
    monthButton: ["monthButton", n && "disabled", r && "selected"]
  }, sl, o);
}, ll = _("div", {
  name: "MuiPickersMonth",
  slot: "Root",
  overridesResolver: (e, n) => [n.root]
})({
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  flexBasis: "33.3%",
  variants: [{
    props: {
      monthsPerRow: 4
    },
    style: {
      flexBasis: "25%"
    }
  }]
}), cl = _("button", {
  name: "MuiPickersMonth",
  slot: "MonthButton",
  overridesResolver: (e, n) => [n.monthButton, {
    [`&.${pt.disabled}`]: n.disabled
  }, {
    [`&.${pt.selected}`]: n.selected
  }]
})(({
  theme: e
}) => g({
  color: "unset",
  backgroundColor: "transparent",
  border: 0,
  outline: 0
}, e.typography.subtitle1, {
  margin: "8px 0",
  height: 36,
  width: 72,
  borderRadius: 18,
  cursor: "pointer",
  "&:focus": {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})` : Se(e.palette.action.active, e.palette.action.hoverOpacity)
  },
  "&:hover": {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})` : Se(e.palette.action.active, e.palette.action.hoverOpacity)
  },
  "&:disabled": {
    cursor: "auto",
    pointerEvents: "none"
  },
  [`&.${pt.disabled}`]: {
    color: (e.vars || e).palette.text.secondary
  },
  [`&.${pt.selected}`]: {
    color: (e.vars || e).palette.primary.contrastText,
    backgroundColor: (e.vars || e).palette.primary.main,
    "&:focus, &:hover": {
      backgroundColor: (e.vars || e).palette.primary.dark
    }
  }
})), ul = /* @__PURE__ */ m.memo(function(n) {
  const r = be({
    props: n,
    name: "MuiPickersMonth"
  }), {
    autoFocus: o,
    className: s,
    children: a,
    disabled: l,
    selected: c,
    value: i,
    tabIndex: u,
    onClick: d,
    onKeyDown: p,
    onFocus: h,
    onBlur: w,
    "aria-current": b,
    "aria-label": D,
    slots: f,
    slotProps: v
  } = r, y = se(r, al), S = m.useRef(null), C = il(r);
  Ie(() => {
    var V;
    o && ((V = S.current) == null || V.focus());
  }, [o]);
  const O = (f == null ? void 0 : f.monthButton) ?? cl, E = ue({
    elementType: O,
    externalSlotProps: v == null ? void 0 : v.monthButton,
    additionalProps: {
      children: a,
      disabled: l,
      tabIndex: u,
      ref: S,
      type: "button",
      role: "radio",
      "aria-current": b,
      "aria-checked": c,
      "aria-label": D,
      onClick: (V) => d(V, i),
      onKeyDown: (V) => p(V, i),
      onFocus: (V) => h(V, i),
      onBlur: (V) => w(V, i)
    },
    ownerState: r,
    className: C.monthButton
  });
  return /* @__PURE__ */ P(ll, g({
    className: pe(C.root, s),
    ownerState: r
  }, y, {
    children: /* @__PURE__ */ P(O, g({}, E))
  }));
});
function dl(e) {
  return me("MuiMonthCalendar", e);
}
he("MuiMonthCalendar", ["root"]);
const pl = ["className", "value", "defaultValue", "referenceDate", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onChange", "shouldDisableMonth", "readOnly", "disableHighlightToday", "autoFocus", "onMonthFocus", "hasFocus", "onFocusedViewChange", "monthsPerRow", "timezone", "gridLabelId", "slots", "slotProps"], fl = (e) => {
  const {
    classes: n
  } = e;
  return ge({
    root: ["root"]
  }, dl, n);
};
function ml(e, n) {
  const r = ye(), o = lt(), s = be({
    props: e,
    name: n
  });
  return g({
    disableFuture: !1,
    disablePast: !1
  }, s, {
    minDate: Me(r, s.minDate, o.minDate),
    maxDate: Me(r, s.maxDate, o.maxDate)
  });
}
const hl = _("div", {
  name: "MuiMonthCalendar",
  slot: "Root",
  overridesResolver: (e, n) => n.root
})({
  display: "flex",
  flexWrap: "wrap",
  alignContent: "stretch",
  padding: "0 4px",
  width: Ct,
  // avoid padding increasing width over defined
  boxSizing: "border-box"
}), Po = /* @__PURE__ */ m.forwardRef(function(n, r) {
  const o = ml(n, "MuiMonthCalendar"), {
    className: s,
    value: a,
    defaultValue: l,
    referenceDate: c,
    disabled: i,
    disableFuture: u,
    disablePast: d,
    maxDate: p,
    minDate: h,
    onChange: w,
    shouldDisableMonth: b,
    readOnly: D,
    autoFocus: f = !1,
    onMonthFocus: v,
    hasFocus: y,
    onFocusedViewChange: S,
    monthsPerRow: C = 3,
    timezone: O,
    gridLabelId: E,
    slots: V,
    slotProps: x
  } = o, $ = se(o, pl), {
    value: B,
    handleValueChange: R,
    timezone: F
  } = Kt({
    name: "MonthCalendar",
    timezone: O,
    value: a,
    defaultValue: l,
    onChange: w,
    valueManager: Re
  }), L = wt(F), M = Ee(), I = ye(), A = m.useMemo(
    () => Re.getInitialReferenceValue({
      value: B,
      utils: I,
      props: o,
      timezone: F,
      referenceDate: c,
      granularity: Oe.month
    }),
    []
    // eslint-disable-line react-hooks/exhaustive-deps
  ), Q = o, H = fl(Q), K = m.useMemo(() => I.getMonth(L), [I, L]), oe = m.useMemo(() => B != null ? I.getMonth(B) : null, [B, I]), [J, ie] = m.useState(() => oe || I.getMonth(A)), [de, le] = ze({
    name: "MonthCalendar",
    state: "hasFocus",
    controlled: y,
    default: f ?? !1
  }), T = G((Y) => {
    le(Y), S && S(Y);
  }), q = m.useCallback((Y) => {
    const k = I.startOfMonth(d && I.isAfter(L, h) ? L : h), z = I.startOfMonth(u && I.isBefore(L, p) ? L : p), Z = I.startOfMonth(Y);
    return I.isBefore(Z, k) || I.isAfter(Z, z) ? !0 : b ? b(Z) : !1;
  }, [u, d, p, h, L, b, I]), W = G((Y, k) => {
    if (D)
      return;
    const z = I.setMonth(B ?? A, k);
    R(z);
  }), N = G((Y) => {
    q(I.setMonth(B ?? A, Y)) || (ie(Y), T(!0), v && v(Y));
  });
  m.useEffect(() => {
    ie((Y) => oe !== null && Y !== oe ? oe : Y);
  }, [oe]);
  const X = G((Y, k) => {
    switch (Y.key) {
      case "ArrowUp":
        N((12 + k - 3) % 12), Y.preventDefault();
        break;
      case "ArrowDown":
        N((12 + k + 3) % 12), Y.preventDefault();
        break;
      case "ArrowLeft":
        N((12 + k + (M ? 1 : -1)) % 12), Y.preventDefault();
        break;
      case "ArrowRight":
        N((12 + k + (M ? -1 : 1)) % 12), Y.preventDefault();
        break;
    }
  }), ne = G((Y, k) => {
    N(k);
  }), te = G((Y, k) => {
    J === k && T(!1);
  });
  return /* @__PURE__ */ P(hl, g({
    ref: r,
    className: pe(H.root, s),
    ownerState: Q,
    role: "radiogroup",
    "aria-labelledby": E
  }, $, {
    children: zt(I, B ?? A).map((Y) => {
      const k = I.getMonth(Y), z = I.format(Y, "monthShort"), Z = I.format(Y, "month"), j = k === oe, ee = i || q(Y);
      return /* @__PURE__ */ P(ul, {
        selected: j,
        value: k,
        onClick: W,
        onKeyDown: X,
        autoFocus: de && k === J,
        disabled: ee,
        tabIndex: k === J && !ee ? 0 : -1,
        onFocus: ne,
        onBlur: te,
        "aria-current": K === k ? "date" : void 0,
        "aria-label": Z,
        monthsPerRow: C,
        slots: V,
        slotProps: x,
        children: z
      }, z);
    })
  }));
});
process.env.NODE_ENV !== "production" && (Po.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  autoFocus: t.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  className: t.string,
  /**
   * The default selected value.
   * Used when the component is not controlled.
   */
  defaultValue: t.object,
  /**
   * If `true` picker is disabled
   */
  disabled: t.bool,
  /**
   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disableFuture: t.bool,
  /**
   * If `true`, today's date is rendering without highlighting with circle.
   * @default false
   */
  disableHighlightToday: t.bool,
  /**
   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disablePast: t.bool,
  gridLabelId: t.string,
  hasFocus: t.bool,
  /**
   * Maximal selectable date.
   * @default 2099-12-31
   */
  maxDate: t.object,
  /**
   * Minimal selectable date.
   * @default 1900-01-01
   */
  minDate: t.object,
  /**
   * Months rendered per row.
   * @default 3
   */
  monthsPerRow: t.oneOf([3, 4]),
  /**
   * Callback fired when the value changes.
   * @template TDate
   * @param {TDate} value The new value.
   */
  onChange: t.func,
  onFocusedViewChange: t.func,
  onMonthFocus: t.func,
  /**
   * If `true` picker is readonly
   */
  readOnly: t.bool,
  /**
   * The date used to generate the new value when both `value` and `defaultValue` are empty.
   * @default The closest valid month using the validation props, except callbacks such as `shouldDisableMonth`.
   */
  referenceDate: t.object,
  /**
   * Disable specific month.
   * @template TDate
   * @param {TDate} month The month to test.
   * @returns {boolean} If `true`, the month will be disabled.
   */
  shouldDisableMonth: t.func,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: t.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Choose which timezone to use for the value.
   * Example: "default", "system", "UTC", "America/New_York".
   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
   */
  timezone: t.string,
  /**
   * The selected value.
   * Used when the component is controlled.
   */
  value: t.object
});
function bl(e) {
  return me("MuiPickersYear", e);
}
const ft = he("MuiPickersYear", ["root", "yearButton", "selected", "disabled"]), gl = ["autoFocus", "className", "children", "disabled", "selected", "value", "tabIndex", "onClick", "onKeyDown", "onFocus", "onBlur", "aria-current", "yearsPerRow", "slots", "slotProps"], yl = (e) => {
  const {
    disabled: n,
    selected: r,
    classes: o
  } = e;
  return ge({
    root: ["root"],
    yearButton: ["yearButton", n && "disabled", r && "selected"]
  }, bl, o);
}, vl = _("div", {
  name: "MuiPickersYear",
  slot: "Root",
  overridesResolver: (e, n) => [n.root]
})({
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  flexBasis: "33.3%",
  variants: [{
    props: {
      yearsPerRow: 4
    },
    style: {
      flexBasis: "25%"
    }
  }]
}), Dl = _("button", {
  name: "MuiPickersYear",
  slot: "YearButton",
  overridesResolver: (e, n) => [n.yearButton, {
    [`&.${ft.disabled}`]: n.disabled
  }, {
    [`&.${ft.selected}`]: n.selected
  }]
})(({
  theme: e
}) => g({
  color: "unset",
  backgroundColor: "transparent",
  border: 0,
  outline: 0
}, e.typography.subtitle1, {
  margin: "6px 0",
  height: 36,
  width: 72,
  borderRadius: 18,
  cursor: "pointer",
  "&:focus": {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.focusOpacity})` : Se(e.palette.action.active, e.palette.action.focusOpacity)
  },
  "&:hover": {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})` : Se(e.palette.action.active, e.palette.action.hoverOpacity)
  },
  "&:disabled": {
    cursor: "auto",
    pointerEvents: "none"
  },
  [`&.${ft.disabled}`]: {
    color: (e.vars || e).palette.text.secondary
  },
  [`&.${ft.selected}`]: {
    color: (e.vars || e).palette.primary.contrastText,
    backgroundColor: (e.vars || e).palette.primary.main,
    "&:focus, &:hover": {
      backgroundColor: (e.vars || e).palette.primary.dark
    }
  }
})), wl = /* @__PURE__ */ m.memo(function(n) {
  const r = be({
    props: n,
    name: "MuiPickersYear"
  }), {
    autoFocus: o,
    className: s,
    children: a,
    disabled: l,
    selected: c,
    value: i,
    tabIndex: u,
    onClick: d,
    onKeyDown: p,
    onFocus: h,
    onBlur: w,
    "aria-current": b,
    slots: D,
    slotProps: f
  } = r, v = se(r, gl), y = m.useRef(null), S = yl(r);
  Ie(() => {
    var E;
    o && ((E = y.current) == null || E.focus());
  }, [o]);
  const C = (D == null ? void 0 : D.yearButton) ?? Dl, O = ue({
    elementType: C,
    externalSlotProps: f == null ? void 0 : f.yearButton,
    additionalProps: {
      children: a,
      disabled: l,
      tabIndex: u,
      ref: y,
      type: "button",
      role: "radio",
      "aria-current": b,
      "aria-checked": c,
      onClick: (E) => d(E, i),
      onKeyDown: (E) => p(E, i),
      onFocus: (E) => h(E, i),
      onBlur: (E) => w(E, i)
    },
    ownerState: r,
    className: S.yearButton
  });
  return /* @__PURE__ */ P(vl, g({
    className: pe(S.root, s),
    ownerState: r
  }, v, {
    children: /* @__PURE__ */ P(C, g({}, O))
  }));
});
function Sl(e) {
  return me("MuiYearCalendar", e);
}
he("MuiYearCalendar", ["root"]);
const Cl = ["autoFocus", "className", "value", "defaultValue", "referenceDate", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onChange", "readOnly", "shouldDisableYear", "disableHighlightToday", "onYearFocus", "hasFocus", "onFocusedViewChange", "yearsOrder", "yearsPerRow", "timezone", "gridLabelId", "slots", "slotProps"], xl = (e) => {
  const {
    classes: n
  } = e;
  return ge({
    root: ["root"]
  }, Sl, n);
};
function Pl(e, n) {
  const r = ye(), o = lt(), s = be({
    props: e,
    name: n
  });
  return g({
    disablePast: !1,
    disableFuture: !1
  }, s, {
    yearsPerRow: s.yearsPerRow ?? 3,
    minDate: Me(r, s.minDate, o.minDate),
    maxDate: Me(r, s.maxDate, o.maxDate)
  });
}
const Ml = _("div", {
  name: "MuiYearCalendar",
  slot: "Root",
  overridesResolver: (e, n) => n.root
})({
  display: "flex",
  flexDirection: "row",
  flexWrap: "wrap",
  overflowY: "auto",
  height: "100%",
  padding: "0 4px",
  width: Ct,
  maxHeight: ra,
  // avoid padding increasing width over defined
  boxSizing: "border-box",
  position: "relative"
}), Mo = /* @__PURE__ */ m.forwardRef(function(n, r) {
  const o = Pl(n, "MuiYearCalendar"), {
    autoFocus: s,
    className: a,
    value: l,
    defaultValue: c,
    referenceDate: i,
    disabled: u,
    disableFuture: d,
    disablePast: p,
    maxDate: h,
    minDate: w,
    onChange: b,
    readOnly: D,
    shouldDisableYear: f,
    onYearFocus: v,
    hasFocus: y,
    onFocusedViewChange: S,
    yearsOrder: C = "asc",
    yearsPerRow: O,
    timezone: E,
    gridLabelId: V,
    slots: x,
    slotProps: $
  } = o, B = se(o, Cl), {
    value: R,
    handleValueChange: F,
    timezone: L
  } = Kt({
    name: "YearCalendar",
    timezone: E,
    value: l,
    defaultValue: c,
    onChange: b,
    valueManager: Re
  }), M = wt(L), I = Ee(), A = ye(), Q = m.useMemo(
    () => Re.getInitialReferenceValue({
      value: R,
      utils: A,
      props: o,
      timezone: L,
      referenceDate: i,
      granularity: Oe.year
    }),
    []
    // eslint-disable-line react-hooks/exhaustive-deps
  ), H = o, K = xl(H), oe = m.useMemo(() => A.getYear(M), [A, M]), J = m.useMemo(() => R != null ? A.getYear(R) : null, [R, A]), [ie, de] = m.useState(() => J || A.getYear(Q)), [le, T] = ze({
    name: "YearCalendar",
    state: "hasFocus",
    controlled: y,
    default: s ?? !1
  }), q = G((U) => {
    T(U), S && S(U);
  }), W = m.useCallback((U) => {
    if (p && A.isBeforeYear(U, M) || d && A.isAfterYear(U, M) || w && A.isBeforeYear(U, w) || h && A.isAfterYear(U, h))
      return !0;
    if (!f)
      return !1;
    const re = A.startOfYear(U);
    return f(re);
  }, [d, p, h, w, M, f, A]), N = G((U, re) => {
    if (D)
      return;
    const fe = A.setYear(R ?? Q, re);
    F(fe);
  }), X = G((U) => {
    W(A.setYear(R ?? Q, U)) || (de(U), q(!0), v == null || v(U));
  });
  m.useEffect(() => {
    de((U) => J !== null && U !== J ? J : U);
  }, [J]);
  const ne = C !== "desc" ? O * 1 : O * -1, te = I && C === "asc" || !I && C === "desc" ? -1 : 1, Y = G((U, re) => {
    switch (U.key) {
      case "ArrowUp":
        X(re - ne), U.preventDefault();
        break;
      case "ArrowDown":
        X(re + ne), U.preventDefault();
        break;
      case "ArrowLeft":
        X(re - te), U.preventDefault();
        break;
      case "ArrowRight":
        X(re + te), U.preventDefault();
        break;
    }
  }), k = G((U, re) => {
    X(re);
  }), z = G((U, re) => {
    ie === re && q(!1);
  }), Z = m.useRef(null), j = Ce(r, Z);
  m.useEffect(() => {
    if (s || Z.current === null)
      return;
    const U = Z.current.querySelector('[tabindex="0"]');
    if (!U)
      return;
    const re = U.offsetHeight, fe = U.offsetTop, Ne = Z.current.clientHeight, qe = Z.current.scrollTop, Mt = fe + re;
    re > Ne || fe < qe || (Z.current.scrollTop = Mt - Ne / 2 - re / 2);
  }, [s]);
  const ee = A.getYearRange([w, h]);
  return C === "desc" && ee.reverse(), /* @__PURE__ */ P(Ml, g({
    ref: j,
    className: pe(K.root, a),
    ownerState: H,
    role: "radiogroup",
    "aria-labelledby": V
  }, B, {
    children: ee.map((U) => {
      const re = A.getYear(U), fe = re === J, Ne = u || W(U);
      return /* @__PURE__ */ P(wl, {
        selected: fe,
        value: re,
        onClick: N,
        onKeyDown: Y,
        autoFocus: le && re === ie,
        disabled: Ne,
        tabIndex: re === ie && !Ne ? 0 : -1,
        onFocus: k,
        onBlur: z,
        "aria-current": oe === re ? "date" : void 0,
        yearsPerRow: O,
        slots: x,
        slotProps: $,
        children: A.format(U, "year")
      }, A.format(U, "year"));
    })
  }));
});
process.env.NODE_ENV !== "production" && (Mo.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  autoFocus: t.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  className: t.string,
  /**
   * The default selected value.
   * Used when the component is not controlled.
   */
  defaultValue: t.object,
  /**
   * If `true` picker is disabled
   */
  disabled: t.bool,
  /**
   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disableFuture: t.bool,
  /**
   * If `true`, today's date is rendering without highlighting with circle.
   * @default false
   */
  disableHighlightToday: t.bool,
  /**
   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disablePast: t.bool,
  gridLabelId: t.string,
  hasFocus: t.bool,
  /**
   * Maximal selectable date.
   * @default 2099-12-31
   */
  maxDate: t.object,
  /**
   * Minimal selectable date.
   * @default 1900-01-01
   */
  minDate: t.object,
  /**
   * Callback fired when the value changes.
   * @template TDate
   * @param {TDate} value The new value.
   */
  onChange: t.func,
  onFocusedViewChange: t.func,
  onYearFocus: t.func,
  /**
   * If `true` picker is readonly
   */
  readOnly: t.bool,
  /**
   * The date used to generate the new value when both `value` and `defaultValue` are empty.
   * @default The closest valid year using the validation props, except callbacks such as `shouldDisableYear`.
   */
  referenceDate: t.object,
  /**
   * Disable specific year.
   * @template TDate
   * @param {TDate} year The year to test.
   * @returns {boolean} If `true`, the year will be disabled.
   */
  shouldDisableYear: t.func,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: t.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Choose which timezone to use for the value.
   * Example: "default", "system", "UTC", "America/New_York".
   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
   */
  timezone: t.string,
  /**
   * The selected value.
   * Used when the component is controlled.
   */
  value: t.object,
  /**
   * Years are displayed in ascending (chronological) order by default.
   * If `desc`, years are displayed in descending order.
   * @default 'asc'
   */
  yearsOrder: t.oneOf(["asc", "desc"]),
  /**
   * Years rendered per row.
   * @default 3
   */
  yearsPerRow: t.oneOf([3, 4])
});
const kl = (e) => me("MuiPickersCalendarHeader", e), Tl = he("MuiPickersCalendarHeader", ["root", "labelContainer", "label", "switchViewButton", "switchViewIcon"]);
function Ol(e) {
  return me("MuiPickersArrowSwitcher", e);
}
he("MuiPickersArrowSwitcher", ["root", "spacer", "button", "previousIconButton", "nextIconButton", "leftArrowIcon", "rightArrowIcon"]);
const Rl = ["children", "className", "slots", "slotProps", "isNextDisabled", "isNextHidden", "onGoToNext", "nextLabel", "isPreviousDisabled", "isPreviousHidden", "onGoToPrevious", "previousLabel", "labelId"], Il = ["ownerState"], Vl = ["ownerState"], Fl = _("div", {
  name: "MuiPickersArrowSwitcher",
  slot: "Root",
  overridesResolver: (e, n) => n.root
})({
  display: "flex"
}), El = _("div", {
  name: "MuiPickersArrowSwitcher",
  slot: "Spacer",
  overridesResolver: (e, n) => n.spacer
})(({
  theme: e
}) => ({
  width: e.spacing(3)
})), kn = _(yt, {
  name: "MuiPickersArrowSwitcher",
  slot: "Button",
  overridesResolver: (e, n) => n.button
})({
  variants: [{
    props: {
      hidden: !0
    },
    style: {
      visibility: "hidden"
    }
  }]
}), Al = (e) => {
  const {
    classes: n
  } = e;
  return ge({
    root: ["root"],
    spacer: ["spacer"],
    button: ["button"],
    previousIconButton: ["previousIconButton"],
    nextIconButton: ["nextIconButton"],
    leftArrowIcon: ["leftArrowIcon"],
    rightArrowIcon: ["rightArrowIcon"]
  }, Ol, n);
}, Ll = /* @__PURE__ */ m.forwardRef(function(n, r) {
  const o = Ee(), s = be({
    props: n,
    name: "MuiPickersArrowSwitcher"
  }), {
    children: a,
    className: l,
    slots: c,
    slotProps: i,
    isNextDisabled: u,
    isNextHidden: d,
    onGoToNext: p,
    nextLabel: h,
    isPreviousDisabled: w,
    isPreviousHidden: b,
    onGoToPrevious: D,
    previousLabel: f,
    labelId: v
  } = s, y = se(s, Rl), S = s, C = Al(S), O = {
    isDisabled: u,
    isHidden: d,
    goTo: p,
    label: h
  }, E = {
    isDisabled: w,
    isHidden: b,
    goTo: D,
    label: f
  }, V = (c == null ? void 0 : c.previousIconButton) ?? kn, x = ue({
    elementType: V,
    externalSlotProps: i == null ? void 0 : i.previousIconButton,
    additionalProps: {
      size: "medium",
      title: E.label,
      "aria-label": E.label,
      disabled: E.isDisabled,
      edge: "end",
      onClick: E.goTo
    },
    ownerState: g({}, S, {
      hidden: E.isHidden
    }),
    className: pe(C.button, C.previousIconButton)
  }), $ = (c == null ? void 0 : c.nextIconButton) ?? kn, B = ue({
    elementType: $,
    externalSlotProps: i == null ? void 0 : i.nextIconButton,
    additionalProps: {
      size: "medium",
      title: O.label,
      "aria-label": O.label,
      disabled: O.isDisabled,
      edge: "start",
      onClick: O.goTo
    },
    ownerState: g({}, S, {
      hidden: O.isHidden
    }),
    className: pe(C.button, C.nextIconButton)
  }), R = (c == null ? void 0 : c.leftArrowIcon) ?? va, F = ue({
    elementType: R,
    externalSlotProps: i == null ? void 0 : i.leftArrowIcon,
    additionalProps: {
      fontSize: "inherit"
    },
    ownerState: S,
    className: C.leftArrowIcon
  }), L = se(F, Il), M = (c == null ? void 0 : c.rightArrowIcon) ?? Da, I = ue({
    elementType: M,
    externalSlotProps: i == null ? void 0 : i.rightArrowIcon,
    additionalProps: {
      fontSize: "inherit"
    },
    ownerState: S,
    className: C.rightArrowIcon
  }), A = se(I, Vl);
  return /* @__PURE__ */ ve(Fl, g({
    ref: r,
    className: pe(C.root, l),
    ownerState: S
  }, y, {
    children: [/* @__PURE__ */ P(V, g({}, x, {
      children: o ? /* @__PURE__ */ P(M, g({}, A)) : /* @__PURE__ */ P(R, g({}, L))
    })), a ? /* @__PURE__ */ P(Qe, {
      variant: "subtitle1",
      component: "span",
      id: v,
      children: a
    }) : /* @__PURE__ */ P(El, {
      className: C.spacer,
      ownerState: S
    }), /* @__PURE__ */ P($, g({}, B, {
      children: o ? /* @__PURE__ */ P(R, g({}, L)) : /* @__PURE__ */ P(M, g({}, A))
    }))]
  }));
});
function Nl(e, {
  disableFuture: n,
  maxDate: r,
  timezone: o
}) {
  const s = ye();
  return m.useMemo(() => {
    const a = s.date(void 0, o), l = s.startOfMonth(n && s.isBefore(a, r) ? a : r);
    return !s.isAfter(l, e);
  }, [n, r, e, s, o]);
}
function $l(e, {
  disablePast: n,
  minDate: r,
  timezone: o
}) {
  const s = ye();
  return m.useMemo(() => {
    const a = s.date(void 0, o), l = s.startOfMonth(n && s.isAfter(a, r) ? a : r);
    return !s.isBefore(l, e);
  }, [n, r, e, s, o]);
}
const Bl = ["slots", "slotProps", "currentMonth", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onMonthChange", "onViewChange", "view", "reduceAnimations", "views", "labelId", "className", "timezone", "format"], jl = ["ownerState"], zl = (e) => {
  const {
    classes: n
  } = e;
  return ge({
    root: ["root"],
    labelContainer: ["labelContainer"],
    label: ["label"],
    switchViewButton: ["switchViewButton"],
    switchViewIcon: ["switchViewIcon"]
  }, kl, n);
}, Yl = _("div", {
  name: "MuiPickersCalendarHeader",
  slot: "Root",
  overridesResolver: (e, n) => n.root
})({
  display: "flex",
  alignItems: "center",
  marginTop: 12,
  marginBottom: 4,
  paddingLeft: 24,
  paddingRight: 12,
  // prevent jumping in safari
  maxHeight: 40,
  minHeight: 40
}), Wl = _("div", {
  name: "MuiPickersCalendarHeader",
  slot: "LabelContainer",
  overridesResolver: (e, n) => n.labelContainer
})(({
  theme: e
}) => g({
  display: "flex",
  overflow: "hidden",
  alignItems: "center",
  cursor: "pointer",
  marginRight: "auto"
}, e.typography.body1, {
  fontWeight: e.typography.fontWeightMedium
})), ql = _("div", {
  name: "MuiPickersCalendarHeader",
  slot: "Label",
  overridesResolver: (e, n) => n.label
})({
  marginRight: 6
}), Ul = _(yt, {
  name: "MuiPickersCalendarHeader",
  slot: "SwitchViewButton",
  overridesResolver: (e, n) => n.switchViewButton
})({
  marginRight: "auto",
  variants: [{
    props: {
      view: "year"
    },
    style: {
      [`.${Tl.switchViewIcon}`]: {
        transform: "rotate(180deg)"
      }
    }
  }]
}), Hl = _(ya, {
  name: "MuiPickersCalendarHeader",
  slot: "SwitchViewIcon",
  overridesResolver: (e, n) => n.switchViewIcon
})(({
  theme: e
}) => ({
  willChange: "transform",
  transition: e.transitions.create("transform"),
  transform: "rotate(0deg)"
})), ko = /* @__PURE__ */ m.forwardRef(function(n, r) {
  const o = Ae(), s = ye(), a = be({
    props: n,
    name: "MuiPickersCalendarHeader"
  }), {
    slots: l,
    slotProps: c,
    currentMonth: i,
    disabled: u,
    disableFuture: d,
    disablePast: p,
    maxDate: h,
    minDate: w,
    onMonthChange: b,
    onViewChange: D,
    view: f,
    reduceAnimations: v,
    views: y,
    labelId: S,
    className: C,
    timezone: O,
    format: E = `${s.formats.month} ${s.formats.year}`
  } = a, V = se(a, Bl), x = a, $ = zl(a), B = (l == null ? void 0 : l.switchViewButton) ?? Ul, R = ue({
    elementType: B,
    externalSlotProps: c == null ? void 0 : c.switchViewButton,
    additionalProps: {
      size: "small",
      "aria-label": o.calendarViewSwitchingButtonAriaLabel(f)
    },
    ownerState: x,
    className: $.switchViewButton
  }), F = (l == null ? void 0 : l.switchViewIcon) ?? Hl, L = ue({
    elementType: F,
    externalSlotProps: c == null ? void 0 : c.switchViewIcon,
    ownerState: x,
    className: $.switchViewIcon
  }), M = se(L, jl), I = () => b(s.addMonths(i, 1), "left"), A = () => b(s.addMonths(i, -1), "right"), Q = Nl(i, {
    disableFuture: d,
    maxDate: h,
    timezone: O
  }), H = $l(i, {
    disablePast: p,
    minDate: w,
    timezone: O
  }), K = () => {
    if (!(y.length === 1 || !D || u))
      if (y.length === 2)
        D(y.find((J) => J !== f) || y[0]);
      else {
        const J = y.indexOf(f) !== 0 ? 0 : 1;
        D(y[J]);
      }
  };
  if (y.length === 1 && y[0] === "year")
    return null;
  const oe = s.formatByString(i, E);
  return /* @__PURE__ */ ve(Yl, g({}, V, {
    ownerState: x,
    className: pe($.root, C),
    ref: r,
    children: [/* @__PURE__ */ ve(Wl, {
      role: "presentation",
      onClick: K,
      ownerState: x,
      "aria-live": "polite",
      className: $.labelContainer,
      children: [/* @__PURE__ */ P(Do, {
        reduceAnimations: v,
        transKey: oe,
        children: /* @__PURE__ */ P(ql, {
          id: S,
          ownerState: x,
          className: $.label,
          children: oe
        })
      }), y.length > 1 && !u && /* @__PURE__ */ P(B, g({}, R, {
        children: /* @__PURE__ */ P(F, g({}, M))
      }))]
    }), /* @__PURE__ */ P(gt, {
      in: f === "day",
      children: /* @__PURE__ */ P(Ll, {
        slots: l,
        slotProps: c,
        onGoToPrevious: A,
        isPreviousDisabled: H,
        previousLabel: o.previousMonth,
        onGoToNext: I,
        isNextDisabled: Q,
        nextLabel: o.nextMonth
      })
    })]
  }));
});
process.env.NODE_ENV !== "production" && (ko.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  className: t.string,
  currentMonth: t.object.isRequired,
  disabled: t.bool,
  disableFuture: t.bool,
  disablePast: t.bool,
  /**
   * Format used to display the date.
   * @default `${adapter.formats.month} ${adapter.formats.year}`
   */
  format: t.string,
  /**
   * Id of the calendar text element.
   * It is used to establish an `aria-labelledby` relationship with the calendar `grid` element.
   */
  labelId: t.string,
  maxDate: t.object.isRequired,
  minDate: t.object.isRequired,
  onMonthChange: t.func.isRequired,
  onViewChange: t.func,
  reduceAnimations: t.bool.isRequired,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: t.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  timezone: t.string.isRequired,
  view: t.oneOf(["day", "month", "year"]).isRequired,
  views: t.arrayOf(t.oneOf(["day", "month", "year"]).isRequired).isRequired
});
const _l = _("div")({
  overflow: "hidden",
  width: Ct,
  maxHeight: Gt,
  display: "flex",
  flexDirection: "column",
  margin: "0 auto"
}), Kl = (e) => me("MuiDateCalendar", e);
he("MuiDateCalendar", ["root", "viewTransitionContainer"]);
const Gl = ["autoFocus", "onViewChange", "value", "defaultValue", "referenceDate", "disableFuture", "disablePast", "onChange", "onYearChange", "onMonthChange", "reduceAnimations", "shouldDisableDate", "shouldDisableMonth", "shouldDisableYear", "view", "views", "openTo", "className", "disabled", "readOnly", "minDate", "maxDate", "disableHighlightToday", "focusedView", "onFocusedViewChange", "showDaysOutsideCurrentMonth", "fixedWeekNumber", "dayOfWeekFormatter", "slots", "slotProps", "loading", "renderLoading", "displayWeekNumber", "yearsOrder", "yearsPerRow", "monthsPerRow", "timezone"], Zl = (e) => {
  const {
    classes: n
  } = e;
  return ge({
    root: ["root"],
    viewTransitionContainer: ["viewTransitionContainer"]
  }, Kl, n);
};
function Ql(e, n) {
  const r = ye(), o = lt(), s = ro(), a = be({
    props: e,
    name: n
  });
  return g({}, a, {
    loading: a.loading ?? !1,
    disablePast: a.disablePast ?? !1,
    disableFuture: a.disableFuture ?? !1,
    openTo: a.openTo ?? "day",
    views: a.views ?? ["year", "day"],
    reduceAnimations: a.reduceAnimations ?? s,
    renderLoading: a.renderLoading ?? (() => /* @__PURE__ */ P("span", {
      children: "..."
    })),
    minDate: Me(r, a.minDate, o.minDate),
    maxDate: Me(r, a.maxDate, o.maxDate)
  });
}
const Xl = _(_l, {
  name: "MuiDateCalendar",
  slot: "Root",
  overridesResolver: (e, n) => n.root
})({
  display: "flex",
  flexDirection: "column",
  height: Gt
}), Jl = _(Do, {
  name: "MuiDateCalendar",
  slot: "ViewTransitionContainer",
  overridesResolver: (e, n) => n.viewTransitionContainer
})({}), To = /* @__PURE__ */ m.forwardRef(function(n, r) {
  const o = ye(), s = it(), a = Ql(n, "MuiDateCalendar"), {
    autoFocus: l,
    onViewChange: c,
    value: i,
    defaultValue: u,
    referenceDate: d,
    disableFuture: p,
    disablePast: h,
    onChange: w,
    onYearChange: b,
    onMonthChange: D,
    reduceAnimations: f,
    shouldDisableDate: v,
    shouldDisableMonth: y,
    shouldDisableYear: S,
    view: C,
    views: O,
    openTo: E,
    className: V,
    disabled: x,
    readOnly: $,
    minDate: B,
    maxDate: R,
    disableHighlightToday: F,
    focusedView: L,
    onFocusedViewChange: M,
    showDaysOutsideCurrentMonth: I,
    fixedWeekNumber: A,
    dayOfWeekFormatter: Q,
    slots: H,
    slotProps: K,
    loading: oe,
    renderLoading: J,
    displayWeekNumber: ie,
    yearsOrder: de,
    yearsPerRow: le,
    monthsPerRow: T,
    timezone: q
  } = a, W = se(a, Gl), {
    value: N,
    handleValueChange: X,
    timezone: ne
  } = Kt({
    name: "DateCalendar",
    timezone: q,
    value: i,
    defaultValue: u,
    onChange: w,
    valueManager: Re
  }), {
    view: te,
    setView: Y,
    focusedView: k,
    setFocusedView: z,
    goToNextView: Z,
    setValueAndGoToNextView: j
  } = so({
    view: C,
    views: O,
    openTo: E,
    onChange: X,
    onViewChange: c,
    autoFocus: l,
    focusedView: L,
    onFocusedViewChange: M
  }), {
    referenceDate: ee,
    calendarState: U,
    changeFocusedDay: re,
    changeMonth: fe,
    handleChangeMonth: Ne,
    isDateDisabled: qe,
    onMonthSwitchingAnimationEnd: Mt
  } = Oi({
    value: N,
    referenceDate: d,
    reduceAnimations: f,
    onMonthChange: D,
    minDate: B,
    maxDate: R,
    shouldDisableDate: v,
    disablePast: h,
    disableFuture: p,
    timezone: ne
  }), Vo = x && N || B, Fo = x && N || R, nn = `${s}-grid-label`, kt = k !== null, on = (H == null ? void 0 : H.calendarHeader) ?? ko, Eo = ue({
    elementType: on,
    externalSlotProps: K == null ? void 0 : K.calendarHeader,
    additionalProps: {
      views: O,
      view: te,
      currentMonth: U.currentMonth,
      onViewChange: Y,
      onMonthChange: (De, Te) => Ne({
        newMonth: De,
        direction: Te
      }),
      minDate: Vo,
      maxDate: Fo,
      disabled: x,
      disablePast: h,
      disableFuture: p,
      reduceAnimations: f,
      timezone: ne,
      labelId: nn
    },
    ownerState: a
  }), Ao = G((De) => {
    const Te = o.startOfMonth(De), Xe = o.endOfMonth(De), Le = qe(De) ? rt({
      utils: o,
      date: De,
      minDate: o.isBefore(B, Te) ? Te : B,
      maxDate: o.isAfter(R, Xe) ? Xe : R,
      disablePast: h,
      disableFuture: p,
      isDateDisabled: qe,
      timezone: ne
    }) : De;
    Le ? (j(Le, "finish"), D == null || D(Te)) : (Z(), fe(Te)), re(Le, !0);
  }), Lo = G((De) => {
    const Te = o.startOfYear(De), Xe = o.endOfYear(De), Le = qe(De) ? rt({
      utils: o,
      date: De,
      minDate: o.isBefore(B, Te) ? Te : B,
      maxDate: o.isAfter(R, Xe) ? Xe : R,
      disablePast: h,
      disableFuture: p,
      isDateDisabled: qe,
      timezone: ne
    }) : De;
    Le ? (j(Le, "finish"), b == null || b(Le)) : (Z(), fe(Te)), re(Le, !0);
  }), No = G((De) => X(De && ht(o, De, N ?? ee), "finish", te));
  m.useEffect(() => {
    N != null && o.isValid(N) && fe(N);
  }, [N]);
  const Tt = a, rn = Zl(Tt), Ot = {
    disablePast: h,
    disableFuture: p,
    maxDate: R,
    minDate: B
  }, Rt = {
    disableHighlightToday: F,
    readOnly: $,
    disabled: x,
    timezone: ne,
    gridLabelId: nn,
    slots: H,
    slotProps: K
  }, It = m.useRef(te);
  m.useEffect(() => {
    It.current !== te && (k === It.current && z(te, !0), It.current = te);
  }, [k, z, te]);
  const $o = m.useMemo(() => [N], [N]);
  return /* @__PURE__ */ ve(Xl, g({
    ref: r,
    className: pe(rn.root, V),
    ownerState: Tt
  }, W, {
    children: [/* @__PURE__ */ P(on, g({}, Eo, {
      slots: H,
      slotProps: K
    })), /* @__PURE__ */ P(Jl, {
      reduceAnimations: f,
      className: rn.viewTransitionContainer,
      transKey: te,
      ownerState: Tt,
      children: /* @__PURE__ */ ve("div", {
        children: [te === "year" && /* @__PURE__ */ P(Mo, g({}, Ot, Rt, {
          value: N,
          onChange: Lo,
          shouldDisableYear: S,
          hasFocus: kt,
          onFocusedViewChange: (De) => z("year", De),
          yearsOrder: de,
          yearsPerRow: le,
          referenceDate: ee
        })), te === "month" && /* @__PURE__ */ P(Po, g({}, Ot, Rt, {
          hasFocus: kt,
          className: V,
          value: N,
          onChange: Ao,
          shouldDisableMonth: y,
          onFocusedViewChange: (De) => z("month", De),
          monthsPerRow: T,
          referenceDate: ee
        })), te === "day" && /* @__PURE__ */ P(rl, g({}, U, Ot, Rt, {
          onMonthSwitchingAnimationEnd: Mt,
          onFocusedDayChange: re,
          reduceAnimations: f,
          selectedDays: $o,
          onSelectedDaysChange: No,
          shouldDisableDate: v,
          shouldDisableMonth: y,
          shouldDisableYear: S,
          hasFocus: kt,
          onFocusedViewChange: (De) => z("day", De),
          showDaysOutsideCurrentMonth: I,
          fixedWeekNumber: A,
          dayOfWeekFormatter: Q,
          displayWeekNumber: ie,
          loading: oe,
          renderLoading: J
        }))]
      })
    })]
  }));
});
process.env.NODE_ENV !== "production" && (To.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If `true`, the main element is focused during the first mount.
   * This main element is:
   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
   * - the `input` element if there is a field rendered.
   */
  autoFocus: t.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  className: t.string,
  /**
   * Formats the day of week displayed in the calendar header.
   * @param {TDate} date The date of the day of week provided by the adapter.
   * @returns {string} The name to display.
   * @default (date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()
   */
  dayOfWeekFormatter: t.func,
  /**
   * The default selected value.
   * Used when the component is not controlled.
   */
  defaultValue: t.object,
  /**
   * If `true`, the picker and text field are disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disableFuture: t.bool,
  /**
   * If `true`, today's date is rendering without highlighting with circle.
   * @default false
   */
  disableHighlightToday: t.bool,
  /**
   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disablePast: t.bool,
  /**
   * If `true`, the week number will be display in the calendar.
   */
  displayWeekNumber: t.bool,
  /**
   * The day view will show as many weeks as needed after the end of the current month to match this value.
   * Put it to 6 to have a fixed number of weeks in Gregorian calendars
   */
  fixedWeekNumber: t.number,
  /**
   * Controlled focused view.
   */
  focusedView: t.oneOf(["day", "month", "year"]),
  /**
   * If `true`, calls `renderLoading` instead of rendering the day calendar.
   * Can be used to preload information and show it in calendar.
   * @default false
   */
  loading: t.bool,
  /**
   * Maximal selectable date.
   * @default 2099-12-31
   */
  maxDate: t.object,
  /**
   * Minimal selectable date.
   * @default 1900-01-01
   */
  minDate: t.object,
  /**
   * Months rendered per row.
   * @default 3
   */
  monthsPerRow: t.oneOf([3, 4]),
  /**
   * Callback fired when the value changes.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TView The view type. Will be one of date or time views.
   * @param {TValue} value The new value.
   * @param {PickerSelectionState | undefined} selectionState Indicates if the date selection is complete.
   * @param {TView | undefined} selectedView Indicates the view in which the selection has been made.
   */
  onChange: t.func,
  /**
   * Callback fired on focused view change.
   * @template TView
   * @param {TView} view The new view to focus or not.
   * @param {boolean} hasFocus `true` if the view should be focused.
   */
  onFocusedViewChange: t.func,
  /**
   * Callback fired on month change.
   * @template TDate
   * @param {TDate} month The new month.
   */
  onMonthChange: t.func,
  /**
   * Callback fired on view change.
   * @template TView
   * @param {TView} view The new view.
   */
  onViewChange: t.func,
  /**
   * Callback fired on year change.
   * @template TDate
   * @param {TDate} year The new year.
   */
  onYearChange: t.func,
  /**
   * The default visible view.
   * Used when the component view is not controlled.
   * Must be a valid option from `views` list.
   */
  openTo: t.oneOf(["day", "month", "year"]),
  /**
   * Make picker read only.
   * @default false
   */
  readOnly: t.bool,
  /**
   * If `true`, disable heavy animations.
   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
   */
  reduceAnimations: t.bool,
  /**
   * The date used to generate the new value when both `value` and `defaultValue` are empty.
   * @default The closest valid date using the validation props, except callbacks such as `shouldDisableDate`.
   */
  referenceDate: t.object,
  /**
   * Component displaying when passed `loading` true.
   * @returns {React.ReactNode} The node to render when loading.
   * @default () => <span>...</span>
   */
  renderLoading: t.func,
  /**
   * Disable specific date.
   *
   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
   *
   * @template TDate
   * @param {TDate} day The date to test.
   * @returns {boolean} If `true` the date will be disabled.
   */
  shouldDisableDate: t.func,
  /**
   * Disable specific month.
   * @template TDate
   * @param {TDate} month The month to test.
   * @returns {boolean} If `true`, the month will be disabled.
   */
  shouldDisableMonth: t.func,
  /**
   * Disable specific year.
   * @template TDate
   * @param {TDate} year The year to test.
   * @returns {boolean} If `true`, the year will be disabled.
   */
  shouldDisableYear: t.func,
  /**
   * If `true`, days outside the current month are rendered:
   *
   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
   *
   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
   *
   * - ignored if `calendars` equals more than `1` on range pickers.
   * @default false
   */
  showDaysOutsideCurrentMonth: t.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: t.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Choose which timezone to use for the value.
   * Example: "default", "system", "UTC", "America/New_York".
   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
   */
  timezone: t.string,
  /**
   * The selected value.
   * Used when the component is controlled.
   */
  value: t.object,
  /**
   * The visible view.
   * Used when the component view is controlled.
   * Must be a valid option from `views` list.
   */
  view: t.oneOf(["day", "month", "year"]),
  /**
   * Available views.
   */
  views: t.arrayOf(t.oneOf(["day", "month", "year"]).isRequired),
  /**
   * Years are displayed in ascending (chronological) order by default.
   * If `desc`, years are displayed in descending order.
   * @default 'asc'
   */
  yearsOrder: t.oneOf(["asc", "desc"]),
  /**
   * Years rendered per row.
   * @default 3
   */
  yearsPerRow: t.oneOf([3, 4])
});
const Ge = ({
  view: e,
  onViewChange: n,
  views: r,
  focusedView: o,
  onFocusedViewChange: s,
  value: a,
  defaultValue: l,
  referenceDate: c,
  onChange: i,
  className: u,
  classes: d,
  disableFuture: p,
  disablePast: h,
  minDate: w,
  maxDate: b,
  shouldDisableDate: D,
  shouldDisableMonth: f,
  shouldDisableYear: v,
  reduceAnimations: y,
  onMonthChange: S,
  monthsPerRow: C,
  onYearChange: O,
  yearsOrder: E,
  yearsPerRow: V,
  slots: x,
  slotProps: $,
  loading: B,
  renderLoading: R,
  disableHighlightToday: F,
  readOnly: L,
  disabled: M,
  showDaysOutsideCurrentMonth: I,
  dayOfWeekFormatter: A,
  sx: Q,
  autoFocus: H,
  fixedWeekNumber: K,
  displayWeekNumber: oe,
  timezone: J
}) => /* @__PURE__ */ P(To, {
  view: e,
  onViewChange: n,
  views: r.filter(fn),
  focusedView: o && fn(o) ? o : null,
  onFocusedViewChange: s,
  value: a,
  defaultValue: l,
  referenceDate: c,
  onChange: i,
  className: u,
  classes: d,
  disableFuture: p,
  disablePast: h,
  minDate: w,
  maxDate: b,
  shouldDisableDate: D,
  shouldDisableMonth: f,
  shouldDisableYear: v,
  reduceAnimations: y,
  onMonthChange: S,
  monthsPerRow: C,
  onYearChange: O,
  yearsOrder: E,
  yearsPerRow: V,
  slots: x,
  slotProps: $,
  loading: B,
  renderLoading: R,
  disableHighlightToday: F,
  readOnly: L,
  disabled: M,
  showDaysOutsideCurrentMonth: I,
  dayOfWeekFormatter: A,
  sx: Q,
  autoFocus: H,
  fixedWeekNumber: K,
  displayWeekNumber: oe,
  timezone: J
}), Oo = /* @__PURE__ */ m.forwardRef(function(n, r) {
  var u, d;
  const o = Ae(), s = ye(), a = eo(n, "MuiDesktopDatePicker"), l = g({
    day: Ge,
    month: Ge,
    year: Ge
  }, a.viewRenderers), c = g({}, a, {
    viewRenderers: l,
    format: Yt(s, a, !1),
    yearsPerRow: a.yearsPerRow ?? 4,
    slots: g({
      openPickerIcon: wa,
      field: tn
    }, a.slots),
    slotProps: g({}, a.slotProps, {
      field: (p) => {
        var h;
        return g({}, Fn((h = a.slotProps) == null ? void 0 : h.field, p), no(a), {
          ref: r
        });
      },
      toolbar: g({
        hidden: !0
      }, (u = a.slotProps) == null ? void 0 : u.toolbar)
    })
  }), {
    renderPicker: i
  } = ga({
    props: c,
    valueManager: Re,
    valueType: "date",
    getOpenDialogAriaText: Qn({
      utils: s,
      formatKey: "fullDate",
      contextTranslation: o.openDatePickerDialogue,
      propsTranslation: (d = c.localeText) == null ? void 0 : d.openDatePickerDialogue
    }),
    validator: ct
  });
  return i();
});
Oo.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If `true`, the main element is focused during the first mount.
   * This main element is:
   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
   * - the `input` element if there is a field rendered.
   */
  autoFocus: t.bool,
  className: t.string,
  /**
   * If `true`, the popover or modal will close after submitting the full date.
   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
   */
  closeOnSelect: t.bool,
  /**
   * Formats the day of week displayed in the calendar header.
   * @param {TDate} date The date of the day of week provided by the adapter.
   * @returns {string} The name to display.
   * @default (date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()
   */
  dayOfWeekFormatter: t.func,
  /**
   * The default value.
   * Used when the component is not controlled.
   */
  defaultValue: t.object,
  /**
   * If `true`, the picker and text field are disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disableFuture: t.bool,
  /**
   * If `true`, today's date is rendering without highlighting with circle.
   * @default false
   */
  disableHighlightToday: t.bool,
  /**
   * If `true`, the open picker button will not be rendered (renders only the field).
   * @default false
   */
  disableOpenPicker: t.bool,
  /**
   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disablePast: t.bool,
  /**
   * If `true`, the week number will be display in the calendar.
   */
  displayWeekNumber: t.bool,
  /**
   * @default false
   */
  enableAccessibleFieldDOMStructure: t.any,
  /**
   * The day view will show as many weeks as needed after the end of the current month to match this value.
   * Put it to 6 to have a fixed number of weeks in Gregorian calendars
   */
  fixedWeekNumber: t.number,
  /**
   * Format of the date when rendered in the input(s).
   * Defaults to localized format based on the used `views`.
   */
  format: t.string,
  /**
   * Density of the format when rendered in the input.
   * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
   * @default "dense"
   */
  formatDensity: t.oneOf(["dense", "spacious"]),
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: Ve,
  /**
   * The label content.
   */
  label: t.node,
  /**
   * If `true`, calls `renderLoading` instead of rendering the day calendar.
   * Can be used to preload information and show it in calendar.
   * @default false
   */
  loading: t.bool,
  /**
   * Locale for components texts.
   * Allows overriding texts coming from `LocalizationProvider` and `theme`.
   */
  localeText: t.object,
  /**
   * Maximal selectable date.
   * @default 2099-12-31
   */
  maxDate: t.object,
  /**
   * Minimal selectable date.
   * @default 1900-01-01
   */
  minDate: t.object,
  /**
   * Months rendered per row.
   * @default 3
   */
  monthsPerRow: t.oneOf([3, 4]),
  /**
   * Name attribute used by the `input` element in the Field.
   */
  name: t.string,
  /**
   * Callback fired when the value is accepted.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @param {TValue} value The value that was just accepted.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onAccept: t.func,
  /**
   * Callback fired when the value changes.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @param {TValue} value The new value.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onChange: t.func,
  /**
   * Callback fired when the popup requests to be closed.
   * Use in controlled mode (see `open`).
   */
  onClose: t.func,
  /**
   * Callback fired when the error associated with the current value changes.
   * When a validation error is detected, the `error` parameter contains a non-null value.
   * This can be used to render an appropriate form error.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @param {TError} error The reason why the current value is not valid.
   * @param {TValue} value The value associated with the error.
   */
  onError: t.func,
  /**
   * Callback fired on month change.
   * @template TDate
   * @param {TDate} month The new month.
   */
  onMonthChange: t.func,
  /**
   * Callback fired when the popup requests to be opened.
   * Use in controlled mode (see `open`).
   */
  onOpen: t.func,
  /**
   * Callback fired when the selected sections change.
   * @param {FieldSelectedSections} newValue The new selected sections.
   */
  onSelectedSectionsChange: t.func,
  /**
   * Callback fired on view change.
   * @template TView
   * @param {TView} view The new view.
   */
  onViewChange: t.func,
  /**
   * Callback fired on year change.
   * @template TDate
   * @param {TDate} year The new year.
   */
  onYearChange: t.func,
  /**
   * Control the popup or dialog open state.
   * @default false
   */
  open: t.bool,
  /**
   * The default visible view.
   * Used when the component view is not controlled.
   * Must be a valid option from `views` list.
   */
  openTo: t.oneOf(["day", "month", "year"]),
  /**
   * Force rendering in particular orientation.
   */
  orientation: t.oneOf(["landscape", "portrait"]),
  readOnly: t.bool,
  /**
   * If `true`, disable heavy animations.
   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
   */
  reduceAnimations: t.bool,
  /**
   * The date used to generate the new value when both `value` and `defaultValue` are empty.
   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
   */
  referenceDate: t.object,
  /**
   * Component displaying when passed `loading` true.
   * @returns {React.ReactNode} The node to render when loading.
   * @default () => <span>...</span>
   */
  renderLoading: t.func,
  /**
   * The currently selected sections.
   * This prop accepts four formats:
   * 1. If a number is provided, the section at this index will be selected.
   * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
   * 3. If `"all"` is provided, all the sections will be selected.
   * 4. If `null` is provided, no section will be selected.
   * If not provided, the selected sections will be handled internally.
   */
  selectedSections: t.oneOfType([t.oneOf(["all", "day", "empty", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), t.number]),
  /**
   * Disable specific date.
   *
   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
   *
   * @template TDate
   * @param {TDate} day The date to test.
   * @returns {boolean} If `true` the date will be disabled.
   */
  shouldDisableDate: t.func,
  /**
   * Disable specific month.
   * @template TDate
   * @param {TDate} month The month to test.
   * @returns {boolean} If `true`, the month will be disabled.
   */
  shouldDisableMonth: t.func,
  /**
   * Disable specific year.
   * @template TDate
   * @param {TDate} year The year to test.
   * @returns {boolean} If `true`, the year will be disabled.
   */
  shouldDisableYear: t.func,
  /**
   * If `true`, days outside the current month are rendered:
   *
   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
   *
   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
   *
   * - ignored if `calendars` equals more than `1` on range pickers.
   * @default false
   */
  showDaysOutsideCurrentMonth: t.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: t.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Choose which timezone to use for the value.
   * Example: "default", "system", "UTC", "America/New_York".
   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
   */
  timezone: t.string,
  /**
   * The selected value.
   * Used when the component is controlled.
   */
  value: t.object,
  /**
   * The visible view.
   * Used when the component view is controlled.
   * Must be a valid option from `views` list.
   */
  view: t.oneOf(["day", "month", "year"]),
  /**
   * Define custom view renderers for each section.
   * If `null`, the section will only have field editing.
   * If `undefined`, internally defined view will be used.
   */
  viewRenderers: t.shape({
    day: t.func,
    month: t.func,
    year: t.func
  }),
  /**
   * Available views.
   */
  views: t.arrayOf(t.oneOf(["day", "month", "year"]).isRequired),
  /**
   * Years are displayed in ascending (chronological) order by default.
   * If `desc`, years are displayed in descending order.
   * @default 'asc'
   */
  yearsOrder: t.oneOf(["asc", "desc"]),
  /**
   * Years rendered per row.
   * @default 4
   */
  yearsPerRow: t.oneOf([3, 4])
};
const ec = _(nr)({
  [`& .${an.container}`]: {
    outline: 0
  },
  [`& .${an.paper}`]: {
    outline: 0,
    minWidth: Ct
  }
}), tc = _(or)({
  "&:first-of-type": {
    padding: 0
  }
});
function nc(e) {
  const {
    children: n,
    onDismiss: r,
    open: o,
    slots: s,
    slotProps: a
  } = e, l = (s == null ? void 0 : s.dialog) ?? ec, c = (s == null ? void 0 : s.mobileTransition) ?? gt;
  return /* @__PURE__ */ P(l, g({
    open: o,
    onClose: r
  }, a == null ? void 0 : a.dialog, {
    TransitionComponent: c,
    TransitionProps: a == null ? void 0 : a.mobileTransition,
    PaperComponent: s == null ? void 0 : s.mobilePaper,
    PaperProps: a == null ? void 0 : a.mobilePaper,
    children: /* @__PURE__ */ P(tc, {
      children: n
    })
  }));
}
const oc = ["props", "getOpenDialogAriaText"], rc = (e) => {
  var J;
  let {
    props: n,
    getOpenDialogAriaText: r
  } = e, o = se(e, oc);
  const {
    slots: s,
    slotProps: a,
    className: l,
    sx: c,
    format: i,
    formatDensity: u,
    enableAccessibleFieldDOMStructure: d,
    selectedSections: p,
    onSelectedSectionsChange: h,
    timezone: w,
    name: b,
    label: D,
    inputRef: f,
    readOnly: v,
    disabled: y,
    localeText: S
  } = n, C = m.useRef(null), O = it(), E = ((J = a == null ? void 0 : a.toolbar) == null ? void 0 : J.hidden) ?? !1, {
    open: V,
    actions: x,
    layoutProps: $,
    renderCurrentView: B,
    fieldProps: R,
    contextValue: F
  } = ao(g({}, o, {
    props: n,
    fieldRef: C,
    autoFocusView: !0,
    additionalViewProps: {},
    wrapperVariant: "mobile"
  })), L = s.field, M = ue({
    elementType: L,
    externalSlotProps: a == null ? void 0 : a.field,
    additionalProps: g({}, R, E && {
      id: O
    }, !(y || v) && {
      onClick: x.onOpen,
      onKeyDown: As(x.onOpen)
    }, {
      readOnly: v ?? !0,
      disabled: y,
      className: l,
      sx: c,
      format: i,
      formatDensity: u,
      enableAccessibleFieldDOMStructure: d,
      selectedSections: p,
      onSelectedSectionsChange: h,
      timezone: w,
      label: D,
      name: b
    }, f ? {
      inputRef: f
    } : {}),
    ownerState: n
  });
  M.inputProps = g({}, M.inputProps, {
    "aria-label": r(R.value)
  });
  const I = g({
    textField: s.textField
  }, M.slots), A = s.layout ?? Zt;
  let Q = O;
  E && (D ? Q = `${O}-label` : Q = void 0);
  const H = g({}, a, {
    toolbar: g({}, a == null ? void 0 : a.toolbar, {
      titleId: O
    }),
    mobilePaper: g({
      "aria-labelledby": Q
    }, a == null ? void 0 : a.mobilePaper)
  }), K = Ce(C, M.unstableFieldRef);
  return {
    renderPicker: () => /* @__PURE__ */ ve(uo, {
      contextValue: F,
      localeText: S,
      children: [/* @__PURE__ */ P(L, g({}, M, {
        slots: I,
        slotProps: H,
        unstableFieldRef: K
      })), /* @__PURE__ */ P(nc, g({}, x, {
        open: V,
        slots: s,
        slotProps: H,
        children: /* @__PURE__ */ P(A, g({}, $, H == null ? void 0 : H.layout, {
          slots: s,
          slotProps: H,
          children: B()
        }))
      }))]
    })
  };
}, Ro = /* @__PURE__ */ m.forwardRef(function(n, r) {
  var u, d;
  const o = Ae(), s = ye(), a = eo(n, "MuiMobileDatePicker"), l = g({
    day: Ge,
    month: Ge,
    year: Ge
  }, a.viewRenderers), c = g({}, a, {
    viewRenderers: l,
    format: Yt(s, a, !1),
    slots: g({
      field: tn
    }, a.slots),
    slotProps: g({}, a.slotProps, {
      field: (p) => {
        var h;
        return g({}, Fn((h = a.slotProps) == null ? void 0 : h.field, p), no(a), {
          ref: r
        });
      },
      toolbar: g({
        hidden: !1
      }, (u = a.slotProps) == null ? void 0 : u.toolbar)
    })
  }), {
    renderPicker: i
  } = rc({
    props: c,
    valueManager: Re,
    valueType: "date",
    getOpenDialogAriaText: Qn({
      utils: s,
      formatKey: "fullDate",
      contextTranslation: o.openDatePickerDialogue,
      propsTranslation: (d = c.localeText) == null ? void 0 : d.openDatePickerDialogue
    }),
    validator: ct
  });
  return i();
});
Ro.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If `true`, the main element is focused during the first mount.
   * This main element is:
   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
   * - the `input` element if there is a field rendered.
   */
  autoFocus: t.bool,
  className: t.string,
  /**
   * If `true`, the popover or modal will close after submitting the full date.
   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
   */
  closeOnSelect: t.bool,
  /**
   * Formats the day of week displayed in the calendar header.
   * @param {TDate} date The date of the day of week provided by the adapter.
   * @returns {string} The name to display.
   * @default (date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()
   */
  dayOfWeekFormatter: t.func,
  /**
   * The default value.
   * Used when the component is not controlled.
   */
  defaultValue: t.object,
  /**
   * If `true`, the picker and text field are disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disableFuture: t.bool,
  /**
   * If `true`, today's date is rendering without highlighting with circle.
   * @default false
   */
  disableHighlightToday: t.bool,
  /**
   * If `true`, the open picker button will not be rendered (renders only the field).
   * @default false
   */
  disableOpenPicker: t.bool,
  /**
   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disablePast: t.bool,
  /**
   * If `true`, the week number will be display in the calendar.
   */
  displayWeekNumber: t.bool,
  /**
   * @default false
   */
  enableAccessibleFieldDOMStructure: t.any,
  /**
   * The day view will show as many weeks as needed after the end of the current month to match this value.
   * Put it to 6 to have a fixed number of weeks in Gregorian calendars
   */
  fixedWeekNumber: t.number,
  /**
   * Format of the date when rendered in the input(s).
   * Defaults to localized format based on the used `views`.
   */
  format: t.string,
  /**
   * Density of the format when rendered in the input.
   * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
   * @default "dense"
   */
  formatDensity: t.oneOf(["dense", "spacious"]),
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: Ve,
  /**
   * The label content.
   */
  label: t.node,
  /**
   * If `true`, calls `renderLoading` instead of rendering the day calendar.
   * Can be used to preload information and show it in calendar.
   * @default false
   */
  loading: t.bool,
  /**
   * Locale for components texts.
   * Allows overriding texts coming from `LocalizationProvider` and `theme`.
   */
  localeText: t.object,
  /**
   * Maximal selectable date.
   * @default 2099-12-31
   */
  maxDate: t.object,
  /**
   * Minimal selectable date.
   * @default 1900-01-01
   */
  minDate: t.object,
  /**
   * Months rendered per row.
   * @default 3
   */
  monthsPerRow: t.oneOf([3, 4]),
  /**
   * Name attribute used by the `input` element in the Field.
   */
  name: t.string,
  /**
   * Callback fired when the value is accepted.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @param {TValue} value The value that was just accepted.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onAccept: t.func,
  /**
   * Callback fired when the value changes.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @param {TValue} value The new value.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onChange: t.func,
  /**
   * Callback fired when the popup requests to be closed.
   * Use in controlled mode (see `open`).
   */
  onClose: t.func,
  /**
   * Callback fired when the error associated with the current value changes.
   * When a validation error is detected, the `error` parameter contains a non-null value.
   * This can be used to render an appropriate form error.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @param {TError} error The reason why the current value is not valid.
   * @param {TValue} value The value associated with the error.
   */
  onError: t.func,
  /**
   * Callback fired on month change.
   * @template TDate
   * @param {TDate} month The new month.
   */
  onMonthChange: t.func,
  /**
   * Callback fired when the popup requests to be opened.
   * Use in controlled mode (see `open`).
   */
  onOpen: t.func,
  /**
   * Callback fired when the selected sections change.
   * @param {FieldSelectedSections} newValue The new selected sections.
   */
  onSelectedSectionsChange: t.func,
  /**
   * Callback fired on view change.
   * @template TView
   * @param {TView} view The new view.
   */
  onViewChange: t.func,
  /**
   * Callback fired on year change.
   * @template TDate
   * @param {TDate} year The new year.
   */
  onYearChange: t.func,
  /**
   * Control the popup or dialog open state.
   * @default false
   */
  open: t.bool,
  /**
   * The default visible view.
   * Used when the component view is not controlled.
   * Must be a valid option from `views` list.
   */
  openTo: t.oneOf(["day", "month", "year"]),
  /**
   * Force rendering in particular orientation.
   */
  orientation: t.oneOf(["landscape", "portrait"]),
  readOnly: t.bool,
  /**
   * If `true`, disable heavy animations.
   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
   */
  reduceAnimations: t.bool,
  /**
   * The date used to generate the new value when both `value` and `defaultValue` are empty.
   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
   */
  referenceDate: t.object,
  /**
   * Component displaying when passed `loading` true.
   * @returns {React.ReactNode} The node to render when loading.
   * @default () => <span>...</span>
   */
  renderLoading: t.func,
  /**
   * The currently selected sections.
   * This prop accepts four formats:
   * 1. If a number is provided, the section at this index will be selected.
   * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
   * 3. If `"all"` is provided, all the sections will be selected.
   * 4. If `null` is provided, no section will be selected.
   * If not provided, the selected sections will be handled internally.
   */
  selectedSections: t.oneOfType([t.oneOf(["all", "day", "empty", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), t.number]),
  /**
   * Disable specific date.
   *
   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
   *
   * @template TDate
   * @param {TDate} day The date to test.
   * @returns {boolean} If `true` the date will be disabled.
   */
  shouldDisableDate: t.func,
  /**
   * Disable specific month.
   * @template TDate
   * @param {TDate} month The month to test.
   * @returns {boolean} If `true`, the month will be disabled.
   */
  shouldDisableMonth: t.func,
  /**
   * Disable specific year.
   * @template TDate
   * @param {TDate} year The year to test.
   * @returns {boolean} If `true`, the year will be disabled.
   */
  shouldDisableYear: t.func,
  /**
   * If `true`, days outside the current month are rendered:
   *
   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
   *
   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
   *
   * - ignored if `calendars` equals more than `1` on range pickers.
   * @default false
   */
  showDaysOutsideCurrentMonth: t.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: t.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Choose which timezone to use for the value.
   * Example: "default", "system", "UTC", "America/New_York".
   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
   */
  timezone: t.string,
  /**
   * The selected value.
   * Used when the component is controlled.
   */
  value: t.object,
  /**
   * The visible view.
   * Used when the component view is controlled.
   * Must be a valid option from `views` list.
   */
  view: t.oneOf(["day", "month", "year"]),
  /**
   * Define custom view renderers for each section.
   * If `null`, the section will only have field editing.
   * If `undefined`, internally defined view will be used.
   */
  viewRenderers: t.shape({
    day: t.func,
    month: t.func,
    year: t.func
  }),
  /**
   * Available views.
   */
  views: t.arrayOf(t.oneOf(["day", "month", "year"]).isRequired),
  /**
   * Years are displayed in ascending (chronological) order by default.
   * If `desc`, years are displayed in descending order.
   * @default 'asc'
   */
  yearsOrder: t.oneOf(["asc", "desc"]),
  /**
   * Years rendered per row.
   * @default 3
   */
  yearsPerRow: t.oneOf([3, 4])
};
const sc = ["desktopModeMediaQuery"], Io = /* @__PURE__ */ m.forwardRef(function(n, r) {
  const o = be({
    props: n,
    name: "MuiDatePicker"
  }), {
    desktopModeMediaQuery: s = Ls
  } = o, a = se(o, sc);
  return Ln(s, {
    defaultMatches: !0
  }) ? /* @__PURE__ */ P(Oo, g({
    ref: r
  }, a)) : /* @__PURE__ */ P(Ro, g({
    ref: r
  }, a));
});
process.env.NODE_ENV !== "production" && (Io.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If `true`, the main element is focused during the first mount.
   * This main element is:
   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
   * - the `input` element if there is a field rendered.
   */
  autoFocus: t.bool,
  className: t.string,
  /**
   * If `true`, the popover or modal will close after submitting the full date.
   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
   */
  closeOnSelect: t.bool,
  /**
   * Formats the day of week displayed in the calendar header.
   * @param {TDate} date The date of the day of week provided by the adapter.
   * @returns {string} The name to display.
   * @default (date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()
   */
  dayOfWeekFormatter: t.func,
  /**
   * The default value.
   * Used when the component is not controlled.
   */
  defaultValue: t.object,
  /**
   * CSS media query when `Mobile` mode will be changed to `Desktop`.
   * @default '@media (pointer: fine)'
   * @example '@media (min-width: 720px)' or theme.breakpoints.up("sm")
   */
  desktopModeMediaQuery: t.string,
  /**
   * If `true`, the picker and text field are disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disableFuture: t.bool,
  /**
   * If `true`, today's date is rendering without highlighting with circle.
   * @default false
   */
  disableHighlightToday: t.bool,
  /**
   * If `true`, the open picker button will not be rendered (renders only the field).
   * @default false
   */
  disableOpenPicker: t.bool,
  /**
   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disablePast: t.bool,
  /**
   * If `true`, the week number will be display in the calendar.
   */
  displayWeekNumber: t.bool,
  /**
   * @default false
   */
  enableAccessibleFieldDOMStructure: t.any,
  /**
   * The day view will show as many weeks as needed after the end of the current month to match this value.
   * Put it to 6 to have a fixed number of weeks in Gregorian calendars
   */
  fixedWeekNumber: t.number,
  /**
   * Format of the date when rendered in the input(s).
   * Defaults to localized format based on the used `views`.
   */
  format: t.string,
  /**
   * Density of the format when rendered in the input.
   * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
   * @default "dense"
   */
  formatDensity: t.oneOf(["dense", "spacious"]),
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: Ve,
  /**
   * The label content.
   */
  label: t.node,
  /**
   * If `true`, calls `renderLoading` instead of rendering the day calendar.
   * Can be used to preload information and show it in calendar.
   * @default false
   */
  loading: t.bool,
  /**
   * Locale for components texts.
   * Allows overriding texts coming from `LocalizationProvider` and `theme`.
   */
  localeText: t.object,
  /**
   * Maximal selectable date.
   * @default 2099-12-31
   */
  maxDate: t.object,
  /**
   * Minimal selectable date.
   * @default 1900-01-01
   */
  minDate: t.object,
  /**
   * Months rendered per row.
   * @default 3
   */
  monthsPerRow: t.oneOf([3, 4]),
  /**
   * Name attribute used by the `input` element in the Field.
   */
  name: t.string,
  /**
   * Callback fired when the value is accepted.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @param {TValue} value The value that was just accepted.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onAccept: t.func,
  /**
   * Callback fired when the value changes.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @param {TValue} value The new value.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onChange: t.func,
  /**
   * Callback fired when the popup requests to be closed.
   * Use in controlled mode (see `open`).
   */
  onClose: t.func,
  /**
   * Callback fired when the error associated with the current value changes.
   * When a validation error is detected, the `error` parameter contains a non-null value.
   * This can be used to render an appropriate form error.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @param {TError} error The reason why the current value is not valid.
   * @param {TValue} value The value associated with the error.
   */
  onError: t.func,
  /**
   * Callback fired on month change.
   * @template TDate
   * @param {TDate} month The new month.
   */
  onMonthChange: t.func,
  /**
   * Callback fired when the popup requests to be opened.
   * Use in controlled mode (see `open`).
   */
  onOpen: t.func,
  /**
   * Callback fired when the selected sections change.
   * @param {FieldSelectedSections} newValue The new selected sections.
   */
  onSelectedSectionsChange: t.func,
  /**
   * Callback fired on view change.
   * @template TView
   * @param {TView} view The new view.
   */
  onViewChange: t.func,
  /**
   * Callback fired on year change.
   * @template TDate
   * @param {TDate} year The new year.
   */
  onYearChange: t.func,
  /**
   * Control the popup or dialog open state.
   * @default false
   */
  open: t.bool,
  /**
   * The default visible view.
   * Used when the component view is not controlled.
   * Must be a valid option from `views` list.
   */
  openTo: t.oneOf(["day", "month", "year"]),
  /**
   * Force rendering in particular orientation.
   */
  orientation: t.oneOf(["landscape", "portrait"]),
  readOnly: t.bool,
  /**
   * If `true`, disable heavy animations.
   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
   */
  reduceAnimations: t.bool,
  /**
   * The date used to generate the new value when both `value` and `defaultValue` are empty.
   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
   */
  referenceDate: t.object,
  /**
   * Component displaying when passed `loading` true.
   * @returns {React.ReactNode} The node to render when loading.
   * @default () => <span>...</span>
   */
  renderLoading: t.func,
  /**
   * The currently selected sections.
   * This prop accepts four formats:
   * 1. If a number is provided, the section at this index will be selected.
   * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
   * 3. If `"all"` is provided, all the sections will be selected.
   * 4. If `null` is provided, no section will be selected.
   * If not provided, the selected sections will be handled internally.
   */
  selectedSections: t.oneOfType([t.oneOf(["all", "day", "empty", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), t.number]),
  /**
   * Disable specific date.
   *
   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
   *
   * @template TDate
   * @param {TDate} day The date to test.
   * @returns {boolean} If `true` the date will be disabled.
   */
  shouldDisableDate: t.func,
  /**
   * Disable specific month.
   * @template TDate
   * @param {TDate} month The month to test.
   * @returns {boolean} If `true`, the month will be disabled.
   */
  shouldDisableMonth: t.func,
  /**
   * Disable specific year.
   * @template TDate
   * @param {TDate} year The year to test.
   * @returns {boolean} If `true`, the year will be disabled.
   */
  shouldDisableYear: t.func,
  /**
   * If `true`, days outside the current month are rendered:
   *
   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
   *
   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
   *
   * - ignored if `calendars` equals more than `1` on range pickers.
   * @default false
   */
  showDaysOutsideCurrentMonth: t.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: t.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Choose which timezone to use for the value.
   * Example: "default", "system", "UTC", "America/New_York".
   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
   */
  timezone: t.string,
  /**
   * The selected value.
   * Used when the component is controlled.
   */
  value: t.object,
  /**
   * The visible view.
   * Used when the component view is controlled.
   * Must be a valid option from `views` list.
   */
  view: t.oneOf(["day", "month", "year"]),
  /**
   * Define custom view renderers for each section.
   * If `null`, the section will only have field editing.
   * If `undefined`, internally defined view will be used.
   */
  viewRenderers: t.shape({
    day: t.func,
    month: t.func,
    year: t.func
  }),
  /**
   * Available views.
   */
  views: t.arrayOf(t.oneOf(["day", "month", "year"]).isRequired),
  /**
   * Years are displayed in ascending (chronological) order by default.
   * If `desc`, years are displayed in descending order.
   * @default 'asc'
   */
  yearsOrder: t.oneOf(["asc", "desc"]),
  /**
   * Years rendered per row.
   * @default 4 on desktop, 3 on mobile
   */
  yearsPerRow: t.oneOf([3, 4])
});
const Gc = ({
  adapterLocale: e = "fr",
  ...n
}) => /* @__PURE__ */ P(
  Ht,
  {
    dateAdapter: qr,
    adapterLocale: e,
    children: /* @__PURE__ */ P(Io, { ...n })
  }
);
export {
  Nn as C,
  Gc as D,
  $n as L,
  wr as a,
  Sr as b,
  ae as c,
  Kc as d,
  gr as g,
  _c as l
};
