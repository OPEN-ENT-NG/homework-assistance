import * as i from "react";
import { H as A, I as D, L, G as P, P as e } from "./identifier-B7MO0PvI.js";
import { a as J, i as k } from "./utils-DWqc1kRF.js";
import { F as K, u as Q } from "./useFormControl-CatNKXAi.js";
import { jsx as I, jsxs as U } from "react/jsx-runtime";
import { s as E, u as B, c as V } from "./DefaultPropsProvider-BYFwNPLt.js";
import { f as X } from "./formControlState-vgaj2ksH.js";
import { m as _ } from "./memoTheme-CqfvfBST.js";
import { c as Y } from "./createSimplePaletteValueFilter-B7--0ryQ.js";
function x(o, r) {
  var n, t, s;
  return /* @__PURE__ */ i.isValidElement(o) && r.indexOf(
    // For server components `muiName` is avaialble in element.type._payload.value.muiName
    // relevant info - https://github.com/facebook/react/blob/2807d781a08db8e9873687fccc25c0f12b4fb3d4/packages/react/src/ReactLazy.js#L45
    // eslint-disable-next-line no-underscore-dangle
    o.type.muiName ?? ((s = (t = (n = o.type) == null ? void 0 : n._payload) == null ? void 0 : t.value) == null ? void 0 : s.muiName)
  ) !== -1;
}
function Z(o) {
  return A("MuiFormControl", o);
}
const ye = D("MuiFormControl", ["root", "marginNone", "marginNormal", "marginDense", "fullWidth", "disabled"]), ee = (o) => {
  const {
    classes: r,
    margin: n,
    fullWidth: t
  } = o, s = {
    root: ["root", n !== "none" && `margin${L(n)}`, t && "fullWidth"]
  };
  return V(s, Z, r);
}, oe = E("div", {
  name: "MuiFormControl",
  slot: "Root",
  overridesResolver: ({
    ownerState: o
  }, r) => ({
    ...r.root,
    ...r[`margin${L(o.margin)}`],
    ...o.fullWidth && r.fullWidth
  })
})({
  display: "inline-flex",
  flexDirection: "column",
  position: "relative",
  // Reset fieldset default style.
  minWidth: 0,
  padding: 0,
  margin: 0,
  border: 0,
  verticalAlign: "top",
  // Fix alignment issue on Safari.
  variants: [{
    props: {
      margin: "normal"
    },
    style: {
      marginTop: 16,
      marginBottom: 8
    }
  }, {
    props: {
      margin: "dense"
    },
    style: {
      marginTop: 8,
      marginBottom: 4
    }
  }, {
    props: {
      fullWidth: !0
    },
    style: {
      width: "100%"
    }
  }]
}), re = /* @__PURE__ */ i.forwardRef(function(r, n) {
  const t = B({
    props: r,
    name: "MuiFormControl"
  }), {
    children: s,
    className: f,
    color: p = "primary",
    component: c = "div",
    disabled: a = !1,
    error: y = !1,
    focused: O,
    fullWidth: g = !1,
    hiddenLabel: F = !1,
    margin: h = "none",
    required: m = !1,
    size: l = "medium",
    variant: u = "outlined",
    ...v
  } = t, M = {
    ...t,
    color: p,
    component: c,
    disabled: a,
    error: y,
    fullWidth: g,
    hiddenLabel: F,
    margin: h,
    required: m,
    size: l,
    variant: u
  }, z = ee(M), [q, H] = i.useState(() => {
    let b = !1;
    return s && i.Children.forEach(s, (d) => {
      if (!x(d, ["Input", "Select"]))
        return;
      const $ = x(d, ["Select"]) ? d.props.input : d;
      $ && J($.props) && (b = !0);
    }), b;
  }), [R, j] = i.useState(() => {
    let b = !1;
    return s && i.Children.forEach(s, (d) => {
      x(d, ["Input", "Select"]) && (k(d.props, !0) || k(d.props.inputProps, !0)) && (b = !0);
    }), b;
  }), [W, S] = i.useState(!1);
  a && W && S(!1);
  const w = O !== void 0 && !a ? O : W;
  let N;
  const T = i.useRef(!1);
  process.env.NODE_ENV !== "production" && (N = () => (T.current && console.error(["MUI: There are multiple `InputBase` components inside a FormControl.", "This creates visual inconsistencies, only use one `InputBase`."].join(`
`)), T.current = !0, () => {
    T.current = !1;
  }));
  const G = i.useMemo(() => ({
    adornedStart: q,
    setAdornedStart: H,
    color: p,
    disabled: a,
    error: y,
    filled: R,
    focused: w,
    fullWidth: g,
    hiddenLabel: F,
    size: l,
    onBlur: () => {
      S(!1);
    },
    onEmpty: () => {
      j(!1);
    },
    onFilled: () => {
      j(!0);
    },
    onFocus: () => {
      S(!0);
    },
    registerEffect: N,
    required: m,
    variant: u
  }), [q, p, a, y, R, w, g, F, N, m, l, u]);
  return /* @__PURE__ */ I(K.Provider, {
    value: G,
    children: /* @__PURE__ */ I(oe, {
      as: c,
      ownerState: M,
      className: P(z.root, f),
      ref: n,
      ...v,
      children: s
    })
  });
});
process.env.NODE_ENV !== "production" && (re.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: e.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: e.object,
  /**
   * @ignore
   */
  className: e.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: e.oneOfType([e.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), e.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: e.elementType,
  /**
   * If `true`, the label, input and helper text should be displayed in a disabled state.
   * @default false
   */
  disabled: e.bool,
  /**
   * If `true`, the label is displayed in an error state.
   * @default false
   */
  error: e.bool,
  /**
   * If `true`, the component is displayed in focused state.
   */
  focused: e.bool,
  /**
   * If `true`, the component will take up the full width of its container.
   * @default false
   */
  fullWidth: e.bool,
  /**
   * If `true`, the label is hidden.
   * This is used to increase density for a `FilledInput`.
   * Be sure to add `aria-label` to the `input` element.
   * @default false
   */
  hiddenLabel: e.bool,
  /**
   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
   * @default 'none'
   */
  margin: e.oneOf(["dense", "none", "normal"]),
  /**
   * If `true`, the label will indicate that the `input` is required.
   * @default false
   */
  required: e.bool,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: e.oneOfType([e.oneOf(["medium", "small"]), e.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: e.oneOfType([e.arrayOf(e.oneOfType([e.func, e.object, e.bool])), e.func, e.object]),
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: e.oneOf(["filled", "outlined", "standard"])
});
function se(o) {
  return A("MuiFormLabel", o);
}
const C = D("MuiFormLabel", ["root", "colorSecondary", "focused", "disabled", "error", "filled", "required", "asterisk"]), te = (o) => {
  const {
    classes: r,
    color: n,
    focused: t,
    disabled: s,
    error: f,
    filled: p,
    required: c
  } = o, a = {
    root: ["root", `color${L(n)}`, s && "disabled", f && "error", p && "filled", t && "focused", c && "required"],
    asterisk: ["asterisk", f && "error"]
  };
  return V(a, se, r);
}, ne = E("label", {
  name: "MuiFormLabel",
  slot: "Root",
  overridesResolver: ({
    ownerState: o
  }, r) => ({
    ...r.root,
    ...o.color === "secondary" && r.colorSecondary,
    ...o.filled && r.filled
  })
})(_(({
  theme: o
}) => ({
  color: (o.vars || o).palette.text.secondary,
  ...o.typography.body1,
  lineHeight: "1.4375em",
  padding: 0,
  position: "relative",
  variants: [...Object.entries(o.palette).filter(Y()).map(([r]) => ({
    props: {
      color: r
    },
    style: {
      [`&.${C.focused}`]: {
        color: (o.vars || o).palette[r].main
      }
    }
  })), {
    props: {},
    style: {
      [`&.${C.disabled}`]: {
        color: (o.vars || o).palette.text.disabled
      },
      [`&.${C.error}`]: {
        color: (o.vars || o).palette.error.main
      }
    }
  }]
}))), le = E("span", {
  name: "MuiFormLabel",
  slot: "Asterisk",
  overridesResolver: (o, r) => r.asterisk
})(_(({
  theme: o
}) => ({
  [`&.${C.error}`]: {
    color: (o.vars || o).palette.error.main
  }
}))), ie = /* @__PURE__ */ i.forwardRef(function(r, n) {
  const t = B({
    props: r,
    name: "MuiFormLabel"
  }), {
    children: s,
    className: f,
    color: p,
    component: c = "label",
    disabled: a,
    error: y,
    filled: O,
    focused: g,
    required: F,
    ...h
  } = t, m = Q(), l = X({
    props: t,
    muiFormControl: m,
    states: ["color", "required", "focused", "disabled", "error", "filled"]
  }), u = {
    ...t,
    color: l.color || "primary",
    component: c,
    disabled: l.disabled,
    error: l.error,
    filled: l.filled,
    focused: l.focused,
    required: l.required
  }, v = te(u);
  return /* @__PURE__ */ U(ne, {
    as: c,
    ownerState: u,
    className: P(v.root, f),
    ref: n,
    ...h,
    children: [s, l.required && /* @__PURE__ */ U(le, {
      ownerState: u,
      "aria-hidden": !0,
      className: v.asterisk,
      children: [" ", "*"]
    })]
  });
});
process.env.NODE_ENV !== "production" && (ie.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: e.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: e.object,
  /**
   * @ignore
   */
  className: e.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   */
  color: e.oneOfType([e.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), e.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: e.elementType,
  /**
   * If `true`, the label should be displayed in a disabled state.
   */
  disabled: e.bool,
  /**
   * If `true`, the label is displayed in an error state.
   */
  error: e.bool,
  /**
   * If `true`, the label should use filled classes key.
   */
  filled: e.bool,
  /**
   * If `true`, the input of this label is focused (used by `FormGroup` components).
   */
  focused: e.bool,
  /**
   * If `true`, the label will indicate that the `input` is required.
   */
  required: e.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: e.oneOfType([e.arrayOf(e.oneOfType([e.func, e.object, e.bool])), e.func, e.object])
});
export {
  re as F,
  ie as a,
  C as b,
  ne as c,
  se as d,
  ye as f,
  Z as g,
  x as i
};
